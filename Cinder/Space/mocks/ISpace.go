// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import Message "Cinder/Base/Message"
import Prop "Cinder/Base/Prop"
import Space "Cinder/Space"
import SrvNet "Cinder/Base/SrvNet"
import User "Cinder/Base/User"
import Util "Cinder/Base/Util"
import mock "github.com/stretchr/testify/mock"
import time "time"

// ISpace is an autogenerated mock type for the ISpace type
type ISpace struct {
	mock.Mock
}

// AddActor provides a mock function with given fields: actorType, actorID, ownerUserID, propData, userData
func (_m *ISpace) AddActor(actorType string, actorID string, ownerUserID string, propData []byte, userData interface{}) (string, error) {
	ret := _m.Called(actorType, actorID, ownerUserID, propData, userData)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []byte, interface{}) string); ok {
		r0 = rf(actorType, actorID, ownerUserID, propData, userData)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []byte, interface{}) error); ok {
		r1 = rf(actorType, actorID, ownerUserID, propData, userData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCallMethod provides a mock function with given fields:
func (_m *ISpace) BatchCallMethod() {
	_m.Called()
}

// CallMethod provides a mock function with given fields: methodName, args
func (_m *ISpace) CallMethod(methodName string, args ...interface{}) ([]interface{}, error) {
	var _ca []interface{}
	_ca = append(_ca, methodName)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 []interface{}
	if rf, ok := ret.Get(0).(func(string, ...interface{}) []interface{}); ok {
		r0 = rf(methodName, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, ...interface{}) error); ok {
		r1 = rf(methodName, args...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CallSignal provides a mock function with given fields:
func (_m *ISpace) CallSignal() <-chan bool {
	ret := _m.Called()

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// DestroyAllActor provides a mock function with given fields:
func (_m *ISpace) DestroyAllActor() {
	_m.Called()
}

// DestroyPropOwner provides a mock function with given fields:
func (_m *ISpace) DestroyPropOwner() {
	_m.Called()
}

// DestroySelf provides a mock function with given fields:
func (_m *ISpace) DestroySelf() {
	_m.Called()
}

// FlushToDB provides a mock function with given fields:
func (_m *ISpace) FlushToDB() chan error {
	ret := _m.Called()

	var r0 chan error
	if rf, ok := ret.Get(0).(func() chan error); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan error)
		}
	}

	return r0
}

// GetActor provides a mock function with given fields: id
func (_m *ISpace) GetActor(id string) (Space.IActor, error) {
	ret := _m.Called(id)

	var r0 Space.IActor
	if rf, ok := ret.Get(0).(func(string) Space.IActor); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Space.IActor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDBSrvID provides a mock function with given fields:
func (_m *ISpace) GetDBSrvID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetDeltaTime provides a mock function with given fields:
func (_m *ISpace) GetDeltaTime() time.Duration {
	ret := _m.Called()

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// GetID provides a mock function with given fields:
func (_m *ISpace) GetID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetOwnerUser provides a mock function with given fields:
func (_m *ISpace) GetOwnerUser() Space.IUser {
	ret := _m.Called()

	var r0 Space.IUser
	if rf, ok := ret.Get(0).(func() Space.IUser); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Space.IUser)
		}
	}

	return r0
}

// GetProp provides a mock function with given fields:
func (_m *ISpace) GetProp() Prop.IProp {
	ret := _m.Called()

	var r0 Prop.IProp
	if rf, ok := ret.Get(0).(func() Prop.IProp); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Prop.IProp)
		}
	}

	return r0
}

// GetPropID provides a mock function with given fields:
func (_m *ISpace) GetPropID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetPropType provides a mock function with given fields:
func (_m *ISpace) GetPropType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// GetSrvNode provides a mock function with given fields:
func (_m *ISpace) GetSrvNode() SrvNet.INode {
	ret := _m.Called()

	var r0 SrvNet.INode
	if rf, ok := ret.Get(0).(func() SrvNet.INode); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SrvNet.INode)
		}
	}

	return r0
}

// GetSync provides a mock function with given fields:
func (_m *ISpace) GetSync() Prop.IPropSync {
	ret := _m.Called()

	var r0 Prop.IPropSync
	if rf, ok := ret.Get(0).(func() Prop.IPropSync); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Prop.IPropSync)
		}
	}

	return r0
}

// GetTime provides a mock function with given fields:
func (_m *ISpace) GetTime() time.Time {
	ret := _m.Called()

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// GetUser provides a mock function with given fields: userID
func (_m *ISpace) GetUser(userID string) (Space.IUser, error) {
	ret := _m.Called(userID)

	var r0 Space.IUser
	if rf, ok := ret.Get(0).(func(string) Space.IUser); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(Space.IUser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserData provides a mock function with given fields:
func (_m *ISpace) GetUserData() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// InitPropOwner provides a mock function with given fields: data
func (_m *ISpace) InitPropOwner(data []byte) {
	_m.Called(data)
}

// RegisterActor provides a mock function with given fields: actorType, protoType
func (_m *ISpace) RegisterActor(actorType string, protoType Space.IActor) {
	_m.Called(actorType, protoType)
}

// RemoveActor provides a mock function with given fields: actorID
func (_m *ISpace) RemoveActor(actorID string) error {
	ret := _m.Called(actorID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(actorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SafeCall provides a mock function with given fields: methodName, args
func (_m *ISpace) SafeCall(methodName string, args ...interface{}) chan *Util.SafeCallRet {
	var _ca []interface{}
	_ca = append(_ca, methodName)
	_ca = append(_ca, args...)
	ret := _m.Called(_ca...)

	var r0 chan *Util.SafeCallRet
	if rf, ok := ret.Get(0).(func(string, ...interface{}) chan *Util.SafeCallRet); ok {
		r0 = rf(methodName, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan *Util.SafeCallRet)
		}
	}

	return r0
}

// SafeCallDestroy provides a mock function with given fields:
func (_m *ISpace) SafeCallDestroy() {
	_m.Called()
}

// SendToAllClient provides a mock function with given fields: msg
func (_m *ISpace) SendToAllClient(msg Message.IMessage) {
	_m.Called(msg)
}

// SendToAllClientExceptOne provides a mock function with given fields: msg, exceptUserID
func (_m *ISpace) SendToAllClientExceptOne(msg Message.IMessage, exceptUserID string) {
	_m.Called(msg, exceptUserID)
}

// SetParentCaller provides a mock function with given fields: caller
func (_m *ISpace) SetParentCaller(caller Util.ISafeCall) {
	_m.Called(caller)
}

// TraversalActor provides a mock function with given fields: cb
func (_m *ISpace) TraversalActor(cb func(Space.IActor)) {
	_m.Called(cb)
}

// TraversalUser provides a mock function with given fields: cb
func (_m *ISpace) TraversalUser(cb func(User.IUser) bool) {
	_m.Called(cb)
}

// UpdateActors provides a mock function with given fields:
func (_m *ISpace) UpdateActors() {
	_m.Called()
}
