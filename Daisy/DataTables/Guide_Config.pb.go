// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Guide_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GuideStep_Config struct {
	//* 步骤ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 关卡ID
	LevelID uint32 `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
}

func (m *GuideStep_Config) Reset()         { *m = GuideStep_Config{} }
func (m *GuideStep_Config) String() string { return proto.CompactTextString(m) }
func (*GuideStep_Config) ProtoMessage()    {}
func (*GuideStep_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ebfa408564241e, []int{0}
}
func (m *GuideStep_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuideStep_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuideStep_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuideStep_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuideStep_Config.Merge(m, src)
}
func (m *GuideStep_Config) XXX_Size() int {
	return m.Size()
}
func (m *GuideStep_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_GuideStep_Config.DiscardUnknown(m)
}

var xxx_messageInfo_GuideStep_Config proto.InternalMessageInfo

func (m *GuideStep_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GuideStep_Config) GetLevelID() uint32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

type GuideBattleArea_Config struct {
	//* 流水ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 关卡ID
	LevelID uint32 `protobuf:"varint,2,opt,name=LevelID,proto3" json:"LevelID,omitempty"`
	//* 第几场战斗
	Index uint32 `protobuf:"varint,3,opt,name=Index,proto3" json:"Index,omitempty"`
	//* 怪物的BD(和ElementType对应）
	MonsterBulidID []uint32 `protobuf:"varint,4,rep,packed,name=MonsterBulidID,proto3" json:"MonsterBulidID,omitempty"`
	//* Boss的BD(和ElementType对应）
	BossBulidID []uint32 `protobuf:"varint,5,rep,packed,name=BossBulidID,proto3" json:"BossBulidID,omitempty"`
	//* 怪物ID
	NpcId []uint32 `protobuf:"varint,6,rep,packed,name=NpcId,proto3" json:"NpcId,omitempty"`
	//* 特殊特工
	SpecialJob uint32 `protobuf:"varint,8,opt,name=SpecialJob,proto3" json:"SpecialJob,omitempty"`
}

func (m *GuideBattleArea_Config) Reset()         { *m = GuideBattleArea_Config{} }
func (m *GuideBattleArea_Config) String() string { return proto.CompactTextString(m) }
func (*GuideBattleArea_Config) ProtoMessage()    {}
func (*GuideBattleArea_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ebfa408564241e, []int{1}
}
func (m *GuideBattleArea_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuideBattleArea_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuideBattleArea_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuideBattleArea_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuideBattleArea_Config.Merge(m, src)
}
func (m *GuideBattleArea_Config) XXX_Size() int {
	return m.Size()
}
func (m *GuideBattleArea_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_GuideBattleArea_Config.DiscardUnknown(m)
}

var xxx_messageInfo_GuideBattleArea_Config proto.InternalMessageInfo

func (m *GuideBattleArea_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GuideBattleArea_Config) GetLevelID() uint32 {
	if m != nil {
		return m.LevelID
	}
	return 0
}

func (m *GuideBattleArea_Config) GetIndex() uint32 {
	if m != nil {
		return m.Index
	}
	return 0
}

func (m *GuideBattleArea_Config) GetMonsterBulidID() []uint32 {
	if m != nil {
		return m.MonsterBulidID
	}
	return nil
}

func (m *GuideBattleArea_Config) GetBossBulidID() []uint32 {
	if m != nil {
		return m.BossBulidID
	}
	return nil
}

func (m *GuideBattleArea_Config) GetNpcId() []uint32 {
	if m != nil {
		return m.NpcId
	}
	return nil
}

func (m *GuideBattleArea_Config) GetSpecialJob() uint32 {
	if m != nil {
		return m.SpecialJob
	}
	return 0
}

type GuideLevel_Config struct {
	//* 关卡ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 特工组
	Job []uint32 `protobuf:"varint,2,rep,packed,name=Job,proto3" json:"Job,omitempty"`
}

func (m *GuideLevel_Config) Reset()         { *m = GuideLevel_Config{} }
func (m *GuideLevel_Config) String() string { return proto.CompactTextString(m) }
func (*GuideLevel_Config) ProtoMessage()    {}
func (*GuideLevel_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ebfa408564241e, []int{2}
}
func (m *GuideLevel_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuideLevel_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuideLevel_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuideLevel_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuideLevel_Config.Merge(m, src)
}
func (m *GuideLevel_Config) XXX_Size() int {
	return m.Size()
}
func (m *GuideLevel_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_GuideLevel_Config.DiscardUnknown(m)
}

var xxx_messageInfo_GuideLevel_Config proto.InternalMessageInfo

func (m *GuideLevel_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *GuideLevel_Config) GetJob() []uint32 {
	if m != nil {
		return m.Job
	}
	return nil
}

type Guide_Config_Data struct {
	GuideStep_ConfigItems       map[uint32]*GuideStep_Config       `protobuf:"bytes,1,rep,name=GuideStep_Config_items,json=GuideStepConfigItems,proto3" json:"GuideStep_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GuideBattleArea_ConfigItems map[uint32]*GuideBattleArea_Config `protobuf:"bytes,2,rep,name=GuideBattleArea_Config_items,json=GuideBattleAreaConfigItems,proto3" json:"GuideBattleArea_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	GuideLevel_ConfigItems      map[uint32]*GuideLevel_Config      `protobuf:"bytes,3,rep,name=GuideLevel_Config_items,json=GuideLevelConfigItems,proto3" json:"GuideLevel_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Guide_Config_Data) Reset()         { *m = Guide_Config_Data{} }
func (m *Guide_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Guide_Config_Data) ProtoMessage()    {}
func (*Guide_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_74ebfa408564241e, []int{3}
}
func (m *Guide_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Guide_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Guide_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Guide_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Guide_Config_Data.Merge(m, src)
}
func (m *Guide_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Guide_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Guide_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Guide_Config_Data proto.InternalMessageInfo

func (m *Guide_Config_Data) GetGuideStep_ConfigItems() map[uint32]*GuideStep_Config {
	if m != nil {
		return m.GuideStep_ConfigItems
	}
	return nil
}

func (m *Guide_Config_Data) GetGuideBattleArea_ConfigItems() map[uint32]*GuideBattleArea_Config {
	if m != nil {
		return m.GuideBattleArea_ConfigItems
	}
	return nil
}

func (m *Guide_Config_Data) GetGuideLevel_ConfigItems() map[uint32]*GuideLevel_Config {
	if m != nil {
		return m.GuideLevel_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*GuideStep_Config)(nil), "DataTables.GuideStep_Config")
	proto.RegisterType((*GuideBattleArea_Config)(nil), "DataTables.GuideBattleArea_Config")
	proto.RegisterType((*GuideLevel_Config)(nil), "DataTables.GuideLevel_Config")
	proto.RegisterType((*Guide_Config_Data)(nil), "DataTables.Guide_Config_Data")
	proto.RegisterMapType((map[uint32]*GuideBattleArea_Config)(nil), "DataTables.Guide_Config_Data.GuideBattleAreaConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*GuideLevel_Config)(nil), "DataTables.Guide_Config_Data.GuideLevelConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*GuideStep_Config)(nil), "DataTables.Guide_Config_Data.GuideStepConfigItemsEntry")
}

func init() { proto.RegisterFile("Guide_Config.proto", fileDescriptor_74ebfa408564241e) }

var fileDescriptor_74ebfa408564241e = []byte{
	// 457 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0x41, 0x6f, 0x94, 0x40,
	0x14, 0xc7, 0x77, 0x40, 0xaa, 0x79, 0x9b, 0x36, 0x75, 0xd2, 0xea, 0x48, 0x2a, 0x12, 0x0e, 0x66,
	0x4f, 0x98, 0x6c, 0x63, 0xdc, 0x18, 0x3d, 0x88, 0x18, 0x83, 0x51, 0x0f, 0xd4, 0xfb, 0x66, 0x76,
	0x79, 0x36, 0x44, 0x16, 0x10, 0x66, 0x37, 0xee, 0xc9, 0xaf, 0xe0, 0xc7, 0xf1, 0x23, 0x78, 0xec,
	0xb1, 0x47, 0xb3, 0xfb, 0x45, 0x0c, 0x03, 0xb5, 0xd4, 0x81, 0xd8, 0xde, 0x66, 0xde, 0xbc, 0xff,
	0xfb, 0xcd, 0xfc, 0xff, 0x04, 0xa0, 0x6f, 0x97, 0x71, 0x84, 0xd3, 0xd7, 0x59, 0xfa, 0x39, 0x3e,
	0x75, 0xf3, 0x22, 0x13, 0x19, 0x05, 0x9f, 0x0b, 0xfe, 0x89, 0xcf, 0x12, 0x2c, 0x9d, 0x17, 0xb0,
	0x2f, 0x3b, 0x4e, 0x04, 0xe6, 0x4d, 0x17, 0xdd, 0x03, 0x2d, 0xf0, 0x19, 0xb1, 0xc9, 0x68, 0x37,
	0xd4, 0x02, 0x9f, 0x32, 0xb8, 0xfd, 0x1e, 0x57, 0x98, 0x04, 0x3e, 0xd3, 0x64, 0xf1, 0x62, 0xeb,
	0x9c, 0x13, 0xb8, 0x27, 0xe5, 0x1e, 0x17, 0x22, 0xc1, 0x57, 0x05, 0xf2, 0x1b, 0x0f, 0xa1, 0x07,
	0x60, 0x04, 0x69, 0x84, 0xdf, 0x98, 0x2e, 0xeb, 0xf5, 0x86, 0x3e, 0x86, 0xbd, 0x0f, 0x59, 0x5a,
	0x0a, 0x2c, 0xbc, 0x65, 0x12, 0x47, 0x81, 0xcf, 0x6e, 0xd9, 0xfa, 0x68, 0x37, 0xfc, 0xa7, 0x4a,
	0x6d, 0x18, 0x7a, 0x59, 0x59, 0x5e, 0x34, 0x19, 0xb2, 0xa9, 0x5d, 0xaa, 0xe6, 0x7f, 0xcc, 0xe7,
	0x41, 0xc4, 0x76, 0xe4, 0x59, 0xbd, 0xa1, 0x16, 0xc0, 0x49, 0x8e, 0xf3, 0x98, 0x27, 0xef, 0xb2,
	0x19, 0xbb, 0x23, 0xd1, 0xad, 0x8a, 0xf3, 0x14, 0xee, 0xca, 0x97, 0xc9, 0x5b, 0xf6, 0x3d, 0x6a,
	0x1f, 0xf4, 0x4a, 0xad, 0xc9, 0xc1, 0xd5, 0xd2, 0xf9, 0x69, 0x34, 0xba, 0x46, 0x32, 0xad, 0xbc,
	0xa6, 0x8b, 0xc6, 0xa6, 0x96, 0xcb, 0xd3, 0x58, 0xe0, 0xa2, 0x64, 0xc4, 0xd6, 0x47, 0xc3, 0xf1,
	0x33, 0xf7, 0x32, 0x12, 0x57, 0x91, 0xbb, 0x7f, 0xb5, 0x75, 0x31, 0xa8, 0x94, 0x6f, 0x52, 0x51,
	0xac, 0xc3, 0x83, 0xae, 0x23, 0xfa, 0x1d, 0x8e, 0xba, 0x53, 0x69, 0xa0, 0x9a, 0x84, 0xbe, 0xbc,
	0x06, 0xf4, 0x72, 0x82, 0x82, 0x36, 0xfb, 0x1b, 0x68, 0x0e, 0xf7, 0x15, 0xf3, 0x1a, 0xb6, 0x2e,
	0xd9, 0x93, 0x6b, 0xb0, 0xa5, 0x58, 0xc1, 0x1e, 0x76, 0x9e, 0x99, 0x08, 0x0f, 0x7a, 0x5d, 0xaa,
	0x62, 0xfa, 0x82, 0xeb, 0x26, 0xb7, 0x6a, 0x49, 0xc7, 0x60, 0xac, 0x78, 0xb2, 0x44, 0xf9, 0x2d,
	0x0e, 0xc7, 0x47, 0xca, 0x75, 0x5a, 0x49, 0x85, 0x75, 0xeb, 0x73, 0x6d, 0x42, 0xcc, 0xaf, 0xf0,
	0xe8, 0x3f, 0xbe, 0x74, 0xc0, 0x26, 0x57, 0x61, 0x8e, 0x02, 0x53, 0x72, 0x6a, 0x23, 0x4f, 0xc1,
	0xec, 0xb7, 0xa3, 0x83, 0x76, 0x7c, 0x95, 0xf6, 0x50, 0xa1, 0xb5, 0x43, 0x69, 0x81, 0xbc, 0x27,
	0xbf, 0x36, 0x16, 0x39, 0xdb, 0x58, 0xe4, 0xf7, 0xc6, 0x22, 0x3f, 0xb6, 0xd6, 0xe0, 0x6c, 0x6b,
	0x0d, 0xce, 0xb7, 0xd6, 0x00, 0x0e, 0xe7, 0xd9, 0xc2, 0xf5, 0x79, 0x5c, 0xae, 0xdd, 0x12, 0x8b,
	0x15, 0x16, 0x6e, 0xc4, 0x05, 0x9f, 0xed, 0xc8, 0xdf, 0xc9, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xcd, 0xd6, 0xe7, 0x59, 0x64, 0x04, 0x00, 0x00,
}

func (m *GuideStep_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideStep_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuideStep_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LevelID != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.LevelID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuideBattleArea_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideBattleArea_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuideBattleArea_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SpecialJob != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.SpecialJob))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NpcId) > 0 {
		dAtA2 := make([]byte, len(m.NpcId)*10)
		var j1 int
		for _, num := range m.NpcId {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGuide_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BossBulidID) > 0 {
		dAtA4 := make([]byte, len(m.BossBulidID)*10)
		var j3 int
		for _, num := range m.BossBulidID {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintGuide_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MonsterBulidID) > 0 {
		dAtA6 := make([]byte, len(m.MonsterBulidID)*10)
		var j5 int
		for _, num := range m.MonsterBulidID {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintGuide_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x22
	}
	if m.Index != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if m.LevelID != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.LevelID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuideLevel_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideLevel_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuideLevel_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Job) > 0 {
		dAtA8 := make([]byte, len(m.Job)*10)
		var j7 int
		for _, num := range m.Job {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintGuide_Config(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintGuide_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Guide_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Guide_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Guide_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GuideLevel_ConfigItems) > 0 {
		for k := range m.GuideLevel_ConfigItems {
			v := m.GuideLevel_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGuide_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGuide_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuide_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GuideBattleArea_ConfigItems) > 0 {
		for k := range m.GuideBattleArea_ConfigItems {
			v := m.GuideBattleArea_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGuide_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGuide_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuide_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.GuideStep_ConfigItems) > 0 {
		for k := range m.GuideStep_ConfigItems {
			v := m.GuideStep_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintGuide_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintGuide_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintGuide_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGuide_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovGuide_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GuideStep_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGuide_Config(uint64(m.ID))
	}
	if m.LevelID != 0 {
		n += 1 + sovGuide_Config(uint64(m.LevelID))
	}
	return n
}

func (m *GuideBattleArea_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGuide_Config(uint64(m.ID))
	}
	if m.LevelID != 0 {
		n += 1 + sovGuide_Config(uint64(m.LevelID))
	}
	if m.Index != 0 {
		n += 1 + sovGuide_Config(uint64(m.Index))
	}
	if len(m.MonsterBulidID) > 0 {
		l = 0
		for _, e := range m.MonsterBulidID {
			l += sovGuide_Config(uint64(e))
		}
		n += 1 + sovGuide_Config(uint64(l)) + l
	}
	if len(m.BossBulidID) > 0 {
		l = 0
		for _, e := range m.BossBulidID {
			l += sovGuide_Config(uint64(e))
		}
		n += 1 + sovGuide_Config(uint64(l)) + l
	}
	if len(m.NpcId) > 0 {
		l = 0
		for _, e := range m.NpcId {
			l += sovGuide_Config(uint64(e))
		}
		n += 1 + sovGuide_Config(uint64(l)) + l
	}
	if m.SpecialJob != 0 {
		n += 1 + sovGuide_Config(uint64(m.SpecialJob))
	}
	return n
}

func (m *GuideLevel_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGuide_Config(uint64(m.ID))
	}
	if len(m.Job) > 0 {
		l = 0
		for _, e := range m.Job {
			l += sovGuide_Config(uint64(e))
		}
		n += 1 + sovGuide_Config(uint64(l)) + l
	}
	return n
}

func (m *Guide_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GuideStep_ConfigItems) > 0 {
		for k, v := range m.GuideStep_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGuide_Config(uint64(l))
			}
			mapEntrySize := 1 + sovGuide_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovGuide_Config(uint64(mapEntrySize))
		}
	}
	if len(m.GuideBattleArea_ConfigItems) > 0 {
		for k, v := range m.GuideBattleArea_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGuide_Config(uint64(l))
			}
			mapEntrySize := 1 + sovGuide_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovGuide_Config(uint64(mapEntrySize))
		}
	}
	if len(m.GuideLevel_ConfigItems) > 0 {
		for k, v := range m.GuideLevel_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovGuide_Config(uint64(l))
			}
			mapEntrySize := 1 + sovGuide_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovGuide_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGuide_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGuide_Config(x uint64) (n int) {
	return sovGuide_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GuideStep_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuide_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuideStep_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuideStep_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuide_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuideBattleArea_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuide_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuideBattleArea_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuideBattleArea_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelID", wireType)
			}
			m.LevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LevelID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterBulidID = append(m.MonsterBulidID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuide_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGuide_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterBulidID) == 0 {
					m.MonsterBulidID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterBulidID = append(m.MonsterBulidID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterBulidID", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossBulidID = append(m.BossBulidID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuide_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGuide_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossBulidID) == 0 {
					m.BossBulidID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossBulidID = append(m.BossBulidID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossBulidID", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NpcId = append(m.NpcId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuide_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGuide_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NpcId) == 0 {
					m.NpcId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NpcId = append(m.NpcId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialJob", wireType)
			}
			m.SpecialJob = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialJob |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuide_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuideLevel_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuide_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuideLevel_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuideLevel_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Job = append(m.Job, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGuide_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGuide_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Job) == 0 {
					m.Job = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Job = append(m.Job, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Job", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGuide_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Guide_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGuide_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Guide_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Guide_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideStep_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuide_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuideStep_ConfigItems == nil {
				m.GuideStep_ConfigItems = make(map[uint32]*GuideStep_Config)
			}
			var mapkey uint32
			var mapvalue *GuideStep_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGuide_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuideStep_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuide_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuideStep_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideBattleArea_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuide_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuideBattleArea_ConfigItems == nil {
				m.GuideBattleArea_ConfigItems = make(map[uint32]*GuideBattleArea_Config)
			}
			var mapkey uint32
			var mapvalue *GuideBattleArea_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGuide_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuideBattleArea_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuide_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuideBattleArea_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GuideLevel_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGuide_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GuideLevel_ConfigItems == nil {
				m.GuideLevel_ConfigItems = make(map[uint32]*GuideLevel_Config)
			}
			var mapkey uint32
			var mapvalue *GuideLevel_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGuide_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGuide_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGuide_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &GuideLevel_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGuide_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGuide_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.GuideLevel_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGuide_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGuide_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGuide_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGuide_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGuide_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGuide_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGuide_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGuide_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGuide_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGuide_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGuide_Config = fmt.Errorf("proto: unexpected end of group")
)
