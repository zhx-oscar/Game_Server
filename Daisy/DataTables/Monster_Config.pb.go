// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Monster_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Model_Config struct {
	//* 外形ID，给logic分页索引用
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 外形使用的角色模型prefab.路径索引
	Model string `protobuf:"bytes,2,opt,name=Model,proto3" json:"Model,omitempty"`
	//* 碰撞半径
	CollisionRadius float32 `protobuf:"fixed32,3,opt,name=CollisionRadius,proto3" json:"CollisionRadius,omitempty"`
	//* 受击表现配置
	AnimatorController string `protobuf:"bytes,4,opt,name=AnimatorController,proto3" json:"AnimatorController,omitempty"`
	//* 走路速度
	WalkSpeed float32 `protobuf:"fixed32,5,opt,name=WalkSpeed,proto3" json:"WalkSpeed,omitempty"`
	//* 跑步速度
	RunSpeed float32 `protobuf:"fixed32,6,opt,name=RunSpeed,proto3" json:"RunSpeed,omitempty"`
	//* 冲刺速度
	FastSpeed float32 `protobuf:"fixed32,7,opt,name=FastSpeed,proto3" json:"FastSpeed,omitempty"`
	//* 迂回速度
	LookAtSpeed float32 `protobuf:"fixed32,8,opt,name=LookAtSpeed,proto3" json:"LookAtSpeed,omitempty"`
	//* 迂回后退速度
	LookAtBackSpeed float32 `protobuf:"fixed32,9,opt,name=LookAtBackSpeed,proto3" json:"LookAtBackSpeed,omitempty"`
	//* 最大速度
	MaxSpeed float32 `protobuf:"fixed32,10,opt,name=MaxSpeed,proto3" json:"MaxSpeed,omitempty"`
	//* 最大速度
	TurnSpeed float32 `protobuf:"fixed32,11,opt,name=TurnSpeed,proto3" json:"TurnSpeed,omitempty"`
	//* 闪避距离
	DodgeDist float32 `protobuf:"fixed32,12,opt,name=DodgeDist,proto3" json:"DodgeDist,omitempty"`
	//* 闪避时间
	DodgeTime uint32 `protobuf:"varint,13,opt,name=DodgeTime,proto3" json:"DodgeTime,omitempty"`
}

func (m *Model_Config) Reset()         { *m = Model_Config{} }
func (m *Model_Config) String() string { return proto.CompactTextString(m) }
func (*Model_Config) ProtoMessage()    {}
func (*Model_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_37817c22e9fe25e5, []int{0}
}
func (m *Model_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Model_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Model_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Model_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Model_Config.Merge(m, src)
}
func (m *Model_Config) XXX_Size() int {
	return m.Size()
}
func (m *Model_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Model_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Model_Config proto.InternalMessageInfo

func (m *Model_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Model_Config) GetModel() string {
	if m != nil {
		return m.Model
	}
	return ""
}

func (m *Model_Config) GetCollisionRadius() float32 {
	if m != nil {
		return m.CollisionRadius
	}
	return 0
}

func (m *Model_Config) GetAnimatorController() string {
	if m != nil {
		return m.AnimatorController
	}
	return ""
}

func (m *Model_Config) GetWalkSpeed() float32 {
	if m != nil {
		return m.WalkSpeed
	}
	return 0
}

func (m *Model_Config) GetRunSpeed() float32 {
	if m != nil {
		return m.RunSpeed
	}
	return 0
}

func (m *Model_Config) GetFastSpeed() float32 {
	if m != nil {
		return m.FastSpeed
	}
	return 0
}

func (m *Model_Config) GetLookAtSpeed() float32 {
	if m != nil {
		return m.LookAtSpeed
	}
	return 0
}

func (m *Model_Config) GetLookAtBackSpeed() float32 {
	if m != nil {
		return m.LookAtBackSpeed
	}
	return 0
}

func (m *Model_Config) GetMaxSpeed() float32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *Model_Config) GetTurnSpeed() float32 {
	if m != nil {
		return m.TurnSpeed
	}
	return 0
}

func (m *Model_Config) GetDodgeDist() float32 {
	if m != nil {
		return m.DodgeDist
	}
	return 0
}

func (m *Model_Config) GetDodgeTime() uint32 {
	if m != nil {
		return m.DodgeTime
	}
	return 0
}

type Logic_Config struct {
	//* 怪物ID
	NpcID uint32 `protobuf:"varint,1,opt,name=NpcID,proto3" json:"NpcID,omitempty"`
	//* 对应model分页里的model ID
	ModelID uint32 `protobuf:"varint,2,opt,name=ModelID,proto3" json:"ModelID,omitempty"`
	//* 外形的缩放
	ModelScale float32 `protobuf:"fixed32,3,opt,name=ModelScale,proto3" json:"ModelScale,omitempty"`
	//* 怪物的名字
	Name string `protobuf:"bytes,4,opt,name=Name,proto3" json:"Name,omitempty"`
	//* 怪物类别
	Difficulty uint32 `protobuf:"varint,5,opt,name=Difficulty,proto3" json:"Difficulty,omitempty"`
	//* npc关联的AIID
	AIID uint32 `protobuf:"varint,6,opt,name=AIID,proto3" json:"AIID,omitempty"`
	//* 黑板需要覆盖的变量和值
	BlackBoardKeys string `protobuf:"bytes,7,opt,name=BlackBoardKeys,proto3" json:"BlackBoardKeys,omitempty"`
	//* 质量
	Mass uint32 `protobuf:"varint,8,opt,name=Mass,proto3" json:"Mass,omitempty"`
	//* 普攻池
	NormalAttack []uint32 `protobuf:"varint,9,rep,packed,name=NormalAttack,proto3" json:"NormalAttack,omitempty"`
	//* 超能池
	SuperSkill []uint32 `protobuf:"varint,10,rep,packed,name=SuperSkill,proto3" json:"SuperSkill,omitempty"`
	//* 超载普攻池
	OverDriveNormalAttack []uint32 `protobuf:"varint,11,rep,packed,name=OverDriveNormalAttack,proto3" json:"OverDriveNormalAttack,omitempty"`
	//* 超载超能池
	OverDriveSuperSkill []uint32 `protobuf:"varint,12,rep,packed,name=OverDriveSuperSkill,proto3" json:"OverDriveSuperSkill,omitempty"`
	//* 显示等级
	ShowLevel uint32 `protobuf:"varint,13,opt,name=ShowLevel,proto3" json:"ShowLevel,omitempty"`
	//* 怪物等级
	Level uint32 `protobuf:"varint,14,opt,name=Level,proto3" json:"Level,omitempty"`
	//* 属性ID
	PropValueID uint32 `protobuf:"varint,15,opt,name=PropValueID,proto3" json:"PropValueID,omitempty"`
	//* 出生表演Timeline
	BornTimeline string `protobuf:"bytes,16,opt,name=BornTimeline,proto3" json:"BornTimeline,omitempty"`
	//* 出生表演暂停所有AI
	BornPauseAllAI bool `protobuf:"varint,17,opt,name=BornPauseAllAI,proto3" json:"BornPauseAllAI,omitempty"`
	//* 死亡表演Timeline
	DeadTimeline string `protobuf:"bytes,19,opt,name=DeadTimeline,proto3" json:"DeadTimeline,omitempty"`
	//* 公共冷却时间ms
	PublicCD uint32 `protobuf:"varint,20,opt,name=PublicCD,proto3" json:"PublicCD,omitempty"`
	//* 超载Timeline
	OverDriveTimline string `protobuf:"bytes,21,opt,name=OverDriveTimline,proto3" json:"OverDriveTimline,omitempty"`
	//* 虚弱开始Timeline
	WeakBeginTimline string `protobuf:"bytes,22,opt,name=WeakBeginTimline,proto3" json:"WeakBeginTimline,omitempty"`
	//* 虚弱循环Timeline
	WeakLoopTimline string `protobuf:"bytes,23,opt,name=WeakLoopTimline,proto3" json:"WeakLoopTimline,omitempty"`
	//* 虚弱结束Timeline
	WeakEndTimline string `protobuf:"bytes,24,opt,name=WeakEndTimline,proto3" json:"WeakEndTimline,omitempty"`
	//* 出生buff列表
	BornBuffs []uint32 `protobuf:"varint,25,rep,packed,name=BornBuffs,proto3" json:"BornBuffs,omitempty"`
}

func (m *Logic_Config) Reset()         { *m = Logic_Config{} }
func (m *Logic_Config) String() string { return proto.CompactTextString(m) }
func (*Logic_Config) ProtoMessage()    {}
func (*Logic_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_37817c22e9fe25e5, []int{1}
}
func (m *Logic_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Logic_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Logic_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Logic_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Logic_Config.Merge(m, src)
}
func (m *Logic_Config) XXX_Size() int {
	return m.Size()
}
func (m *Logic_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Logic_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Logic_Config proto.InternalMessageInfo

func (m *Logic_Config) GetNpcID() uint32 {
	if m != nil {
		return m.NpcID
	}
	return 0
}

func (m *Logic_Config) GetModelID() uint32 {
	if m != nil {
		return m.ModelID
	}
	return 0
}

func (m *Logic_Config) GetModelScale() float32 {
	if m != nil {
		return m.ModelScale
	}
	return 0
}

func (m *Logic_Config) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Logic_Config) GetDifficulty() uint32 {
	if m != nil {
		return m.Difficulty
	}
	return 0
}

func (m *Logic_Config) GetAIID() uint32 {
	if m != nil {
		return m.AIID
	}
	return 0
}

func (m *Logic_Config) GetBlackBoardKeys() string {
	if m != nil {
		return m.BlackBoardKeys
	}
	return ""
}

func (m *Logic_Config) GetMass() uint32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *Logic_Config) GetNormalAttack() []uint32 {
	if m != nil {
		return m.NormalAttack
	}
	return nil
}

func (m *Logic_Config) GetSuperSkill() []uint32 {
	if m != nil {
		return m.SuperSkill
	}
	return nil
}

func (m *Logic_Config) GetOverDriveNormalAttack() []uint32 {
	if m != nil {
		return m.OverDriveNormalAttack
	}
	return nil
}

func (m *Logic_Config) GetOverDriveSuperSkill() []uint32 {
	if m != nil {
		return m.OverDriveSuperSkill
	}
	return nil
}

func (m *Logic_Config) GetShowLevel() uint32 {
	if m != nil {
		return m.ShowLevel
	}
	return 0
}

func (m *Logic_Config) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Logic_Config) GetPropValueID() uint32 {
	if m != nil {
		return m.PropValueID
	}
	return 0
}

func (m *Logic_Config) GetBornTimeline() string {
	if m != nil {
		return m.BornTimeline
	}
	return ""
}

func (m *Logic_Config) GetBornPauseAllAI() bool {
	if m != nil {
		return m.BornPauseAllAI
	}
	return false
}

func (m *Logic_Config) GetDeadTimeline() string {
	if m != nil {
		return m.DeadTimeline
	}
	return ""
}

func (m *Logic_Config) GetPublicCD() uint32 {
	if m != nil {
		return m.PublicCD
	}
	return 0
}

func (m *Logic_Config) GetOverDriveTimline() string {
	if m != nil {
		return m.OverDriveTimline
	}
	return ""
}

func (m *Logic_Config) GetWeakBeginTimline() string {
	if m != nil {
		return m.WeakBeginTimline
	}
	return ""
}

func (m *Logic_Config) GetWeakLoopTimline() string {
	if m != nil {
		return m.WeakLoopTimline
	}
	return ""
}

func (m *Logic_Config) GetWeakEndTimline() string {
	if m != nil {
		return m.WeakEndTimline
	}
	return ""
}

func (m *Logic_Config) GetBornBuffs() []uint32 {
	if m != nil {
		return m.BornBuffs
	}
	return nil
}

type BuildLogic_Config struct {
	//* BD的ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 元素标签
	ElementType uint32 `protobuf:"varint,2,opt,name=ElementType,proto3" json:"ElementType,omitempty"`
	//* 火焰抗性增幅（万分比）
	ResistanceGrow_Fire uint32 `protobuf:"varint,3,opt,name=ResistanceGrow_Fire,json=ResistanceGrowFire,proto3" json:"ResistanceGrow_Fire,omitempty"`
	//* 火焰崩溃增幅（万分比）
	CrackUpGrow_Fire uint32 `protobuf:"varint,4,opt,name=CrackUpGrow_Fire,json=CrackUpGrowFire,proto3" json:"CrackUpGrow_Fire,omitempty"`
	//* 冰霜抗性增幅（万分比）
	ResistanceGrow_Cold uint32 `protobuf:"varint,5,opt,name=ResistanceGrow_Cold,json=ResistanceGrowCold,proto3" json:"ResistanceGrow_Cold,omitempty"`
	//* 冰霜崩溃增幅（万分比）
	CrackUpGrow_Cold uint32 `protobuf:"varint,6,opt,name=CrackUpGrow_Cold,json=CrackUpGrowCold,proto3" json:"CrackUpGrow_Cold,omitempty"`
	//* 毒素抗性增幅（万分比）
	ResistanceGrow_Poison uint32 `protobuf:"varint,7,opt,name=ResistanceGrow_Poison,json=ResistanceGrowPoison,proto3" json:"ResistanceGrow_Poison,omitempty"`
	//* 毒素崩溃增幅（万分比）
	CrackUpGrow_Poison uint32 `protobuf:"varint,8,opt,name=CrackUpGrow_Poison,json=CrackUpGrowPoison,proto3" json:"CrackUpGrow_Poison,omitempty"`
	//* 闪电抗性增幅（万分比）
	ResistanceGrow_Lightning uint32 `protobuf:"varint,9,opt,name=ResistanceGrow_Lightning,json=ResistanceGrowLightning,proto3" json:"ResistanceGrow_Lightning,omitempty"`
	//* 闪电崩溃增幅（万分比）
	CrackUpGrow_Lightning uint32 `protobuf:"varint,10,opt,name=CrackUpGrow_Lightning,json=CrackUpGrowLightning,proto3" json:"CrackUpGrow_Lightning,omitempty"`
}

func (m *BuildLogic_Config) Reset()         { *m = BuildLogic_Config{} }
func (m *BuildLogic_Config) String() string { return proto.CompactTextString(m) }
func (*BuildLogic_Config) ProtoMessage()    {}
func (*BuildLogic_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_37817c22e9fe25e5, []int{2}
}
func (m *BuildLogic_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BuildLogic_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BuildLogic_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BuildLogic_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BuildLogic_Config.Merge(m, src)
}
func (m *BuildLogic_Config) XXX_Size() int {
	return m.Size()
}
func (m *BuildLogic_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_BuildLogic_Config.DiscardUnknown(m)
}

var xxx_messageInfo_BuildLogic_Config proto.InternalMessageInfo

func (m *BuildLogic_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BuildLogic_Config) GetElementType() uint32 {
	if m != nil {
		return m.ElementType
	}
	return 0
}

func (m *BuildLogic_Config) GetResistanceGrow_Fire() uint32 {
	if m != nil {
		return m.ResistanceGrow_Fire
	}
	return 0
}

func (m *BuildLogic_Config) GetCrackUpGrow_Fire() uint32 {
	if m != nil {
		return m.CrackUpGrow_Fire
	}
	return 0
}

func (m *BuildLogic_Config) GetResistanceGrow_Cold() uint32 {
	if m != nil {
		return m.ResistanceGrow_Cold
	}
	return 0
}

func (m *BuildLogic_Config) GetCrackUpGrow_Cold() uint32 {
	if m != nil {
		return m.CrackUpGrow_Cold
	}
	return 0
}

func (m *BuildLogic_Config) GetResistanceGrow_Poison() uint32 {
	if m != nil {
		return m.ResistanceGrow_Poison
	}
	return 0
}

func (m *BuildLogic_Config) GetCrackUpGrow_Poison() uint32 {
	if m != nil {
		return m.CrackUpGrow_Poison
	}
	return 0
}

func (m *BuildLogic_Config) GetResistanceGrow_Lightning() uint32 {
	if m != nil {
		return m.ResistanceGrow_Lightning
	}
	return 0
}

func (m *BuildLogic_Config) GetCrackUpGrow_Lightning() uint32 {
	if m != nil {
		return m.CrackUpGrow_Lightning
	}
	return 0
}

type Monster_Config_Data struct {
	Model_ConfigItems      map[uint32]*Model_Config      `protobuf:"bytes,1,rep,name=Model_Config_items,json=ModelConfigItems,proto3" json:"Model_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Logic_ConfigItems      map[uint32]*Logic_Config      `protobuf:"bytes,2,rep,name=Logic_Config_items,json=LogicConfigItems,proto3" json:"Logic_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BuildLogic_ConfigItems map[uint32]*BuildLogic_Config `protobuf:"bytes,3,rep,name=BuildLogic_Config_items,json=BuildLogicConfigItems,proto3" json:"BuildLogic_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Monster_Config_Data) Reset()         { *m = Monster_Config_Data{} }
func (m *Monster_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Monster_Config_Data) ProtoMessage()    {}
func (*Monster_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_37817c22e9fe25e5, []int{3}
}
func (m *Monster_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Monster_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Monster_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Monster_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Monster_Config_Data.Merge(m, src)
}
func (m *Monster_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Monster_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Monster_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Monster_Config_Data proto.InternalMessageInfo

func (m *Monster_Config_Data) GetModel_ConfigItems() map[uint32]*Model_Config {
	if m != nil {
		return m.Model_ConfigItems
	}
	return nil
}

func (m *Monster_Config_Data) GetLogic_ConfigItems() map[uint32]*Logic_Config {
	if m != nil {
		return m.Logic_ConfigItems
	}
	return nil
}

func (m *Monster_Config_Data) GetBuildLogic_ConfigItems() map[uint32]*BuildLogic_Config {
	if m != nil {
		return m.BuildLogic_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*Model_Config)(nil), "DataTables.Model_Config")
	proto.RegisterType((*Logic_Config)(nil), "DataTables.Logic_Config")
	proto.RegisterType((*BuildLogic_Config)(nil), "DataTables.BuildLogic_Config")
	proto.RegisterType((*Monster_Config_Data)(nil), "DataTables.Monster_Config_Data")
	proto.RegisterMapType((map[uint32]*BuildLogic_Config)(nil), "DataTables.Monster_Config_Data.BuildLogicConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Logic_Config)(nil), "DataTables.Monster_Config_Data.LogicConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Model_Config)(nil), "DataTables.Monster_Config_Data.ModelConfigItemsEntry")
}

func init() { proto.RegisterFile("Monster_Config.proto", fileDescriptor_37817c22e9fe25e5) }

var fileDescriptor_37817c22e9fe25e5 = []byte{
	// 984 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x56, 0xdd, 0x6e, 0xe3, 0x44,
	0x14, 0xae, 0x93, 0xb6, 0xdb, 0x9e, 0xd4, 0xfd, 0x99, 0x26, 0xd4, 0x54, 0x10, 0x45, 0xb9, 0x40,
	0x01, 0x89, 0x2c, 0xda, 0x82, 0x04, 0x7b, 0x97, 0xc4, 0x5d, 0x14, 0x91, 0x96, 0xca, 0x09, 0xec,
	0x15, 0xaa, 0xa6, 0xf6, 0x24, 0x3b, 0xca, 0xc4, 0x13, 0x8d, 0xed, 0x2c, 0x79, 0x0b, 0x1e, 0x83,
	0x47, 0xe0, 0x11, 0xb8, 0x5c, 0xee, 0xb8, 0x44, 0xed, 0x5b, 0x70, 0x85, 0x66, 0xc6, 0x71, 0xc6,
	0x4e, 0x10, 0xec, 0xdd, 0xcc, 0xf7, 0x9d, 0xf3, 0x9d, 0x33, 0xf3, 0xf9, 0x64, 0x02, 0xd5, 0x1b,
	0x1e, 0x46, 0x31, 0x11, 0xf7, 0x3d, 0x1e, 0x8e, 0xe9, 0xa4, 0x3d, 0x17, 0x3c, 0xe6, 0x08, 0x5c,
	0x1c, 0xe3, 0x11, 0x7e, 0x60, 0x24, 0x6a, 0xfe, 0x5a, 0x86, 0xa3, 0x1b, 0x1e, 0x10, 0x96, 0x86,
	0xa0, 0x63, 0x28, 0xf5, 0x5d, 0xc7, 0x6a, 0x58, 0x2d, 0xdb, 0x2b, 0xf5, 0x5d, 0x54, 0x85, 0x3d,
	0xc5, 0x3b, 0xa5, 0x86, 0xd5, 0x3a, 0xf4, 0xf4, 0x06, 0xb5, 0xe0, 0xa4, 0xc7, 0x19, 0xa3, 0x11,
	0xe5, 0xa1, 0x87, 0x03, 0x9a, 0x44, 0x4e, 0xb9, 0x61, 0xb5, 0x4a, 0x5e, 0x11, 0x46, 0x6d, 0x40,
	0x9d, 0x90, 0xce, 0x70, 0xcc, 0x45, 0x8f, 0x87, 0xb1, 0xe0, 0x8c, 0x11, 0xe1, 0xec, 0x2a, 0xb1,
	0x2d, 0x0c, 0xfa, 0x08, 0x0e, 0x5f, 0x63, 0x36, 0x1d, 0xce, 0x09, 0x09, 0x9c, 0x3d, 0xa5, 0xb9,
	0x06, 0xd0, 0x25, 0x1c, 0x78, 0x49, 0xa8, 0xc9, 0x7d, 0x45, 0x66, 0x7b, 0x99, 0xf9, 0x0a, 0x47,
	0xb1, 0x26, 0x9f, 0xe9, 0xcc, 0x0c, 0x40, 0x0d, 0xa8, 0x0c, 0x38, 0x9f, 0x76, 0x52, 0xfe, 0x40,
	0xf1, 0x26, 0x24, 0xcf, 0xa4, 0xb7, 0x5d, 0xec, 0xa7, 0xf5, 0x0f, 0xf5, 0x99, 0x0a, 0xb0, 0xec,
	0xe2, 0x06, 0xff, 0xac, 0x43, 0x40, 0x77, 0xb1, 0xda, 0xcb, 0x2e, 0x46, 0x89, 0x48, 0x5b, 0xac,
	0xe8, 0x2e, 0x32, 0x40, 0xb2, 0x2e, 0x0f, 0x26, 0xc4, 0xa5, 0x51, 0xec, 0x1c, 0x69, 0x36, 0x03,
	0x32, 0x76, 0x44, 0x67, 0xc4, 0xb1, 0x95, 0x05, 0x6b, 0xa0, 0xf9, 0xdb, 0x3e, 0x1c, 0x0d, 0xf8,
	0x84, 0xfa, 0x2b, 0xab, 0xaa, 0xb0, 0x77, 0x3b, 0xf7, 0x33, 0xb7, 0xf4, 0x06, 0x39, 0xf0, 0x4c,
	0x79, 0xd4, 0x77, 0x95, 0x65, 0xb6, 0xb7, 0xda, 0xa2, 0x3a, 0x80, 0x5a, 0x0e, 0x7d, 0xcc, 0x48,
	0xea, 0x97, 0x81, 0x20, 0x04, 0xbb, 0xb7, 0x78, 0x46, 0x52, 0x73, 0xd4, 0x5a, 0xe6, 0xb8, 0x74,
	0x3c, 0xa6, 0x7e, 0xc2, 0xe2, 0xa5, 0xf2, 0xc3, 0xf6, 0x0c, 0x44, 0xe6, 0x74, 0xfa, 0x7d, 0x57,
	0x99, 0x61, 0x7b, 0x6a, 0x8d, 0x3e, 0x81, 0xe3, 0x2e, 0xc3, 0xfe, 0xb4, 0xcb, 0xb1, 0x08, 0xbe,
	0x23, 0xcb, 0x48, 0xb9, 0x71, 0xe8, 0x15, 0x50, 0x99, 0x7b, 0x83, 0xa3, 0x48, 0x79, 0x61, 0x7b,
	0x6a, 0x8d, 0x9a, 0x70, 0x74, 0xcb, 0xc5, 0x0c, 0xb3, 0x4e, 0x1c, 0x63, 0x7f, 0xea, 0x1c, 0x36,
	0xca, 0x2d, 0xdb, 0xcb, 0x61, 0xb2, 0xa7, 0x61, 0x32, 0x27, 0x62, 0x38, 0xa5, 0x8c, 0x39, 0xa0,
	0x22, 0x0c, 0x04, 0x7d, 0x09, 0xb5, 0xef, 0x17, 0x44, 0xb8, 0x82, 0x2e, 0x48, 0x4e, 0xac, 0xa2,
	0x42, 0xb7, 0x93, 0xe8, 0x0b, 0x38, 0xcf, 0x08, 0x43, 0xfe, 0x48, 0xe5, 0x6c, 0xa3, 0xa4, 0x5d,
	0xc3, 0x37, 0xfc, 0xed, 0x80, 0x2c, 0x08, 0x5b, 0xd9, 0x95, 0x01, 0xd2, 0x1d, 0xcd, 0x1c, 0x6b,
	0x77, 0x34, 0xda, 0x80, 0xca, 0x9d, 0xe0, 0xf3, 0x1f, 0x31, 0x4b, 0x48, 0xdf, 0x75, 0x4e, 0x14,
	0x67, 0x42, 0xf2, 0x06, 0xba, 0x5c, 0x84, 0xd2, 0x72, 0x46, 0x43, 0xe2, 0x9c, 0xaa, 0xbb, 0xcb,
	0x61, 0xea, 0x86, 0xb9, 0x08, 0xef, 0x70, 0x12, 0x91, 0x0e, 0x63, 0x9d, 0xbe, 0x73, 0xd6, 0xb0,
	0x5a, 0x07, 0x5e, 0x01, 0x95, 0x5a, 0x2e, 0xc1, 0x41, 0xa6, 0x75, 0xae, 0xb5, 0x4c, 0x4c, 0x7e,
	0xcc, 0x77, 0xc9, 0x03, 0xa3, 0x7e, 0xcf, 0x75, 0xaa, 0xaa, 0x9d, 0x6c, 0x8f, 0x3e, 0x83, 0xd3,
	0xec, 0xe0, 0x23, 0x3a, 0x53, 0x1a, 0x35, 0xa5, 0xb1, 0x81, 0xcb, 0xd8, 0xd7, 0x04, 0x4f, 0xbb,
	0x64, 0x42, 0xc3, 0x55, 0xec, 0x07, 0x3a, 0xb6, 0x88, 0xcb, 0x51, 0x93, 0xd8, 0x80, 0xf3, 0xf9,
	0x2a, 0xf4, 0x42, 0x85, 0x16, 0x61, 0x79, 0x52, 0x09, 0x5d, 0x87, 0xc1, 0x2a, 0xd0, 0xd1, 0xdf,
	0x52, 0x1e, 0x95, 0x5e, 0xc8, 0xb3, 0x77, 0x93, 0xf1, 0x38, 0x72, 0x3e, 0x54, 0x9e, 0xad, 0x81,
	0xe6, 0x1f, 0x65, 0x38, 0xeb, 0x26, 0x94, 0x05, 0xb9, 0xf9, 0x29, 0xfe, 0xd4, 0x35, 0xa0, 0x72,
	0xcd, 0xc8, 0x8c, 0x84, 0xf1, 0x68, 0x39, 0x27, 0xe9, 0xf4, 0x98, 0x10, 0x7a, 0x0e, 0xe7, 0x1e,
	0x89, 0x68, 0x14, 0xe3, 0xd0, 0x27, 0xdf, 0x0a, 0xfe, 0xf6, 0xfe, 0x15, 0x15, 0x7a, 0x94, 0x6c,
	0x0f, 0xe5, 0x29, 0xc9, 0xa0, 0x4f, 0xe1, 0xb4, 0x27, 0xb0, 0x3f, 0xfd, 0x61, 0xbe, 0x8e, 0xde,
	0x55, 0xd1, 0x27, 0x06, 0xae, 0x42, 0x37, 0xb5, 0x7b, 0x9c, 0x05, 0xe9, 0xc8, 0x15, 0xb4, 0x25,
	0x53, 0xd4, 0x56, 0xd1, 0xfb, 0x1b, 0xda, 0x2a, 0xf4, 0x0a, 0x6a, 0x05, 0xed, 0x3b, 0x4e, 0x23,
	0x1e, 0xaa, 0xc1, 0xb4, 0xbd, 0x6a, 0x9e, 0xd4, 0x1c, 0xfa, 0x1c, 0x90, 0xa9, 0x9f, 0x66, 0xe8,
	0x61, 0x3d, 0x33, 0x98, 0x34, 0xfc, 0x1b, 0x70, 0x0a, 0x35, 0x06, 0x74, 0xf2, 0x26, 0x0e, 0x69,
	0x38, 0x51, 0xbf, 0xa3, 0xb6, 0x77, 0x91, 0xe7, 0x33, 0x5a, 0xb6, 0x67, 0x56, 0x5a, 0xe7, 0x81,
	0x6e, 0xcf, 0x20, 0x33, 0xae, 0xf9, 0xf7, 0x2e, 0x9c, 0xe7, 0x9f, 0xb7, 0x7b, 0xf9, 0xae, 0x21,
	0x1f, 0x90, 0xf9, 0xa0, 0xdd, 0xd3, 0x98, 0xcc, 0x22, 0xc7, 0x6a, 0x94, 0x5b, 0x95, 0x17, 0x5f,
	0xb5, 0xd7, 0x4f, 0x5f, 0x7b, 0x4b, 0x72, 0x5b, 0x65, 0x6a, 0xa0, 0x2f, 0xf3, 0xae, 0xc3, 0x58,
	0x2c, 0xbd, 0xd3, 0x22, 0x2c, 0x8b, 0x98, 0x9f, 0x52, 0x5a, 0xa4, 0xf4, 0xff, 0x8a, 0xa8, 0xcc,
	0xcd, 0x22, 0x45, 0x18, 0x09, 0xb8, 0xd8, 0xf8, 0x68, 0xd3, 0x4a, 0x65, 0x55, 0xe9, 0xe5, 0x7f,
	0x55, 0x5a, 0xa7, 0x6f, 0x94, 0xab, 0x6d, 0xe5, 0x2e, 0x7f, 0x82, 0xda, 0xd6, 0x3b, 0x40, 0xa7,
	0x50, 0x9e, 0x92, 0x65, 0x3a, 0x2d, 0x72, 0x89, 0xda, 0xb0, 0xb7, 0x90, 0xbf, 0x59, 0x6a, 0x50,
	0x2a, 0x2f, 0x9c, 0x7c, 0x33, 0x6b, 0x07, 0x3c, 0x1d, 0xf6, 0xb2, 0xf4, 0xb5, 0x25, 0xe5, 0xb7,
	0xb6, 0xf3, 0x9e, 0xf2, 0xe6, 0x8d, 0x98, 0xf2, 0x13, 0xb8, 0xfc, 0xf7, 0x23, 0x6f, 0xa9, 0x71,
	0x95, 0xaf, 0xf1, 0xb1, 0x59, 0x63, 0xe3, 0xea, 0x8d, 0x42, 0xdd, 0xe7, 0xbf, 0x3f, 0xd6, 0xad,
	0x77, 0x8f, 0x75, 0xeb, 0xaf, 0xc7, 0xba, 0xf5, 0xcb, 0x53, 0x7d, 0xe7, 0xdd, 0x53, 0x7d, 0xe7,
	0xcf, 0xa7, 0xfa, 0x0e, 0xd4, 0x7c, 0x3e, 0x6b, 0xbb, 0x98, 0x46, 0xcb, 0x76, 0x44, 0xc4, 0x82,
	0x88, 0x76, 0x80, 0x63, 0xfc, 0xb0, 0xaf, 0xfe, 0x7a, 0x5d, 0xfd, 0x13, 0x00, 0x00, 0xff, 0xff,
	0x3b, 0x50, 0x1b, 0xa6, 0x92, 0x09, 0x00, 0x00,
}

func (m *Model_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Model_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Model_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DodgeTime != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.DodgeTime))
		i--
		dAtA[i] = 0x68
	}
	if m.DodgeDist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DodgeDist))))
		i--
		dAtA[i] = 0x65
	}
	if m.TurnSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TurnSpeed))))
		i--
		dAtA[i] = 0x5d
	}
	if m.MaxSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxSpeed))))
		i--
		dAtA[i] = 0x55
	}
	if m.LookAtBackSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LookAtBackSpeed))))
		i--
		dAtA[i] = 0x4d
	}
	if m.LookAtSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LookAtSpeed))))
		i--
		dAtA[i] = 0x45
	}
	if m.FastSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FastSpeed))))
		i--
		dAtA[i] = 0x3d
	}
	if m.RunSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RunSpeed))))
		i--
		dAtA[i] = 0x35
	}
	if m.WalkSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WalkSpeed))))
		i--
		dAtA[i] = 0x2d
	}
	if len(m.AnimatorController) > 0 {
		i -= len(m.AnimatorController)
		copy(dAtA[i:], m.AnimatorController)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.AnimatorController)))
		i--
		dAtA[i] = 0x22
	}
	if m.CollisionRadius != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CollisionRadius))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Model) > 0 {
		i -= len(m.Model)
		copy(dAtA[i:], m.Model)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.Model)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Logic_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Logic_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Logic_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BornBuffs) > 0 {
		dAtA2 := make([]byte, len(m.BornBuffs)*10)
		var j1 int
		for _, num := range m.BornBuffs {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintMonster_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xca
	}
	if len(m.WeakEndTimline) > 0 {
		i -= len(m.WeakEndTimline)
		copy(dAtA[i:], m.WeakEndTimline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.WeakEndTimline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc2
	}
	if len(m.WeakLoopTimline) > 0 {
		i -= len(m.WeakLoopTimline)
		copy(dAtA[i:], m.WeakLoopTimline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.WeakLoopTimline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xba
	}
	if len(m.WeakBeginTimline) > 0 {
		i -= len(m.WeakBeginTimline)
		copy(dAtA[i:], m.WeakBeginTimline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.WeakBeginTimline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if len(m.OverDriveTimline) > 0 {
		i -= len(m.OverDriveTimline)
		copy(dAtA[i:], m.OverDriveTimline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.OverDriveTimline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xaa
	}
	if m.PublicCD != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.PublicCD))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.DeadTimeline) > 0 {
		i -= len(m.DeadTimeline)
		copy(dAtA[i:], m.DeadTimeline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.DeadTimeline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9a
	}
	if m.BornPauseAllAI {
		i--
		if m.BornPauseAllAI {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if len(m.BornTimeline) > 0 {
		i -= len(m.BornTimeline)
		copy(dAtA[i:], m.BornTimeline)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.BornTimeline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.PropValueID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.PropValueID))
		i--
		dAtA[i] = 0x78
	}
	if m.Level != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x70
	}
	if m.ShowLevel != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ShowLevel))
		i--
		dAtA[i] = 0x68
	}
	if len(m.OverDriveSuperSkill) > 0 {
		dAtA4 := make([]byte, len(m.OverDriveSuperSkill)*10)
		var j3 int
		for _, num := range m.OverDriveSuperSkill {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintMonster_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x62
	}
	if len(m.OverDriveNormalAttack) > 0 {
		dAtA6 := make([]byte, len(m.OverDriveNormalAttack)*10)
		var j5 int
		for _, num := range m.OverDriveNormalAttack {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintMonster_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.SuperSkill) > 0 {
		dAtA8 := make([]byte, len(m.SuperSkill)*10)
		var j7 int
		for _, num := range m.SuperSkill {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintMonster_Config(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x52
	}
	if len(m.NormalAttack) > 0 {
		dAtA10 := make([]byte, len(m.NormalAttack)*10)
		var j9 int
		for _, num := range m.NormalAttack {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintMonster_Config(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x4a
	}
	if m.Mass != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.Mass))
		i--
		dAtA[i] = 0x40
	}
	if len(m.BlackBoardKeys) > 0 {
		i -= len(m.BlackBoardKeys)
		copy(dAtA[i:], m.BlackBoardKeys)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.BlackBoardKeys)))
		i--
		dAtA[i] = 0x3a
	}
	if m.AIID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.AIID))
		i--
		dAtA[i] = 0x30
	}
	if m.Difficulty != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.Difficulty))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintMonster_Config(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.ModelScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ModelScale))))
		i--
		dAtA[i] = 0x1d
	}
	if m.ModelID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ModelID))
		i--
		dAtA[i] = 0x10
	}
	if m.NpcID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.NpcID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BuildLogic_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BuildLogic_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BuildLogic_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CrackUpGrow_Lightning != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.CrackUpGrow_Lightning))
		i--
		dAtA[i] = 0x50
	}
	if m.ResistanceGrow_Lightning != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ResistanceGrow_Lightning))
		i--
		dAtA[i] = 0x48
	}
	if m.CrackUpGrow_Poison != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.CrackUpGrow_Poison))
		i--
		dAtA[i] = 0x40
	}
	if m.ResistanceGrow_Poison != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ResistanceGrow_Poison))
		i--
		dAtA[i] = 0x38
	}
	if m.CrackUpGrow_Cold != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.CrackUpGrow_Cold))
		i--
		dAtA[i] = 0x30
	}
	if m.ResistanceGrow_Cold != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ResistanceGrow_Cold))
		i--
		dAtA[i] = 0x28
	}
	if m.CrackUpGrow_Fire != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.CrackUpGrow_Fire))
		i--
		dAtA[i] = 0x20
	}
	if m.ResistanceGrow_Fire != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ResistanceGrow_Fire))
		i--
		dAtA[i] = 0x18
	}
	if m.ElementType != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ElementType))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMonster_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Monster_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Monster_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Monster_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuildLogic_ConfigItems) > 0 {
		for k := range m.BuildLogic_ConfigItems {
			v := m.BuildLogic_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMonster_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMonster_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMonster_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Logic_ConfigItems) > 0 {
		for k := range m.Logic_ConfigItems {
			v := m.Logic_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMonster_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMonster_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMonster_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Model_ConfigItems) > 0 {
		for k := range m.Model_ConfigItems {
			v := m.Model_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMonster_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMonster_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMonster_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMonster_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovMonster_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Model_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMonster_Config(uint64(m.ID))
	}
	l = len(m.Model)
	if l > 0 {
		n += 1 + l + sovMonster_Config(uint64(l))
	}
	if m.CollisionRadius != 0 {
		n += 5
	}
	l = len(m.AnimatorController)
	if l > 0 {
		n += 1 + l + sovMonster_Config(uint64(l))
	}
	if m.WalkSpeed != 0 {
		n += 5
	}
	if m.RunSpeed != 0 {
		n += 5
	}
	if m.FastSpeed != 0 {
		n += 5
	}
	if m.LookAtSpeed != 0 {
		n += 5
	}
	if m.LookAtBackSpeed != 0 {
		n += 5
	}
	if m.MaxSpeed != 0 {
		n += 5
	}
	if m.TurnSpeed != 0 {
		n += 5
	}
	if m.DodgeDist != 0 {
		n += 5
	}
	if m.DodgeTime != 0 {
		n += 1 + sovMonster_Config(uint64(m.DodgeTime))
	}
	return n
}

func (m *Logic_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NpcID != 0 {
		n += 1 + sovMonster_Config(uint64(m.NpcID))
	}
	if m.ModelID != 0 {
		n += 1 + sovMonster_Config(uint64(m.ModelID))
	}
	if m.ModelScale != 0 {
		n += 5
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovMonster_Config(uint64(l))
	}
	if m.Difficulty != 0 {
		n += 1 + sovMonster_Config(uint64(m.Difficulty))
	}
	if m.AIID != 0 {
		n += 1 + sovMonster_Config(uint64(m.AIID))
	}
	l = len(m.BlackBoardKeys)
	if l > 0 {
		n += 1 + l + sovMonster_Config(uint64(l))
	}
	if m.Mass != 0 {
		n += 1 + sovMonster_Config(uint64(m.Mass))
	}
	if len(m.NormalAttack) > 0 {
		l = 0
		for _, e := range m.NormalAttack {
			l += sovMonster_Config(uint64(e))
		}
		n += 1 + sovMonster_Config(uint64(l)) + l
	}
	if len(m.SuperSkill) > 0 {
		l = 0
		for _, e := range m.SuperSkill {
			l += sovMonster_Config(uint64(e))
		}
		n += 1 + sovMonster_Config(uint64(l)) + l
	}
	if len(m.OverDriveNormalAttack) > 0 {
		l = 0
		for _, e := range m.OverDriveNormalAttack {
			l += sovMonster_Config(uint64(e))
		}
		n += 1 + sovMonster_Config(uint64(l)) + l
	}
	if len(m.OverDriveSuperSkill) > 0 {
		l = 0
		for _, e := range m.OverDriveSuperSkill {
			l += sovMonster_Config(uint64(e))
		}
		n += 1 + sovMonster_Config(uint64(l)) + l
	}
	if m.ShowLevel != 0 {
		n += 1 + sovMonster_Config(uint64(m.ShowLevel))
	}
	if m.Level != 0 {
		n += 1 + sovMonster_Config(uint64(m.Level))
	}
	if m.PropValueID != 0 {
		n += 1 + sovMonster_Config(uint64(m.PropValueID))
	}
	l = len(m.BornTimeline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	if m.BornPauseAllAI {
		n += 3
	}
	l = len(m.DeadTimeline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	if m.PublicCD != 0 {
		n += 2 + sovMonster_Config(uint64(m.PublicCD))
	}
	l = len(m.OverDriveTimline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	l = len(m.WeakBeginTimline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	l = len(m.WeakLoopTimline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	l = len(m.WeakEndTimline)
	if l > 0 {
		n += 2 + l + sovMonster_Config(uint64(l))
	}
	if len(m.BornBuffs) > 0 {
		l = 0
		for _, e := range m.BornBuffs {
			l += sovMonster_Config(uint64(e))
		}
		n += 2 + sovMonster_Config(uint64(l)) + l
	}
	return n
}

func (m *BuildLogic_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMonster_Config(uint64(m.ID))
	}
	if m.ElementType != 0 {
		n += 1 + sovMonster_Config(uint64(m.ElementType))
	}
	if m.ResistanceGrow_Fire != 0 {
		n += 1 + sovMonster_Config(uint64(m.ResistanceGrow_Fire))
	}
	if m.CrackUpGrow_Fire != 0 {
		n += 1 + sovMonster_Config(uint64(m.CrackUpGrow_Fire))
	}
	if m.ResistanceGrow_Cold != 0 {
		n += 1 + sovMonster_Config(uint64(m.ResistanceGrow_Cold))
	}
	if m.CrackUpGrow_Cold != 0 {
		n += 1 + sovMonster_Config(uint64(m.CrackUpGrow_Cold))
	}
	if m.ResistanceGrow_Poison != 0 {
		n += 1 + sovMonster_Config(uint64(m.ResistanceGrow_Poison))
	}
	if m.CrackUpGrow_Poison != 0 {
		n += 1 + sovMonster_Config(uint64(m.CrackUpGrow_Poison))
	}
	if m.ResistanceGrow_Lightning != 0 {
		n += 1 + sovMonster_Config(uint64(m.ResistanceGrow_Lightning))
	}
	if m.CrackUpGrow_Lightning != 0 {
		n += 1 + sovMonster_Config(uint64(m.CrackUpGrow_Lightning))
	}
	return n
}

func (m *Monster_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Model_ConfigItems) > 0 {
		for k, v := range m.Model_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMonster_Config(uint64(l))
			}
			mapEntrySize := 1 + sovMonster_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovMonster_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Logic_ConfigItems) > 0 {
		for k, v := range m.Logic_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMonster_Config(uint64(l))
			}
			mapEntrySize := 1 + sovMonster_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovMonster_Config(uint64(mapEntrySize))
		}
	}
	if len(m.BuildLogic_ConfigItems) > 0 {
		for k, v := range m.BuildLogic_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMonster_Config(uint64(l))
			}
			mapEntrySize := 1 + sovMonster_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovMonster_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMonster_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMonster_Config(x uint64) (n int) {
	return sovMonster_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Model_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Model_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Model_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Model = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollisionRadius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CollisionRadius = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimatorController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnimatorController = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalkSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WalkSpeed = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RunSpeed = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FastSpeed = float32(math.Float32frombits(v))
		case 8:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookAtSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LookAtSpeed = float32(math.Float32frombits(v))
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookAtBackSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LookAtBackSpeed = float32(math.Float32frombits(v))
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxSpeed = float32(math.Float32frombits(v))
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TurnSpeed = float32(math.Float32frombits(v))
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DodgeDist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DodgeDist = float32(math.Float32frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DodgeTime", wireType)
			}
			m.DodgeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DodgeTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonster_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Logic_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Logic_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Logic_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcID", wireType)
			}
			m.NpcID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NpcID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelID", wireType)
			}
			m.ModelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModelID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModelScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ModelScale = float32(math.Float32frombits(v))
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Difficulty", wireType)
			}
			m.Difficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Difficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AIID", wireType)
			}
			m.AIID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AIID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackBoardKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackBoardKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			m.Mass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mass |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NormalAttack = append(m.NormalAttack, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonster_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonster_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NormalAttack) == 0 {
					m.NormalAttack = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NormalAttack = append(m.NormalAttack, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalAttack", wireType)
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SuperSkill = append(m.SuperSkill, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonster_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonster_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SuperSkill) == 0 {
					m.SuperSkill = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SuperSkill = append(m.SuperSkill, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperSkill", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OverDriveNormalAttack = append(m.OverDriveNormalAttack, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonster_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonster_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OverDriveNormalAttack) == 0 {
					m.OverDriveNormalAttack = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OverDriveNormalAttack = append(m.OverDriveNormalAttack, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OverDriveNormalAttack", wireType)
			}
		case 12:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OverDriveSuperSkill = append(m.OverDriveSuperSkill, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonster_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonster_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OverDriveSuperSkill) == 0 {
					m.OverDriveSuperSkill = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OverDriveSuperSkill = append(m.OverDriveSuperSkill, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OverDriveSuperSkill", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowLevel", wireType)
			}
			m.ShowLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShowLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropValueID", wireType)
			}
			m.PropValueID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropValueID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BornTimeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BornTimeline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BornPauseAllAI", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BornPauseAllAI = bool(v != 0)
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeadTimeline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeadTimeline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicCD", wireType)
			}
			m.PublicCD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicCD |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OverDriveTimline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OverDriveTimline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakBeginTimline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeakBeginTimline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 23:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakLoopTimline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeakLoopTimline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WeakEndTimline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WeakEndTimline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BornBuffs = append(m.BornBuffs, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMonster_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMonster_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BornBuffs) == 0 {
					m.BornBuffs = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BornBuffs = append(m.BornBuffs, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BornBuffs", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonster_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BuildLogic_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BuildLogic_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BuildLogic_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElementType", wireType)
			}
			m.ElementType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ElementType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistanceGrow_Fire", wireType)
			}
			m.ResistanceGrow_Fire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistanceGrow_Fire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrackUpGrow_Fire", wireType)
			}
			m.CrackUpGrow_Fire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrackUpGrow_Fire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistanceGrow_Cold", wireType)
			}
			m.ResistanceGrow_Cold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistanceGrow_Cold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrackUpGrow_Cold", wireType)
			}
			m.CrackUpGrow_Cold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrackUpGrow_Cold |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistanceGrow_Poison", wireType)
			}
			m.ResistanceGrow_Poison = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistanceGrow_Poison |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrackUpGrow_Poison", wireType)
			}
			m.CrackUpGrow_Poison = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrackUpGrow_Poison |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResistanceGrow_Lightning", wireType)
			}
			m.ResistanceGrow_Lightning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResistanceGrow_Lightning |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrackUpGrow_Lightning", wireType)
			}
			m.CrackUpGrow_Lightning = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrackUpGrow_Lightning |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMonster_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Monster_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMonster_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Monster_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Monster_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model_ConfigItems == nil {
				m.Model_ConfigItems = make(map[uint32]*Model_Config)
			}
			var mapkey uint32
			var mapvalue *Model_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMonster_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Model_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMonster_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Model_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logic_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Logic_ConfigItems == nil {
				m.Logic_ConfigItems = make(map[uint32]*Logic_Config)
			}
			var mapkey uint32
			var mapvalue *Logic_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMonster_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Logic_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMonster_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Logic_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuildLogic_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMonster_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BuildLogic_ConfigItems == nil {
				m.BuildLogic_ConfigItems = make(map[uint32]*BuildLogic_Config)
			}
			var mapkey uint32
			var mapvalue *BuildLogic_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMonster_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMonster_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMonster_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BuildLogic_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMonster_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMonster_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BuildLogic_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMonster_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMonster_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMonster_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMonster_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMonster_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMonster_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMonster_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMonster_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMonster_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMonster_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMonster_Config = fmt.Errorf("proto: unexpected end of group")
)
