// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: FastBattle_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type FastBattle_Config struct {
	//* 阶数
	Stage uint32 `protobuf:"varint,1,opt,name=Stage,proto3" json:"Stage,omitempty"`
	//* 自己发起次数
	MyTimes uint32 `protobuf:"varint,2,opt,name=MyTimes,proto3" json:"MyTimes,omitempty"`
	//* 可享受队友发起的次数
	OtherTimes uint32 `protobuf:"varint,3,opt,name=OtherTimes,proto3" json:"OtherTimes,omitempty"`
	//* 消耗
	Cost uint32 `protobuf:"varint,4,opt,name=Cost,proto3" json:"Cost,omitempty"`
}

func (m *FastBattle_Config) Reset()         { *m = FastBattle_Config{} }
func (m *FastBattle_Config) String() string { return proto.CompactTextString(m) }
func (*FastBattle_Config) ProtoMessage()    {}
func (*FastBattle_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bcdbe5b311ee523, []int{0}
}
func (m *FastBattle_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastBattle_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastBattle_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastBattle_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastBattle_Config.Merge(m, src)
}
func (m *FastBattle_Config) XXX_Size() int {
	return m.Size()
}
func (m *FastBattle_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_FastBattle_Config.DiscardUnknown(m)
}

var xxx_messageInfo_FastBattle_Config proto.InternalMessageInfo

func (m *FastBattle_Config) GetStage() uint32 {
	if m != nil {
		return m.Stage
	}
	return 0
}

func (m *FastBattle_Config) GetMyTimes() uint32 {
	if m != nil {
		return m.MyTimes
	}
	return 0
}

func (m *FastBattle_Config) GetOtherTimes() uint32 {
	if m != nil {
		return m.OtherTimes
	}
	return 0
}

func (m *FastBattle_Config) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type Energize_Config struct {
	//* 流水ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 次数
	Times uint32 `protobuf:"varint,2,opt,name=Times,proto3" json:"Times,omitempty"`
	//* 消耗
	Cost uint32 `protobuf:"varint,3,opt,name=Cost,proto3" json:"Cost,omitempty"`
}

func (m *Energize_Config) Reset()         { *m = Energize_Config{} }
func (m *Energize_Config) String() string { return proto.CompactTextString(m) }
func (*Energize_Config) ProtoMessage()    {}
func (*Energize_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bcdbe5b311ee523, []int{1}
}
func (m *Energize_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Energize_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Energize_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Energize_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Energize_Config.Merge(m, src)
}
func (m *Energize_Config) XXX_Size() int {
	return m.Size()
}
func (m *Energize_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Energize_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Energize_Config proto.InternalMessageInfo

func (m *Energize_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Energize_Config) GetTimes() uint32 {
	if m != nil {
		return m.Times
	}
	return 0
}

func (m *Energize_Config) GetCost() uint32 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type SpeedUp_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 倍率
	Multi float32 `protobuf:"fixed32,2,opt,name=Multi,proto3" json:"Multi,omitempty"`
	//* 概率
	Probability uint32 `protobuf:"varint,3,opt,name=Probability,proto3" json:"Probability,omitempty"`
}

func (m *SpeedUp_Config) Reset()         { *m = SpeedUp_Config{} }
func (m *SpeedUp_Config) String() string { return proto.CompactTextString(m) }
func (*SpeedUp_Config) ProtoMessage()    {}
func (*SpeedUp_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bcdbe5b311ee523, []int{2}
}
func (m *SpeedUp_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpeedUp_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpeedUp_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpeedUp_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpeedUp_Config.Merge(m, src)
}
func (m *SpeedUp_Config) XXX_Size() int {
	return m.Size()
}
func (m *SpeedUp_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SpeedUp_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SpeedUp_Config proto.InternalMessageInfo

func (m *SpeedUp_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SpeedUp_Config) GetMulti() float32 {
	if m != nil {
		return m.Multi
	}
	return 0
}

func (m *SpeedUp_Config) GetProbability() uint32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type Variable_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 加速速度
	AccelSpeed float32 `protobuf:"fixed32,2,opt,name=AccelSpeed,proto3" json:"AccelSpeed,omitempty"`
	//* 加速时长秒
	AccelDuration float32 `protobuf:"fixed32,3,opt,name=AccelDuration,proto3" json:"AccelDuration,omitempty"`
}

func (m *Variable_Config) Reset()         { *m = Variable_Config{} }
func (m *Variable_Config) String() string { return proto.CompactTextString(m) }
func (*Variable_Config) ProtoMessage()    {}
func (*Variable_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bcdbe5b311ee523, []int{3}
}
func (m *Variable_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Variable_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Variable_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Variable_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Variable_Config.Merge(m, src)
}
func (m *Variable_Config) XXX_Size() int {
	return m.Size()
}
func (m *Variable_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Variable_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Variable_Config proto.InternalMessageInfo

func (m *Variable_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Variable_Config) GetAccelSpeed() float32 {
	if m != nil {
		return m.AccelSpeed
	}
	return 0
}

func (m *Variable_Config) GetAccelDuration() float32 {
	if m != nil {
		return m.AccelDuration
	}
	return 0
}

type FastBattle_Config_Data struct {
	FastBattle_ConfigItems map[uint32]*FastBattle_Config `protobuf:"bytes,1,rep,name=FastBattle_Config_items,json=FastBattleConfigItems,proto3" json:"FastBattle_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Energize_ConfigItems   map[uint32]*Energize_Config   `protobuf:"bytes,2,rep,name=Energize_Config_items,json=EnergizeConfigItems,proto3" json:"Energize_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SpeedUp_ConfigItems    map[uint32]*SpeedUp_Config    `protobuf:"bytes,3,rep,name=SpeedUp_Config_items,json=SpeedUpConfigItems,proto3" json:"SpeedUp_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Variable_ConfigItems   map[uint32]*Variable_Config   `protobuf:"bytes,4,rep,name=Variable_Config_items,json=VariableConfigItems,proto3" json:"Variable_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FastBattle_Config_Data) Reset()         { *m = FastBattle_Config_Data{} }
func (m *FastBattle_Config_Data) String() string { return proto.CompactTextString(m) }
func (*FastBattle_Config_Data) ProtoMessage()    {}
func (*FastBattle_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_9bcdbe5b311ee523, []int{4}
}
func (m *FastBattle_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FastBattle_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FastBattle_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FastBattle_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FastBattle_Config_Data.Merge(m, src)
}
func (m *FastBattle_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *FastBattle_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_FastBattle_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_FastBattle_Config_Data proto.InternalMessageInfo

func (m *FastBattle_Config_Data) GetFastBattle_ConfigItems() map[uint32]*FastBattle_Config {
	if m != nil {
		return m.FastBattle_ConfigItems
	}
	return nil
}

func (m *FastBattle_Config_Data) GetEnergize_ConfigItems() map[uint32]*Energize_Config {
	if m != nil {
		return m.Energize_ConfigItems
	}
	return nil
}

func (m *FastBattle_Config_Data) GetSpeedUp_ConfigItems() map[uint32]*SpeedUp_Config {
	if m != nil {
		return m.SpeedUp_ConfigItems
	}
	return nil
}

func (m *FastBattle_Config_Data) GetVariable_ConfigItems() map[uint32]*Variable_Config {
	if m != nil {
		return m.Variable_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*FastBattle_Config)(nil), "DataTables.FastBattle_Config")
	proto.RegisterType((*Energize_Config)(nil), "DataTables.Energize_Config")
	proto.RegisterType((*SpeedUp_Config)(nil), "DataTables.SpeedUp_Config")
	proto.RegisterType((*Variable_Config)(nil), "DataTables.Variable_Config")
	proto.RegisterType((*FastBattle_Config_Data)(nil), "DataTables.FastBattle_Config_Data")
	proto.RegisterMapType((map[uint32]*Energize_Config)(nil), "DataTables.FastBattle_Config_Data.EnergizeConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*FastBattle_Config)(nil), "DataTables.FastBattle_Config_Data.FastBattleConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SpeedUp_Config)(nil), "DataTables.FastBattle_Config_Data.SpeedUpConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Variable_Config)(nil), "DataTables.FastBattle_Config_Data.VariableConfigItemsEntry")
}

func init() { proto.RegisterFile("FastBattle_Config.proto", fileDescriptor_9bcdbe5b311ee523) }

var fileDescriptor_9bcdbe5b311ee523 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x94, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0x63, 0x3b, 0x29, 0xd2, 0x44, 0x6d, 0x61, 0x69, 0xa8, 0x15, 0xc4, 0x2a, 0x8a, 0x38,
	0xf4, 0x64, 0xa0, 0xbd, 0xa0, 0x22, 0x0e, 0xb4, 0x2e, 0x52, 0x84, 0x2a, 0x90, 0x5b, 0x10, 0xb7,
	0x68, 0x93, 0x2e, 0x66, 0x85, 0x93, 0x8d, 0xd6, 0xeb, 0x22, 0xf3, 0x14, 0x3c, 0x16, 0xc7, 0x1e,
	0x39, 0xa2, 0xe4, 0x19, 0xb8, 0x23, 0xaf, 0x37, 0xb0, 0xfe, 0x57, 0x85, 0x9b, 0x67, 0x66, 0xe7,
	0xfb, 0xed, 0xcc, 0xb7, 0x32, 0xec, 0xbf, 0x26, 0xb1, 0x3c, 0x21, 0x52, 0x46, 0x74, 0x7c, 0xca,
	0xe7, 0x9f, 0x58, 0xe8, 0x2d, 0x04, 0x97, 0x1c, 0x81, 0x4f, 0x24, 0xb9, 0x24, 0x93, 0x88, 0xc6,
	0xc3, 0xaf, 0x70, 0xaf, 0x72, 0x0c, 0xed, 0x41, 0xe7, 0x42, 0x92, 0x90, 0xba, 0xd6, 0xc0, 0x3a,
	0xd8, 0x0e, 0xf2, 0x00, 0xb9, 0x70, 0xe7, 0x3c, 0xbd, 0x64, 0x33, 0x1a, 0xbb, 0xb6, 0xca, 0xaf,
	0x43, 0x84, 0x01, 0xde, 0xca, 0xcf, 0x54, 0xe4, 0x45, 0x47, 0x15, 0x8d, 0x0c, 0x42, 0xd0, 0x3e,
	0xe5, 0xb1, 0x74, 0xdb, 0xaa, 0xa2, 0xbe, 0x87, 0x6f, 0x60, 0xf7, 0x6c, 0x4e, 0x45, 0xc8, 0xbe,
	0xfd, 0xc5, 0xee, 0x80, 0x3d, 0xf2, 0x35, 0xd3, 0x1e, 0xf9, 0xd9, 0x35, 0x4c, 0x5c, 0xa7, 0x28,
	0xe6, 0x18, 0x62, 0x1f, 0x61, 0xe7, 0x62, 0x41, 0xe9, 0xd5, 0xfb, 0xc5, 0x2d, 0x5a, 0xe7, 0x49,
	0x24, 0x99, 0xd2, 0xb2, 0x83, 0x3c, 0x40, 0x03, 0xe8, 0xbe, 0x13, 0x7c, 0x42, 0x26, 0x2c, 0x62,
	0x32, 0xd5, 0x92, 0x66, 0x6a, 0x18, 0xc2, 0xee, 0x07, 0x22, 0x58, 0xb6, 0xac, 0x26, 0x69, 0x0c,
	0xf0, 0x6a, 0x3a, 0xa5, 0x91, 0xba, 0x81, 0xd6, 0x37, 0x32, 0xe8, 0x31, 0x6c, 0xab, 0xc8, 0x4f,
	0x04, 0x91, 0x8c, 0xcf, 0x15, 0xc6, 0x0e, 0x8a, 0xc9, 0xe1, 0xef, 0x2d, 0x78, 0x50, 0x71, 0x62,
	0x9c, 0x39, 0x85, 0x92, 0x1a, 0x2b, 0xc7, 0x4c, 0xd2, 0x59, 0xec, 0x5a, 0x03, 0xe7, 0xa0, 0x7b,
	0xf8, 0xd2, 0xfb, 0xe7, 0xa8, 0x57, 0x2f, 0x62, 0xa4, 0xf3, 0xec, 0x28, 0xeb, 0x3f, 0x9b, 0x4b,
	0x91, 0x06, 0xbd, 0xda, 0x1a, 0xe2, 0xd0, 0x2b, 0x39, 0xa4, 0xa1, 0xb6, 0x82, 0xbe, 0xd8, 0x00,
	0xba, 0xee, 0xaf, 0x20, 0xef, 0xd7, 0x54, 0x50, 0x04, 0x7b, 0x45, 0x17, 0x35, 0xcf, 0x51, 0xbc,
	0xe3, 0x0d, 0x78, 0xba, 0xbd, 0x82, 0x43, 0xd5, 0x42, 0x36, 0x5e, 0xc9, 0x59, 0x8d, 0x6b, 0x6f,
	0x3c, 0xde, 0xba, 0xbf, 0x3a, 0x5e, 0x4d, 0xa5, 0x1f, 0x42, 0xbf, 0xd9, 0x04, 0x74, 0x17, 0x9c,
	0x2f, 0x34, 0xd5, 0xcf, 0x2a, 0xfb, 0x44, 0x47, 0xd0, 0xb9, 0x26, 0x51, 0x42, 0xd5, 0x93, 0xea,
	0x1e, 0x3e, 0xba, 0xf5, 0x42, 0x41, 0x7e, 0xf6, 0xd8, 0x7e, 0x6e, 0xf5, 0xa7, 0xe0, 0x36, 0x2d,
	0xbe, 0x06, 0xf3, 0xac, 0x88, 0x79, 0x68, 0x62, 0x4a, 0xfe, 0x9b, 0x10, 0x02, 0xfb, 0x0d, 0xdb,
	0xae, 0x61, 0x3c, 0x2d, 0x32, 0xfa, 0x26, 0xa3, 0x68, 0x79, 0x69, 0x8e, 0xa6, 0x0d, 0xff, 0xe7,
	0x1c, 0x25, 0xa3, 0x0d, 0xc8, 0xc9, 0x93, 0x1f, 0x4b, 0x6c, 0xdd, 0x2c, 0xb1, 0xf5, 0x6b, 0x89,
	0xad, 0xef, 0x2b, 0xdc, 0xba, 0x59, 0xe1, 0xd6, 0xcf, 0x15, 0x6e, 0x41, 0x6f, 0xca, 0x67, 0x9e,
	0x4f, 0x58, 0x9c, 0x7a, 0x31, 0x15, 0xd7, 0x54, 0x78, 0x57, 0x44, 0x92, 0xc9, 0x96, 0xfa, 0x89,
	0x1e, 0xfd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x21, 0xf0, 0x3a, 0xaa, 0x5f, 0x05, 0x00, 0x00,
}

func (m *FastBattle_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastBattle_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastBattle_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cost != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.Cost))
		i--
		dAtA[i] = 0x20
	}
	if m.OtherTimes != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.OtherTimes))
		i--
		dAtA[i] = 0x18
	}
	if m.MyTimes != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.MyTimes))
		i--
		dAtA[i] = 0x10
	}
	if m.Stage != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.Stage))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Energize_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Energize_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Energize_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cost != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.Cost))
		i--
		dAtA[i] = 0x18
	}
	if m.Times != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpeedUp_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpeedUp_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpeedUp_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Probability != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.Probability))
		i--
		dAtA[i] = 0x18
	}
	if m.Multi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Multi))))
		i--
		dAtA[i] = 0x15
	}
	if m.ID != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Variable_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Variable_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Variable_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccelDuration != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AccelDuration))))
		i--
		dAtA[i] = 0x1d
	}
	if m.AccelSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.AccelSpeed))))
		i--
		dAtA[i] = 0x15
	}
	if m.ID != 0 {
		i = encodeVarintFastBattle_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FastBattle_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FastBattle_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FastBattle_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Variable_ConfigItems) > 0 {
		for k := range m.Variable_ConfigItems {
			v := m.Variable_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFastBattle_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SpeedUp_ConfigItems) > 0 {
		for k := range m.SpeedUp_ConfigItems {
			v := m.SpeedUp_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFastBattle_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Energize_ConfigItems) > 0 {
		for k := range m.Energize_ConfigItems {
			v := m.Energize_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFastBattle_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FastBattle_ConfigItems) > 0 {
		for k := range m.FastBattle_ConfigItems {
			v := m.FastBattle_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFastBattle_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintFastBattle_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFastBattle_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovFastBattle_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FastBattle_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Stage != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.Stage))
	}
	if m.MyTimes != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.MyTimes))
	}
	if m.OtherTimes != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.OtherTimes))
	}
	if m.Cost != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.Cost))
	}
	return n
}

func (m *Energize_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.ID))
	}
	if m.Times != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.Times))
	}
	if m.Cost != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.Cost))
	}
	return n
}

func (m *SpeedUp_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.ID))
	}
	if m.Multi != 0 {
		n += 5
	}
	if m.Probability != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.Probability))
	}
	return n
}

func (m *Variable_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovFastBattle_Config(uint64(m.ID))
	}
	if m.AccelSpeed != 0 {
		n += 5
	}
	if m.AccelDuration != 0 {
		n += 5
	}
	return n
}

func (m *FastBattle_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FastBattle_ConfigItems) > 0 {
		for k, v := range m.FastBattle_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFastBattle_Config(uint64(l))
			}
			mapEntrySize := 1 + sovFastBattle_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovFastBattle_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Energize_ConfigItems) > 0 {
		for k, v := range m.Energize_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFastBattle_Config(uint64(l))
			}
			mapEntrySize := 1 + sovFastBattle_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovFastBattle_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SpeedUp_ConfigItems) > 0 {
		for k, v := range m.SpeedUp_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFastBattle_Config(uint64(l))
			}
			mapEntrySize := 1 + sovFastBattle_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovFastBattle_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Variable_ConfigItems) > 0 {
		for k, v := range m.Variable_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFastBattle_Config(uint64(l))
			}
			mapEntrySize := 1 + sovFastBattle_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovFastBattle_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovFastBattle_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFastBattle_Config(x uint64) (n int) {
	return sovFastBattle_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FastBattle_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastBattle_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastBattle_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stage", wireType)
			}
			m.Stage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Stage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyTimes", wireType)
			}
			m.MyTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyTimes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTimes", wireType)
			}
			m.OtherTimes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherTimes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Energize_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Energize_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Energize_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpeedUp_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpeedUp_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpeedUp_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Multi = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			m.Probability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Probability |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Variable_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Variable_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Variable_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccelSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AccelSpeed = float32(math.Float32frombits(v))
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccelDuration", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.AccelDuration = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FastBattle_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FastBattle_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FastBattle_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastBattle_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FastBattle_ConfigItems == nil {
				m.FastBattle_ConfigItems = make(map[uint32]*FastBattle_Config)
			}
			var mapkey uint32
			var mapvalue *FastBattle_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFastBattle_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &FastBattle_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FastBattle_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Energize_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Energize_ConfigItems == nil {
				m.Energize_ConfigItems = make(map[uint32]*Energize_Config)
			}
			var mapkey uint32
			var mapvalue *Energize_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFastBattle_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Energize_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Energize_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpeedUp_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpeedUp_ConfigItems == nil {
				m.SpeedUp_ConfigItems = make(map[uint32]*SpeedUp_Config)
			}
			var mapkey uint32
			var mapvalue *SpeedUp_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFastBattle_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SpeedUp_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpeedUp_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Variable_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Variable_ConfigItems == nil {
				m.Variable_ConfigItems = make(map[uint32]*Variable_Config)
			}
			var mapkey uint32
			var mapvalue *Variable_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFastBattle_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFastBattle_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Variable_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFastBattle_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Variable_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFastBattle_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFastBattle_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFastBattle_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFastBattle_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFastBattle_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFastBattle_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFastBattle_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFastBattle_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFastBattle_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFastBattle_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFastBattle_Config = fmt.Errorf("proto: unexpected end of group")
)
