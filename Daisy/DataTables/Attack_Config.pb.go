// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Attack_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AttackTemplate_Config struct {
	//* 伤害体模板ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 参数
	//SpawnPos(出生位置)==0: 施法者位置,1: 目标位置
	//AOE(AOETemplateID)
	//TargetCategory(目标选取策略)==0: 敌人,1: 友方
	//MaxTarget(最大目标数量)==0：所有人，>0：指定数量
	//MaxLinkTarget(最大连接数量)==0：所有人，>0：指定数量
	//RepeatLink(能否重复连接)==False:不能重复连接（闪电链）,True:能重复连接（弹弹球）
	Args string `protobuf:"bytes,2,opt,name=Args,proto3" json:"Args,omitempty"`
	//* 伤害体配置
	//程序内部使用，策划禁止修改
	Attacks string `protobuf:"bytes,3,opt,name=Attacks,proto3" json:"Attacks,omitempty"`
}

func (m *AttackTemplate_Config) Reset()         { *m = AttackTemplate_Config{} }
func (m *AttackTemplate_Config) String() string { return proto.CompactTextString(m) }
func (*AttackTemplate_Config) ProtoMessage()    {}
func (*AttackTemplate_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade53ede73040e99, []int{0}
}
func (m *AttackTemplate_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttackTemplate_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttackTemplate_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttackTemplate_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttackTemplate_Config.Merge(m, src)
}
func (m *AttackTemplate_Config) XXX_Size() int {
	return m.Size()
}
func (m *AttackTemplate_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AttackTemplate_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AttackTemplate_Config proto.InternalMessageInfo

func (m *AttackTemplate_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AttackTemplate_Config) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

func (m *AttackTemplate_Config) GetAttacks() string {
	if m != nil {
		return m.Attacks
	}
	return ""
}

type AoeTemplate_Config struct {
	//* AOEID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 形状参数
	//Type(伤害体形状类型)==0: 矩形,1: 圆形,2: 扇形
	//Extend(矩形区域全长全高)==X:宽,Y:长
	//Radius(圆形或扇形区域半径，不包含角色碰撞半径)
	//FanAngle(扇形区域夹角)==0~360
	//{"Type":0,"Extend":{"X":1,"Y":2},"Radius":3,"FanAngle":4}
	Args string `protobuf:"bytes,2,opt,name=Args,proto3" json:"Args,omitempty"`
}

func (m *AoeTemplate_Config) Reset()         { *m = AoeTemplate_Config{} }
func (m *AoeTemplate_Config) String() string { return proto.CompactTextString(m) }
func (*AoeTemplate_Config) ProtoMessage()    {}
func (*AoeTemplate_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade53ede73040e99, []int{1}
}
func (m *AoeTemplate_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AoeTemplate_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AoeTemplate_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AoeTemplate_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AoeTemplate_Config.Merge(m, src)
}
func (m *AoeTemplate_Config) XXX_Size() int {
	return m.Size()
}
func (m *AoeTemplate_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AoeTemplate_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AoeTemplate_Config proto.InternalMessageInfo

func (m *AoeTemplate_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AoeTemplate_Config) GetArgs() string {
	if m != nil {
		return m.Args
	}
	return ""
}

type Attack_Config_Data struct {
	AttackTemplate_ConfigItems map[uint32]*AttackTemplate_Config `protobuf:"bytes,1,rep,name=AttackTemplate_Config_items,json=AttackTemplateConfigItems,proto3" json:"AttackTemplate_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AoeTemplate_ConfigItems    map[uint32]*AoeTemplate_Config    `protobuf:"bytes,2,rep,name=AoeTemplate_Config_items,json=AoeTemplateConfigItems,proto3" json:"AoeTemplate_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Attack_Config_Data) Reset()         { *m = Attack_Config_Data{} }
func (m *Attack_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Attack_Config_Data) ProtoMessage()    {}
func (*Attack_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ade53ede73040e99, []int{2}
}
func (m *Attack_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Attack_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Attack_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Attack_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Attack_Config_Data.Merge(m, src)
}
func (m *Attack_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Attack_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Attack_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Attack_Config_Data proto.InternalMessageInfo

func (m *Attack_Config_Data) GetAttackTemplate_ConfigItems() map[uint32]*AttackTemplate_Config {
	if m != nil {
		return m.AttackTemplate_ConfigItems
	}
	return nil
}

func (m *Attack_Config_Data) GetAoeTemplate_ConfigItems() map[uint32]*AoeTemplate_Config {
	if m != nil {
		return m.AoeTemplate_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*AttackTemplate_Config)(nil), "DataTables.AttackTemplate_Config")
	proto.RegisterType((*AoeTemplate_Config)(nil), "DataTables.AoeTemplate_Config")
	proto.RegisterType((*Attack_Config_Data)(nil), "DataTables.Attack_Config_Data")
	proto.RegisterMapType((map[uint32]*AoeTemplate_Config)(nil), "DataTables.Attack_Config_Data.AoeTemplateConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*AttackTemplate_Config)(nil), "DataTables.Attack_Config_Data.AttackTemplateConfigItemsEntry")
}

func init() { proto.RegisterFile("Attack_Config.proto", fileDescriptor_ade53ede73040e99) }

var fileDescriptor_ade53ede73040e99 = []byte{
	// 325 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x76, 0x2c, 0x29, 0x49,
	0x4c, 0xce, 0x8e, 0x77, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x72, 0x49, 0x2c, 0x49, 0x0c, 0x49, 0x4c, 0xca, 0x49, 0x2d, 0x56, 0x0a, 0xe5, 0x12, 0x85,
	0x28, 0x09, 0x49, 0xcd, 0x2d, 0xc8, 0x49, 0x2c, 0x49, 0x85, 0x2a, 0x15, 0xe2, 0xe3, 0x62, 0xf2,
	0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x62, 0xf2, 0x74, 0x11, 0x12, 0xe2, 0x62, 0x71,
	0x2c, 0x4a, 0x2f, 0x96, 0x60, 0x52, 0x60, 0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x85, 0x24, 0xb8, 0xd8,
	0x21, 0x9a, 0x8b, 0x25, 0x98, 0xc1, 0xc2, 0x30, 0xae, 0x92, 0x05, 0x97, 0x90, 0x63, 0x7e, 0x2a,
	0x19, 0x66, 0x2a, 0x3d, 0x65, 0xe6, 0x12, 0x42, 0x71, 0x74, 0x3c, 0xc8, 0xb5, 0x42, 0xb5, 0x5c,
	0xd2, 0x58, 0xdd, 0x19, 0x9f, 0x59, 0x92, 0x9a, 0x5b, 0x2c, 0xc1, 0xa8, 0xc0, 0xac, 0xc1, 0x6d,
	0x64, 0xab, 0x87, 0xf0, 0x99, 0x1e, 0xa6, 0x21, 0x7a, 0xa8, 0x26, 0x40, 0x64, 0x3c, 0x41, 0xfa,
	0x5d, 0xf3, 0x4a, 0x8a, 0x2a, 0x83, 0x24, 0x71, 0xca, 0x0b, 0x95, 0x70, 0x49, 0x60, 0xfa, 0x07,
	0x6a, 0x37, 0x13, 0xd8, 0x6e, 0x2b, 0x42, 0x76, 0x23, 0xb4, 0x63, 0x58, 0x2c, 0x86, 0x5d, 0x52,
	0x2a, 0x9f, 0x4b, 0x0e, 0xbf, 0x93, 0x85, 0x04, 0xb8, 0x98, 0xb3, 0x53, 0x2b, 0xa1, 0x41, 0x0a,
	0x62, 0x0a, 0x99, 0x73, 0xb1, 0x96, 0x25, 0xe6, 0x94, 0xa6, 0x82, 0x03, 0x95, 0xdb, 0x48, 0x11,
	0xd3, 0x59, 0x68, 0xbe, 0x08, 0x82, 0xa8, 0xb7, 0x62, 0xb2, 0x60, 0x94, 0xca, 0xe4, 0x92, 0xc6,
	0xe3, 0x4e, 0x2c, 0xb6, 0x99, 0xa0, 0xda, 0x26, 0x87, 0x62, 0x1b, 0x46, 0x80, 0x21, 0x59, 0xe5,
	0xa4, 0x7f, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78,
	0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72, 0x0c, 0x5c, 0xa2, 0xc9, 0xf9, 0xb9,
	0x7a, 0x2e, 0x89, 0x99, 0xc5, 0x95, 0x7a, 0xc5, 0xa9, 0x45, 0x65, 0xa9, 0x45, 0x7a, 0x29, 0x89,
	0x25, 0x89, 0x49, 0x6c, 0xe0, 0xc4, 0x6b, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xec, 0xd2, 0x97,
	0x9e, 0xd3, 0x02, 0x00, 0x00,
}

func (m *AttackTemplate_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttackTemplate_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttackTemplate_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attacks) > 0 {
		i -= len(m.Attacks)
		copy(dAtA[i:], m.Attacks)
		i = encodeVarintAttack_Config(dAtA, i, uint64(len(m.Attacks)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintAttack_Config(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAttack_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AoeTemplate_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AoeTemplate_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AoeTemplate_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Args) > 0 {
		i -= len(m.Args)
		copy(dAtA[i:], m.Args)
		i = encodeVarintAttack_Config(dAtA, i, uint64(len(m.Args)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAttack_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Attack_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Attack_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Attack_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AoeTemplate_ConfigItems) > 0 {
		for k := range m.AoeTemplate_ConfigItems {
			v := m.AoeTemplate_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAttack_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintAttack_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAttack_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.AttackTemplate_ConfigItems) > 0 {
		for k := range m.AttackTemplate_ConfigItems {
			v := m.AttackTemplate_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAttack_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintAttack_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAttack_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAttack_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovAttack_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AttackTemplate_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAttack_Config(uint64(m.ID))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovAttack_Config(uint64(l))
	}
	l = len(m.Attacks)
	if l > 0 {
		n += 1 + l + sovAttack_Config(uint64(l))
	}
	return n
}

func (m *AoeTemplate_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAttack_Config(uint64(m.ID))
	}
	l = len(m.Args)
	if l > 0 {
		n += 1 + l + sovAttack_Config(uint64(l))
	}
	return n
}

func (m *Attack_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AttackTemplate_ConfigItems) > 0 {
		for k, v := range m.AttackTemplate_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAttack_Config(uint64(l))
			}
			mapEntrySize := 1 + sovAttack_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovAttack_Config(uint64(mapEntrySize))
		}
	}
	if len(m.AoeTemplate_ConfigItems) > 0 {
		for k, v := range m.AoeTemplate_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAttack_Config(uint64(l))
			}
			mapEntrySize := 1 + sovAttack_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovAttack_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAttack_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAttack_Config(x uint64) (n int) {
	return sovAttack_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AttackTemplate_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttack_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttackTemplate_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttackTemplate_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttack_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attacks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttack_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attacks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttack_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AoeTemplate_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttack_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AoeTemplate_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AoeTemplate_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Args", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAttack_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Args = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttack_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Attack_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAttack_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Attack_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Attack_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttackTemplate_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttack_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttackTemplate_ConfigItems == nil {
				m.AttackTemplate_ConfigItems = make(map[uint32]*AttackTemplate_Config)
			}
			var mapkey uint32
			var mapvalue *AttackTemplate_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttack_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttack_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttack_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAttack_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAttack_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttackTemplate_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAttack_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAttack_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttackTemplate_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AoeTemplate_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAttack_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AoeTemplate_ConfigItems == nil {
				m.AoeTemplate_ConfigItems = make(map[uint32]*AoeTemplate_Config)
			}
			var mapkey uint32
			var mapvalue *AoeTemplate_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAttack_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttack_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAttack_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAttack_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAttack_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AoeTemplate_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAttack_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAttack_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AoeTemplate_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAttack_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAttack_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAttack_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAttack_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAttack_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAttack_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAttack_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAttack_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAttack_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAttack_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAttack_Config = fmt.Errorf("proto: unexpected end of group")
)
