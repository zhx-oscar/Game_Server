// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Mass_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mass_Config struct {
	//* 质量类型ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 免疫轻受击
	ImmuneLightHit bool `protobuf:"varint,2,opt,name=ImmuneLightHit,proto3" json:"ImmuneLightHit,omitempty"`
	//* 免疫击破
	ImmuneBreak bool `protobuf:"varint,3,opt,name=ImmuneBreak,proto3" json:"ImmuneBreak,omitempty"`
	//* 免疫击倒
	ImmuneDown bool `protobuf:"varint,4,opt,name=ImmuneDown,proto3" json:"ImmuneDown,omitempty"`
	//* 免疫浮空
	ImmuneAir bool `protobuf:"varint,5,opt,name=ImmuneAir,proto3" json:"ImmuneAir,omitempty"`
	//* 免疫击晕
	ImmuneStun bool `protobuf:"varint,6,opt,name=ImmuneStun,proto3" json:"ImmuneStun,omitempty"`
}

func (m *Mass_Config) Reset()         { *m = Mass_Config{} }
func (m *Mass_Config) String() string { return proto.CompactTextString(m) }
func (*Mass_Config) ProtoMessage()    {}
func (*Mass_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5760df551dbe8eaf, []int{0}
}
func (m *Mass_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mass_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mass_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mass_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mass_Config.Merge(m, src)
}
func (m *Mass_Config) XXX_Size() int {
	return m.Size()
}
func (m *Mass_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Mass_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Mass_Config proto.InternalMessageInfo

func (m *Mass_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Mass_Config) GetImmuneLightHit() bool {
	if m != nil {
		return m.ImmuneLightHit
	}
	return false
}

func (m *Mass_Config) GetImmuneBreak() bool {
	if m != nil {
		return m.ImmuneBreak
	}
	return false
}

func (m *Mass_Config) GetImmuneDown() bool {
	if m != nil {
		return m.ImmuneDown
	}
	return false
}

func (m *Mass_Config) GetImmuneAir() bool {
	if m != nil {
		return m.ImmuneAir
	}
	return false
}

func (m *Mass_Config) GetImmuneStun() bool {
	if m != nil {
		return m.ImmuneStun
	}
	return false
}

type Mass_Config_Data struct {
	Mass_ConfigItems map[uint32]*Mass_Config `protobuf:"bytes,1,rep,name=Mass_Config_items,json=MassConfigItems,proto3" json:"Mass_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Mass_Config_Data) Reset()         { *m = Mass_Config_Data{} }
func (m *Mass_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Mass_Config_Data) ProtoMessage()    {}
func (*Mass_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5760df551dbe8eaf, []int{1}
}
func (m *Mass_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mass_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mass_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mass_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mass_Config_Data.Merge(m, src)
}
func (m *Mass_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Mass_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Mass_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Mass_Config_Data proto.InternalMessageInfo

func (m *Mass_Config_Data) GetMass_ConfigItems() map[uint32]*Mass_Config {
	if m != nil {
		return m.Mass_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*Mass_Config)(nil), "DataTables.Mass_Config")
	proto.RegisterType((*Mass_Config_Data)(nil), "DataTables.Mass_Config_Data")
	proto.RegisterMapType((map[uint32]*Mass_Config)(nil), "DataTables.Mass_Config_Data.MassConfigItemsEntry")
}

func init() { proto.RegisterFile("Mass_Config.proto", fileDescriptor_5760df551dbe8eaf) }

var fileDescriptor_5760df551dbe8eaf = []byte{
	// 312 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x91, 0xc1, 0x4b, 0xfb, 0x30,
	0x1c, 0xc5, 0x97, 0xee, 0xb7, 0xf1, 0xf3, 0x5b, 0x9c, 0x33, 0x28, 0x06, 0x91, 0x50, 0x76, 0x90,
	0x5d, 0x8c, 0x38, 0x2f, 0xe2, 0xcd, 0x59, 0xc1, 0x82, 0x5e, 0xaa, 0x37, 0x91, 0x91, 0x69, 0x9c,
	0x61, 0x6b, 0x2b, 0x49, 0x36, 0xd9, 0x7f, 0xe1, 0x3f, 0x25, 0x78, 0x92, 0x1d, 0x3d, 0xca, 0xfa,
	0x8f, 0x48, 0x53, 0xa1, 0xb5, 0xe8, 0x2d, 0xef, 0x93, 0xf7, 0x08, 0xef, 0x05, 0xd6, 0x2f, 0xb9,
	0xd6, 0x83, 0xd3, 0x24, 0x7e, 0x90, 0x23, 0xf6, 0xa4, 0x12, 0x93, 0x60, 0xf0, 0xb9, 0xe1, 0xd7,
	0x7c, 0x38, 0x11, 0xba, 0xf3, 0x8a, 0xc0, 0x2d, 0x39, 0x70, 0x0b, 0x9c, 0xc0, 0x27, 0xc8, 0x43,
	0xdd, 0xd5, 0xd0, 0x09, 0x7c, 0xbc, 0x0b, 0xad, 0x20, 0x8a, 0xa6, 0xb1, 0xb8, 0x90, 0xa3, 0x47,
	0x73, 0x2e, 0x0d, 0x71, 0x3c, 0xd4, 0xfd, 0x1f, 0x56, 0x28, 0xf6, 0xc0, 0xcd, 0x49, 0x5f, 0x09,
	0x3e, 0x26, 0x75, 0x6b, 0x2a, 0x23, 0x4c, 0x01, 0x72, 0xe9, 0x27, 0xcf, 0x31, 0xf9, 0x67, 0x0d,
	0x25, 0x82, 0x77, 0x60, 0x25, 0x57, 0x27, 0x52, 0x91, 0x86, 0xbd, 0x2e, 0x40, 0x91, 0xbe, 0x32,
	0xd3, 0x98, 0x34, 0xcb, 0xe9, 0x8c, 0x74, 0xde, 0x11, 0xb4, 0x4b, 0x3d, 0x06, 0x59, 0x45, 0x7c,
	0xfb, 0xa3, 0xfd, 0x40, 0x1a, 0x11, 0x69, 0x82, 0xbc, 0x7a, 0xd7, 0xed, 0x1d, 0xb0, 0x62, 0x04,
	0x56, 0x0d, 0x5a, 0x90, 0xeb, 0x20, 0xcb, 0x9c, 0xc5, 0x46, 0xcd, 0xc3, 0xb5, 0x0a, 0xdd, 0xbe,
	0x81, 0x8d, 0xdf, 0x8c, 0xb8, 0x0d, 0xf5, 0xb1, 0x98, 0x7f, 0x8f, 0x98, 0x1d, 0xf1, 0x1e, 0x34,
	0x66, 0x7c, 0x32, 0x15, 0x76, 0x3c, 0xb7, 0xb7, 0xf5, 0xc7, 0xe3, 0x61, 0xee, 0x3a, 0x76, 0x8e,
	0x50, 0x7f, 0xff, 0x6d, 0x49, 0xd1, 0x62, 0x49, 0xd1, 0xe7, 0x92, 0xa2, 0x97, 0x94, 0xd6, 0x16,
	0x29, 0xad, 0x7d, 0xa4, 0xb4, 0x06, 0x9b, 0x77, 0x49, 0xc4, 0x7c, 0x2e, 0xf5, 0x9c, 0x69, 0xa1,
	0x66, 0x42, 0xb1, 0x7b, 0x6e, 0xf8, 0xb0, 0x69, 0x3f, 0xf7, 0xf0, 0x2b, 0x00, 0x00, 0xff, 0xff,
	0x41, 0xf9, 0x5d, 0x3a, 0xf1, 0x01, 0x00, 0x00,
}

func (m *Mass_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mass_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mass_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ImmuneStun {
		i--
		if m.ImmuneStun {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.ImmuneAir {
		i--
		if m.ImmuneAir {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ImmuneDown {
		i--
		if m.ImmuneDown {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.ImmuneBreak {
		i--
		if m.ImmuneBreak {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.ImmuneLightHit {
		i--
		if m.ImmuneLightHit {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintMass_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Mass_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mass_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mass_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mass_ConfigItems) > 0 {
		for k := range m.Mass_ConfigItems {
			v := m.Mass_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintMass_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintMass_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintMass_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMass_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovMass_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mass_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovMass_Config(uint64(m.ID))
	}
	if m.ImmuneLightHit {
		n += 2
	}
	if m.ImmuneBreak {
		n += 2
	}
	if m.ImmuneDown {
		n += 2
	}
	if m.ImmuneAir {
		n += 2
	}
	if m.ImmuneStun {
		n += 2
	}
	return n
}

func (m *Mass_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mass_ConfigItems) > 0 {
		for k, v := range m.Mass_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovMass_Config(uint64(l))
			}
			mapEntrySize := 1 + sovMass_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovMass_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovMass_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMass_Config(x uint64) (n int) {
	return sovMass_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mass_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMass_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mass_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mass_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmuneLightHit", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImmuneLightHit = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmuneBreak", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImmuneBreak = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmuneDown", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImmuneDown = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmuneAir", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImmuneAir = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmuneStun", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ImmuneStun = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipMass_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMass_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMass_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Mass_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMass_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mass_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mass_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMass_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMass_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Mass_ConfigItems == nil {
				m.Mass_ConfigItems = make(map[uint32]*Mass_Config)
			}
			var mapkey uint32
			var mapvalue *Mass_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMass_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMass_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMass_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthMass_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthMass_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Mass_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipMass_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthMass_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Mass_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMass_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMass_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMass_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMass_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMass_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMass_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMass_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMass_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMass_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMass_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMass_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMass_Config = fmt.Errorf("proto: unexpected end of group")
)
