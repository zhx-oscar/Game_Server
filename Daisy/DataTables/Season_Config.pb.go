// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Season_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SeasonID_Config struct {
	//* 赛季ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 赛季名
	SeasonName string `protobuf:"bytes,2,opt,name=SeasonName,proto3" json:"SeasonName,omitempty"`
}

func (m *SeasonID_Config) Reset()         { *m = SeasonID_Config{} }
func (m *SeasonID_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonID_Config) ProtoMessage()    {}
func (*SeasonID_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{0}
}
func (m *SeasonID_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonID_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonID_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonID_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonID_Config.Merge(m, src)
}
func (m *SeasonID_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonID_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonID_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonID_Config proto.InternalMessageInfo

func (m *SeasonID_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonID_Config) GetSeasonName() string {
	if m != nil {
		return m.SeasonName
	}
	return ""
}

type SeasonLevel_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 赛季等级
	Seasonlevel uint32 `protobuf:"varint,2,opt,name=Seasonlevel,proto3" json:"Seasonlevel,omitempty"`
	//* 所属赛季
	SeasonID uint32 `protobuf:"varint,3,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	//* 所属赛季等级阶段
	SeasonStageID uint32 `protobuf:"varint,4,opt,name=SeasonStageID,proto3" json:"SeasonStageID,omitempty"`
	//* 到达该等级所需分值
	SeasonGoalScore uint32 `protobuf:"varint,7,opt,name=SeasonGoalScore,proto3" json:"SeasonGoalScore,omitempty"`
	//* 到达赛季等级奖励配置
	SeasonStageReward []string `protobuf:"bytes,8,rep,name=SeasonStageReward,proto3" json:"SeasonStageReward,omitempty"`
	//* 是否为关键点
	SeasonKey bool `protobuf:"varint,9,opt,name=SeasonKey,proto3" json:"SeasonKey,omitempty"`
	//* 补给解锁加成天数
	SupplyUnlockDay uint32 `protobuf:"varint,11,opt,name=SupplyUnlockDay,proto3" json:"SupplyUnlockDay,omitempty"`
	//* 补给解锁速率
	SupplyUnlockSpeed float32 `protobuf:"fixed32,12,opt,name=SupplyUnlockSpeed,proto3" json:"SupplyUnlockSpeed,omitempty"`
	//* 是否进入传说排行榜
	LegendRank bool `protobuf:"varint,13,opt,name=LegendRank,proto3" json:"LegendRank,omitempty"`
}

func (m *SeasonLevel_Config) Reset()         { *m = SeasonLevel_Config{} }
func (m *SeasonLevel_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonLevel_Config) ProtoMessage()    {}
func (*SeasonLevel_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{1}
}
func (m *SeasonLevel_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonLevel_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonLevel_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonLevel_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonLevel_Config.Merge(m, src)
}
func (m *SeasonLevel_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonLevel_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonLevel_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonLevel_Config proto.InternalMessageInfo

func (m *SeasonLevel_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonLevel_Config) GetSeasonlevel() uint32 {
	if m != nil {
		return m.Seasonlevel
	}
	return 0
}

func (m *SeasonLevel_Config) GetSeasonID() uint32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *SeasonLevel_Config) GetSeasonStageID() uint32 {
	if m != nil {
		return m.SeasonStageID
	}
	return 0
}

func (m *SeasonLevel_Config) GetSeasonGoalScore() uint32 {
	if m != nil {
		return m.SeasonGoalScore
	}
	return 0
}

func (m *SeasonLevel_Config) GetSeasonStageReward() []string {
	if m != nil {
		return m.SeasonStageReward
	}
	return nil
}

func (m *SeasonLevel_Config) GetSeasonKey() bool {
	if m != nil {
		return m.SeasonKey
	}
	return false
}

func (m *SeasonLevel_Config) GetSupplyUnlockDay() uint32 {
	if m != nil {
		return m.SupplyUnlockDay
	}
	return 0
}

func (m *SeasonLevel_Config) GetSupplyUnlockSpeed() float32 {
	if m != nil {
		return m.SupplyUnlockSpeed
	}
	return 0
}

func (m *SeasonLevel_Config) GetLegendRank() bool {
	if m != nil {
		return m.LegendRank
	}
	return false
}

type SeasonStage_Config struct {
	//* 等级段id
	SeasonStageID uint32 `protobuf:"varint,1,opt,name=SeasonStageID,proto3" json:"SeasonStageID,omitempty"`
	//* 名称
	SeasonStageName string `protobuf:"bytes,2,opt,name=SeasonStageName,proto3" json:"SeasonStageName,omitempty"`
}

func (m *SeasonStage_Config) Reset()         { *m = SeasonStage_Config{} }
func (m *SeasonStage_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonStage_Config) ProtoMessage()    {}
func (*SeasonStage_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{2}
}
func (m *SeasonStage_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonStage_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonStage_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonStage_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonStage_Config.Merge(m, src)
}
func (m *SeasonStage_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonStage_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonStage_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonStage_Config proto.InternalMessageInfo

func (m *SeasonStage_Config) GetSeasonStageID() uint32 {
	if m != nil {
		return m.SeasonStageID
	}
	return 0
}

func (m *SeasonStage_Config) GetSeasonStageName() string {
	if m != nil {
		return m.SeasonStageName
	}
	return ""
}

type SeasonReward_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 赛季ID
	SeasonID uint32 `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	//* 所属赛季等级阶段
	SeasonStageID uint32 `protobuf:"varint,3,opt,name=SeasonStageID,proto3" json:"SeasonStageID,omitempty"`
	//* 结算奖励
	SeasonReward []string `protobuf:"bytes,4,rep,name=SeasonReward,proto3" json:"SeasonReward,omitempty"`
}

func (m *SeasonReward_Config) Reset()         { *m = SeasonReward_Config{} }
func (m *SeasonReward_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonReward_Config) ProtoMessage()    {}
func (*SeasonReward_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{3}
}
func (m *SeasonReward_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonReward_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonReward_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonReward_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonReward_Config.Merge(m, src)
}
func (m *SeasonReward_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonReward_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonReward_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonReward_Config proto.InternalMessageInfo

func (m *SeasonReward_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonReward_Config) GetSeasonID() uint32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *SeasonReward_Config) GetSeasonStageID() uint32 {
	if m != nil {
		return m.SeasonStageID
	}
	return 0
}

func (m *SeasonReward_Config) GetSeasonReward() []string {
	if m != nil {
		return m.SeasonReward
	}
	return nil
}

type SeasonLegendReward_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 赛季ID
	SeasonID uint32 `protobuf:"varint,2,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	//* 传说排位阶段
	LegendStage []int32 `protobuf:"varint,3,rep,packed,name=LegendStage,proto3" json:"LegendStage,omitempty"`
	//* 奖励
	LegendStageReward []string `protobuf:"bytes,4,rep,name=LegendStageReward,proto3" json:"LegendStageReward,omitempty"`
}

func (m *SeasonLegendReward_Config) Reset()         { *m = SeasonLegendReward_Config{} }
func (m *SeasonLegendReward_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonLegendReward_Config) ProtoMessage()    {}
func (*SeasonLegendReward_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{4}
}
func (m *SeasonLegendReward_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonLegendReward_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonLegendReward_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonLegendReward_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonLegendReward_Config.Merge(m, src)
}
func (m *SeasonLegendReward_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonLegendReward_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonLegendReward_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonLegendReward_Config proto.InternalMessageInfo

func (m *SeasonLegendReward_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonLegendReward_Config) GetSeasonID() uint32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *SeasonLegendReward_Config) GetLegendStage() []int32 {
	if m != nil {
		return m.LegendStage
	}
	return nil
}

func (m *SeasonLegendReward_Config) GetLegendStageReward() []string {
	if m != nil {
		return m.LegendStageReward
	}
	return nil
}

type SeasonGeneral_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 数字
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	//*
	Characters string `protobuf:"bytes,3,opt,name=Characters,proto3" json:"Characters,omitempty"`
}

func (m *SeasonGeneral_Config) Reset()         { *m = SeasonGeneral_Config{} }
func (m *SeasonGeneral_Config) String() string { return proto.CompactTextString(m) }
func (*SeasonGeneral_Config) ProtoMessage()    {}
func (*SeasonGeneral_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{5}
}
func (m *SeasonGeneral_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SeasonGeneral_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SeasonGeneral_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SeasonGeneral_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SeasonGeneral_Config.Merge(m, src)
}
func (m *SeasonGeneral_Config) XXX_Size() int {
	return m.Size()
}
func (m *SeasonGeneral_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SeasonGeneral_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SeasonGeneral_Config proto.InternalMessageInfo

func (m *SeasonGeneral_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SeasonGeneral_Config) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *SeasonGeneral_Config) GetCharacters() string {
	if m != nil {
		return m.Characters
	}
	return ""
}

type Season_Config_Data struct {
	SeasonID_ConfigItems           map[uint32]*SeasonID_Config           `protobuf:"bytes,1,rep,name=SeasonID_Config_items,json=SeasonIDConfigItems,proto3" json:"SeasonID_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeasonLevel_ConfigItems        map[uint32]*SeasonLevel_Config        `protobuf:"bytes,2,rep,name=SeasonLevel_Config_items,json=SeasonLevelConfigItems,proto3" json:"SeasonLevel_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeasonStage_ConfigItems        map[uint32]*SeasonStage_Config        `protobuf:"bytes,3,rep,name=SeasonStage_Config_items,json=SeasonStageConfigItems,proto3" json:"SeasonStage_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeasonReward_ConfigItems       map[uint32]*SeasonReward_Config       `protobuf:"bytes,4,rep,name=SeasonReward_Config_items,json=SeasonRewardConfigItems,proto3" json:"SeasonReward_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeasonLegendReward_ConfigItems map[uint32]*SeasonLegendReward_Config `protobuf:"bytes,5,rep,name=SeasonLegendReward_Config_items,json=SeasonLegendRewardConfigItems,proto3" json:"SeasonLegendReward_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SeasonGeneral_ConfigItems      map[uint32]*SeasonGeneral_Config      `protobuf:"bytes,6,rep,name=SeasonGeneral_Config_items,json=SeasonGeneralConfigItems,proto3" json:"SeasonGeneral_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Season_Config_Data) Reset()         { *m = Season_Config_Data{} }
func (m *Season_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Season_Config_Data) ProtoMessage()    {}
func (*Season_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_c653500d63514bf6, []int{6}
}
func (m *Season_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Season_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Season_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Season_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Season_Config_Data.Merge(m, src)
}
func (m *Season_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Season_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Season_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Season_Config_Data proto.InternalMessageInfo

func (m *Season_Config_Data) GetSeasonID_ConfigItems() map[uint32]*SeasonID_Config {
	if m != nil {
		return m.SeasonID_ConfigItems
	}
	return nil
}

func (m *Season_Config_Data) GetSeasonLevel_ConfigItems() map[uint32]*SeasonLevel_Config {
	if m != nil {
		return m.SeasonLevel_ConfigItems
	}
	return nil
}

func (m *Season_Config_Data) GetSeasonStage_ConfigItems() map[uint32]*SeasonStage_Config {
	if m != nil {
		return m.SeasonStage_ConfigItems
	}
	return nil
}

func (m *Season_Config_Data) GetSeasonReward_ConfigItems() map[uint32]*SeasonReward_Config {
	if m != nil {
		return m.SeasonReward_ConfigItems
	}
	return nil
}

func (m *Season_Config_Data) GetSeasonLegendReward_ConfigItems() map[uint32]*SeasonLegendReward_Config {
	if m != nil {
		return m.SeasonLegendReward_ConfigItems
	}
	return nil
}

func (m *Season_Config_Data) GetSeasonGeneral_ConfigItems() map[uint32]*SeasonGeneral_Config {
	if m != nil {
		return m.SeasonGeneral_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*SeasonID_Config)(nil), "DataTables.SeasonID_Config")
	proto.RegisterType((*SeasonLevel_Config)(nil), "DataTables.SeasonLevel_Config")
	proto.RegisterType((*SeasonStage_Config)(nil), "DataTables.SeasonStage_Config")
	proto.RegisterType((*SeasonReward_Config)(nil), "DataTables.SeasonReward_Config")
	proto.RegisterType((*SeasonLegendReward_Config)(nil), "DataTables.SeasonLegendReward_Config")
	proto.RegisterType((*SeasonGeneral_Config)(nil), "DataTables.SeasonGeneral_Config")
	proto.RegisterType((*Season_Config_Data)(nil), "DataTables.Season_Config_Data")
	proto.RegisterMapType((map[uint32]*SeasonGeneral_Config)(nil), "DataTables.Season_Config_Data.SeasonGeneralConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SeasonID_Config)(nil), "DataTables.Season_Config_Data.SeasonIDConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SeasonLegendReward_Config)(nil), "DataTables.Season_Config_Data.SeasonLegendRewardConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SeasonLevel_Config)(nil), "DataTables.Season_Config_Data.SeasonLevelConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SeasonReward_Config)(nil), "DataTables.Season_Config_Data.SeasonRewardConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SeasonStage_Config)(nil), "DataTables.Season_Config_Data.SeasonStageConfigItemsEntry")
}

func init() { proto.RegisterFile("Season_Config.proto", fileDescriptor_c653500d63514bf6) }

var fileDescriptor_c653500d63514bf6 = []byte{
	// 717 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x96, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xbb, 0x76, 0xd3, 0xb7, 0x99, 0x34, 0x2f, 0xb0, 0x6d, 0x61, 0x49, 0x5b, 0xd7, 0xb2,
	0x40, 0xf2, 0x01, 0x19, 0x51, 0xfe, 0xaa, 0xe5, 0x52, 0x6a, 0x84, 0x22, 0x2a, 0x0e, 0x0e, 0x70,
	0x42, 0xaa, 0xb6, 0xc9, 0x52, 0xa2, 0x38, 0x76, 0xe4, 0xb8, 0xad, 0xcc, 0x37, 0x40, 0x5c, 0xb8,
	0xf1, 0x95, 0x38, 0xf6, 0xc8, 0x11, 0xb5, 0xdf, 0x81, 0x23, 0x42, 0x5e, 0xdb, 0xc9, 0x3a, 0x6b,
	0xa7, 0xa1, 0x37, 0xef, 0x33, 0xb3, 0xfb, 0x9b, 0xcc, 0x3c, 0x23, 0x05, 0x96, 0x5b, 0x8c, 0x0e,
	0x7d, 0xef, 0x60, 0xcf, 0xf7, 0x3e, 0x76, 0x8f, 0xac, 0x41, 0xe0, 0x87, 0x3e, 0x06, 0x9b, 0x86,
	0xf4, 0x2d, 0x3d, 0x74, 0xd9, 0xd0, 0xd8, 0x85, 0x6b, 0x49, 0x4a, 0xd3, 0x4e, 0x93, 0xf0, 0xff,
	0xa0, 0x34, 0x6d, 0x82, 0x74, 0x64, 0xd6, 0x1d, 0xa5, 0x69, 0x63, 0x0d, 0x20, 0x49, 0x79, 0x43,
	0xfb, 0x8c, 0x28, 0x3a, 0x32, 0xab, 0x8e, 0xa0, 0x18, 0xbf, 0x15, 0xc0, 0xc9, 0x71, 0x9f, 0x9d,
	0x30, 0xb7, 0xec, 0x19, 0x1d, 0x6a, 0x49, 0x96, 0x1b, 0x67, 0xf1, 0x77, 0xea, 0x8e, 0x28, 0xe1,
	0x06, 0x2c, 0x66, 0xb5, 0x10, 0x95, 0x87, 0x47, 0x67, 0x7c, 0x07, 0xea, 0xc9, 0x77, 0x2b, 0xa4,
	0x47, 0xac, 0x69, 0x93, 0x79, 0x9e, 0x90, 0x17, 0xb1, 0x99, 0xfd, 0x9a, 0x57, 0x3e, 0x75, 0x5b,
	0x6d, 0x3f, 0x60, 0xe4, 0x3f, 0x9e, 0x37, 0x29, 0xe3, 0x7b, 0x70, 0x43, 0xb8, 0xea, 0xb0, 0x53,
	0x1a, 0x74, 0xc8, 0xa2, 0xae, 0x9a, 0x55, 0x47, 0x0e, 0xe0, 0x75, 0xa8, 0x26, 0xe2, 0x6b, 0x16,
	0x91, 0xaa, 0x8e, 0xcc, 0x45, 0x67, 0x2c, 0x70, 0xea, 0xf1, 0x60, 0xe0, 0x46, 0xef, 0x3c, 0xd7,
	0x6f, 0xf7, 0x6c, 0x1a, 0x91, 0x5a, 0x4a, 0xcd, 0xcb, 0x9c, 0x2a, 0x48, 0xad, 0x01, 0x63, 0x1d,
	0xb2, 0xa4, 0x23, 0x53, 0x71, 0xe4, 0x40, 0xdc, 0xf8, 0x7d, 0x76, 0xc4, 0xbc, 0x8e, 0x43, 0xbd,
	0x1e, 0xa9, 0x73, 0xac, 0xa0, 0x18, 0x9d, 0xac, 0xef, 0xbc, 0xd4, 0xac, 0xef, 0x52, 0xa7, 0xd0,
	0xd4, 0x4e, 0x71, 0x41, 0x98, 0xec, 0xa4, 0x6c, 0x7c, 0x45, 0x99, 0x8b, 0x92, 0x66, 0x94, 0xcd,
	0x57, 0x9c, 0x9e, 0x72, 0xd9, 0xf4, 0xd4, 0xa2, 0x9a, 0x0c, 0x58, 0x12, 0x41, 0x64, 0x9e, 0x8f,
	0x23, 0xa7, 0x19, 0xdf, 0x11, 0xdc, 0xce, 0xcc, 0xc6, 0x1b, 0x71, 0xe5, 0x9a, 0x74, 0xa8, 0x25,
	0x4f, 0x70, 0x3c, 0x51, 0x75, 0xd5, 0xac, 0x38, 0xa2, 0x14, 0x4f, 0x4b, 0x38, 0xe6, 0x8a, 0x92,
	0x03, 0xc6, 0x07, 0x58, 0x49, 0x4d, 0xc6, 0x3c, 0x16, 0xd0, 0xd2, 0x3d, 0x58, 0x81, 0xca, 0x7b,
	0xea, 0x1e, 0xb3, 0xb4, 0xa0, 0xe4, 0x10, 0xcf, 0x7a, 0xef, 0x13, 0x0d, 0x68, 0x3b, 0x64, 0xc1,
	0x90, 0xb7, 0xa7, 0xea, 0x08, 0x8a, 0xf1, 0x07, 0xb2, 0x61, 0xa7, 0xef, 0x1e, 0xc4, 0x4b, 0x8c,
	0x7b, 0xb0, 0x3a, 0xb1, 0xbe, 0x07, 0xdd, 0x90, 0xf5, 0x87, 0x04, 0xe9, 0xaa, 0x59, 0xdb, 0x7a,
	0x6a, 0x8d, 0x57, 0xdd, 0x92, 0xaf, 0x5b, 0xd9, 0xdd, 0x44, 0x6b, 0xc6, 0x37, 0x5f, 0x7a, 0x61,
	0x10, 0x39, 0xcb, 0x05, 0x11, 0x1c, 0x02, 0x91, 0xf7, 0x3c, 0xe5, 0x29, 0x9c, 0xb7, 0x3d, 0x13,
	0x8f, 0x5f, 0x97, 0x90, 0x37, 0x8b, 0x83, 0x63, 0xaa, 0xe8, 0xf2, 0x94, 0xaa, 0xfe, 0x03, 0x95,
	0x5f, 0x2f, 0xa3, 0x4e, 0x06, 0xf1, 0x69, 0x66, 0xb3, 0x9c, 0xc1, 0x52, 0xec, 0x3c, 0xc7, 0xee,
	0xcc, 0x84, 0x4d, 0xee, 0x4b, 0xdc, 0x5b, 0x25, 0x51, 0xfc, 0x05, 0xc1, 0x66, 0xa9, 0xc1, 0x53,
	0x7e, 0x85, 0xf3, 0x77, 0x67, 0x6c, 0xf6, 0xf8, 0x15, 0xa9, 0x8a, 0x8d, 0xa9, 0x39, 0xf8, 0x33,
	0x34, 0x8a, 0x2c, 0x9d, 0x56, 0xb1, 0xc0, 0xab, 0x78, 0x3e, 0x53, 0x15, 0xe9, 0x03, 0x52, 0x01,
	0xa4, 0x2c, 0xdc, 0x68, 0x67, 0x63, 0x97, 0xdd, 0x89, 0xaf, 0x83, 0xda, 0x63, 0x51, 0xba, 0x53,
	0xf1, 0x27, 0x7e, 0x00, 0x95, 0x93, 0xd1, 0x52, 0xd5, 0xb6, 0xd6, 0xe4, 0xa2, 0x46, 0x0b, 0xe2,
	0x24, 0x99, 0xdb, 0xca, 0x33, 0xd4, 0xe8, 0xc2, 0xda, 0x14, 0x4b, 0x16, 0x70, 0x1e, 0xe5, 0x39,
	0x9a, 0xcc, 0x11, 0x77, 0xa3, 0x10, 0x55, 0xe8, 0xc3, 0x2b, 0xa1, 0xc4, 0x85, 0x10, 0x51, 0x3d,
	0x58, 0x9f, 0xe6, 0xbd, 0x02, 0xd6, 0xe3, 0x3c, 0x6b, 0x53, 0x66, 0xe5, 0x6c, 0x28, 0xc2, 0x4e,
	0xc1, 0xb8, 0xdc, 0x68, 0x05, 0xc8, 0x9d, 0x3c, 0xf2, 0x6e, 0x51, 0x27, 0x25, 0xff, 0x8b, 0xe0,
	0x3e, 0x6c, 0x4c, 0xf5, 0x56, 0x01, 0xf3, 0x49, 0x9e, 0xa9, 0xcb, 0xcc, 0xbc, 0xd1, 0x05, 0xdc,
	0x8b, 0xfb, 0x3f, 0xce, 0x35, 0x74, 0x76, 0xae, 0xa1, 0x5f, 0xe7, 0x1a, 0xfa, 0x76, 0xa1, 0xcd,
	0x9d, 0x5d, 0x68, 0x73, 0x3f, 0x2f, 0xb4, 0x39, 0x58, 0x6d, 0xfb, 0x7d, 0xcb, 0xa6, 0xdd, 0x61,
	0x64, 0x0d, 0x59, 0x70, 0xc2, 0x02, 0xab, 0x43, 0x43, 0x7a, 0xb8, 0xc0, 0xff, 0x6c, 0x3d, 0xfc,
	0x1b, 0x00, 0x00, 0xff, 0xff, 0x32, 0xf6, 0xce, 0x61, 0x83, 0x09, 0x00, 0x00,
}

func (m *SeasonID_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonID_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonID_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonName) > 0 {
		i -= len(m.SeasonName)
		copy(dAtA[i:], m.SeasonName)
		i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.SeasonName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonLevel_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonLevel_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonLevel_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LegendRank {
		i--
		if m.LegendRank {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.SupplyUnlockSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.SupplyUnlockSpeed))))
		i--
		dAtA[i] = 0x65
	}
	if m.SupplyUnlockDay != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SupplyUnlockDay))
		i--
		dAtA[i] = 0x58
	}
	if m.SeasonKey {
		i--
		if m.SeasonKey {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if len(m.SeasonStageReward) > 0 {
		for iNdEx := len(m.SeasonStageReward) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SeasonStageReward[iNdEx])
			copy(dAtA[i:], m.SeasonStageReward[iNdEx])
			i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.SeasonStageReward[iNdEx])))
			i--
			dAtA[i] = 0x42
		}
	}
	if m.SeasonGoalScore != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonGoalScore))
		i--
		dAtA[i] = 0x38
	}
	if m.SeasonStageID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonStageID))
		i--
		dAtA[i] = 0x20
	}
	if m.SeasonID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x18
	}
	if m.Seasonlevel != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.Seasonlevel))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonStage_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonStage_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonStage_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonStageName) > 0 {
		i -= len(m.SeasonStageName)
		copy(dAtA[i:], m.SeasonStageName)
		i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.SeasonStageName)))
		i--
		dAtA[i] = 0x12
	}
	if m.SeasonStageID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonStageID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonReward_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonReward_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonReward_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonReward) > 0 {
		for iNdEx := len(m.SeasonReward) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SeasonReward[iNdEx])
			copy(dAtA[i:], m.SeasonReward[iNdEx])
			i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.SeasonReward[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SeasonStageID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonStageID))
		i--
		dAtA[i] = 0x18
	}
	if m.SeasonID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonLegendReward_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonLegendReward_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonLegendReward_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LegendStageReward) > 0 {
		for iNdEx := len(m.LegendStageReward) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LegendStageReward[iNdEx])
			copy(dAtA[i:], m.LegendStageReward[iNdEx])
			i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.LegendStageReward[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.LegendStage) > 0 {
		dAtA2 := make([]byte, len(m.LegendStage)*10)
		var j1 int
		for _, num1 := range m.LegendStage {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSeason_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if m.SeasonID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SeasonGeneral_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SeasonGeneral_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SeasonGeneral_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Characters) > 0 {
		i -= len(m.Characters)
		copy(dAtA[i:], m.Characters)
		i = encodeVarintSeason_Config(dAtA, i, uint64(len(m.Characters)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Value != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSeason_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Season_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Season_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Season_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SeasonGeneral_ConfigItems) > 0 {
		for k := range m.SeasonGeneral_ConfigItems {
			v := m.SeasonGeneral_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.SeasonLegendReward_ConfigItems) > 0 {
		for k := range m.SeasonLegendReward_ConfigItems {
			v := m.SeasonLegendReward_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.SeasonReward_ConfigItems) > 0 {
		for k := range m.SeasonReward_ConfigItems {
			v := m.SeasonReward_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.SeasonStage_ConfigItems) > 0 {
		for k := range m.SeasonStage_ConfigItems {
			v := m.SeasonStage_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SeasonLevel_ConfigItems) > 0 {
		for k := range m.SeasonLevel_ConfigItems {
			v := m.SeasonLevel_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SeasonID_ConfigItems) > 0 {
		for k := range m.SeasonID_ConfigItems {
			v := m.SeasonID_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSeason_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSeason_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeason_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeason_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeason_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SeasonID_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSeason_Config(uint64(m.ID))
	}
	l = len(m.SeasonName)
	if l > 0 {
		n += 1 + l + sovSeason_Config(uint64(l))
	}
	return n
}

func (m *SeasonLevel_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSeason_Config(uint64(m.ID))
	}
	if m.Seasonlevel != 0 {
		n += 1 + sovSeason_Config(uint64(m.Seasonlevel))
	}
	if m.SeasonID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonID))
	}
	if m.SeasonStageID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonStageID))
	}
	if m.SeasonGoalScore != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonGoalScore))
	}
	if len(m.SeasonStageReward) > 0 {
		for _, s := range m.SeasonStageReward {
			l = len(s)
			n += 1 + l + sovSeason_Config(uint64(l))
		}
	}
	if m.SeasonKey {
		n += 2
	}
	if m.SupplyUnlockDay != 0 {
		n += 1 + sovSeason_Config(uint64(m.SupplyUnlockDay))
	}
	if m.SupplyUnlockSpeed != 0 {
		n += 5
	}
	if m.LegendRank {
		n += 2
	}
	return n
}

func (m *SeasonStage_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonStageID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonStageID))
	}
	l = len(m.SeasonStageName)
	if l > 0 {
		n += 1 + l + sovSeason_Config(uint64(l))
	}
	return n
}

func (m *SeasonReward_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSeason_Config(uint64(m.ID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonID))
	}
	if m.SeasonStageID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonStageID))
	}
	if len(m.SeasonReward) > 0 {
		for _, s := range m.SeasonReward {
			l = len(s)
			n += 1 + l + sovSeason_Config(uint64(l))
		}
	}
	return n
}

func (m *SeasonLegendReward_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSeason_Config(uint64(m.ID))
	}
	if m.SeasonID != 0 {
		n += 1 + sovSeason_Config(uint64(m.SeasonID))
	}
	if len(m.LegendStage) > 0 {
		l = 0
		for _, e := range m.LegendStage {
			l += sovSeason_Config(uint64(e))
		}
		n += 1 + sovSeason_Config(uint64(l)) + l
	}
	if len(m.LegendStageReward) > 0 {
		for _, s := range m.LegendStageReward {
			l = len(s)
			n += 1 + l + sovSeason_Config(uint64(l))
		}
	}
	return n
}

func (m *SeasonGeneral_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSeason_Config(uint64(m.ID))
	}
	if m.Value != 0 {
		n += 1 + sovSeason_Config(uint64(m.Value))
	}
	l = len(m.Characters)
	if l > 0 {
		n += 1 + l + sovSeason_Config(uint64(l))
	}
	return n
}

func (m *Season_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SeasonID_ConfigItems) > 0 {
		for k, v := range m.SeasonID_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SeasonLevel_ConfigItems) > 0 {
		for k, v := range m.SeasonLevel_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SeasonStage_ConfigItems) > 0 {
		for k, v := range m.SeasonStage_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SeasonReward_ConfigItems) > 0 {
		for k, v := range m.SeasonReward_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SeasonLegendReward_ConfigItems) > 0 {
		for k, v := range m.SeasonLegendReward_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SeasonGeneral_ConfigItems) > 0 {
		for k, v := range m.SeasonGeneral_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSeason_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSeason_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSeason_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSeason_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeason_Config(x uint64) (n int) {
	return sovSeason_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SeasonID_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonID_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonID_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonLevel_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonLevel_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonLevel_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seasonlevel", wireType)
			}
			m.Seasonlevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seasonlevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStageID", wireType)
			}
			m.SeasonStageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonGoalScore", wireType)
			}
			m.SeasonGoalScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonGoalScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStageReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonStageReward = append(m.SeasonStageReward, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonKey", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeasonKey = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyUnlockDay", wireType)
			}
			m.SupplyUnlockDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplyUnlockDay |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyUnlockSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.SupplyUnlockSpeed = float32(math.Float32frombits(v))
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegendRank", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LegendRank = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonStage_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonStage_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonStage_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStageID", wireType)
			}
			m.SeasonStageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStageName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonStageName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonReward_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonReward_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonReward_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStageID", wireType)
			}
			m.SeasonStageID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonStageID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SeasonReward = append(m.SeasonReward, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonLegendReward_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonLegendReward_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonLegendReward_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.LegendStage = append(m.LegendStage, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSeason_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSeason_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.LegendStage) == 0 {
					m.LegendStage = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.LegendStage = append(m.LegendStage, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field LegendStage", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegendStageReward", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegendStageReward = append(m.LegendStageReward, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SeasonGeneral_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SeasonGeneral_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SeasonGeneral_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Characters", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Characters = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Season_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Season_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Season_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonID_ConfigItems == nil {
				m.SeasonID_ConfigItems = make(map[uint32]*SeasonID_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonID_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonID_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonID_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonLevel_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonLevel_ConfigItems == nil {
				m.SeasonLevel_ConfigItems = make(map[uint32]*SeasonLevel_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonLevel_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonLevel_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonLevel_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonStage_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonStage_ConfigItems == nil {
				m.SeasonStage_ConfigItems = make(map[uint32]*SeasonStage_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonStage_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonStage_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonStage_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonReward_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonReward_ConfigItems == nil {
				m.SeasonReward_ConfigItems = make(map[uint32]*SeasonReward_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonReward_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonReward_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonReward_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonLegendReward_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonLegendReward_ConfigItems == nil {
				m.SeasonLegendReward_ConfigItems = make(map[uint32]*SeasonLegendReward_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonLegendReward_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonLegendReward_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonLegendReward_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonGeneral_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeason_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonGeneral_ConfigItems == nil {
				m.SeasonGeneral_ConfigItems = make(map[uint32]*SeasonGeneral_Config)
			}
			var mapkey uint32
			var mapvalue *SeasonGeneral_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeason_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeason_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSeason_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SeasonGeneral_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeason_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeason_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SeasonGeneral_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeason_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeason_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeason_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeason_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeason_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeason_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeason_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeason_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeason_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeason_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeason_Config = fmt.Errorf("proto: unexpected end of group")
)
