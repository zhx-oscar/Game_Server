// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TargetStrategy_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TargetStrategy_Config struct {
	//* 技能逻辑ID
	SkillID uint32 `protobuf:"varint,1,opt,name=SkillID,proto3" json:"SkillID,omitempty"`
	//* 策略组
	StrategyID []uint32 `protobuf:"varint,2,rep,packed,name=StrategyID,proto3" json:"StrategyID,omitempty"`
}

func (m *TargetStrategy_Config) Reset()         { *m = TargetStrategy_Config{} }
func (m *TargetStrategy_Config) String() string { return proto.CompactTextString(m) }
func (*TargetStrategy_Config) ProtoMessage()    {}
func (*TargetStrategy_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_78e58d9f4178f539, []int{0}
}
func (m *TargetStrategy_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetStrategy_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetStrategy_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetStrategy_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetStrategy_Config.Merge(m, src)
}
func (m *TargetStrategy_Config) XXX_Size() int {
	return m.Size()
}
func (m *TargetStrategy_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetStrategy_Config.DiscardUnknown(m)
}

var xxx_messageInfo_TargetStrategy_Config proto.InternalMessageInfo

func (m *TargetStrategy_Config) GetSkillID() uint32 {
	if m != nil {
		return m.SkillID
	}
	return 0
}

func (m *TargetStrategy_Config) GetStrategyID() []uint32 {
	if m != nil {
		return m.StrategyID
	}
	return nil
}

type StrategyBase_Config struct {
	//* 基础策略ID
	StrategyID uint32 `protobuf:"varint,1,opt,name=StrategyID,proto3" json:"StrategyID,omitempty"`
	//* 策略类型
	StrategyType uint32 `protobuf:"varint,2,opt,name=StrategyType,proto3" json:"StrategyType,omitempty"`
	//* 计算类型
	CalcType uint32 `protobuf:"varint,3,opt,name=CalcType,proto3" json:"CalcType,omitempty"`
	//* 阵营
	Camp uint32 `protobuf:"varint,4,opt,name=Camp,proto3" json:"Camp,omitempty"`
	//* 参数1
	Param1 uint32 `protobuf:"varint,5,opt,name=Param1,proto3" json:"Param1,omitempty"`
	//* 参数2
	Param2 uint32 `protobuf:"varint,6,opt,name=Param2,proto3" json:"Param2,omitempty"`
}

func (m *StrategyBase_Config) Reset()         { *m = StrategyBase_Config{} }
func (m *StrategyBase_Config) String() string { return proto.CompactTextString(m) }
func (*StrategyBase_Config) ProtoMessage()    {}
func (*StrategyBase_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_78e58d9f4178f539, []int{1}
}
func (m *StrategyBase_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StrategyBase_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StrategyBase_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StrategyBase_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StrategyBase_Config.Merge(m, src)
}
func (m *StrategyBase_Config) XXX_Size() int {
	return m.Size()
}
func (m *StrategyBase_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_StrategyBase_Config.DiscardUnknown(m)
}

var xxx_messageInfo_StrategyBase_Config proto.InternalMessageInfo

func (m *StrategyBase_Config) GetStrategyID() uint32 {
	if m != nil {
		return m.StrategyID
	}
	return 0
}

func (m *StrategyBase_Config) GetStrategyType() uint32 {
	if m != nil {
		return m.StrategyType
	}
	return 0
}

func (m *StrategyBase_Config) GetCalcType() uint32 {
	if m != nil {
		return m.CalcType
	}
	return 0
}

func (m *StrategyBase_Config) GetCamp() uint32 {
	if m != nil {
		return m.Camp
	}
	return 0
}

func (m *StrategyBase_Config) GetParam1() uint32 {
	if m != nil {
		return m.Param1
	}
	return 0
}

func (m *StrategyBase_Config) GetParam2() uint32 {
	if m != nil {
		return m.Param2
	}
	return 0
}

type TargetStrategy_Config_Data struct {
	TargetStrategy_ConfigItems map[uint32]*TargetStrategy_Config `protobuf:"bytes,1,rep,name=TargetStrategy_Config_items,json=TargetStrategyConfigItems,proto3" json:"TargetStrategy_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	StrategyBase_ConfigItems   map[uint32]*StrategyBase_Config   `protobuf:"bytes,2,rep,name=StrategyBase_Config_items,json=StrategyBaseConfigItems,proto3" json:"StrategyBase_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *TargetStrategy_Config_Data) Reset()         { *m = TargetStrategy_Config_Data{} }
func (m *TargetStrategy_Config_Data) String() string { return proto.CompactTextString(m) }
func (*TargetStrategy_Config_Data) ProtoMessage()    {}
func (*TargetStrategy_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_78e58d9f4178f539, []int{2}
}
func (m *TargetStrategy_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TargetStrategy_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TargetStrategy_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TargetStrategy_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TargetStrategy_Config_Data.Merge(m, src)
}
func (m *TargetStrategy_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *TargetStrategy_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_TargetStrategy_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_TargetStrategy_Config_Data proto.InternalMessageInfo

func (m *TargetStrategy_Config_Data) GetTargetStrategy_ConfigItems() map[uint32]*TargetStrategy_Config {
	if m != nil {
		return m.TargetStrategy_ConfigItems
	}
	return nil
}

func (m *TargetStrategy_Config_Data) GetStrategyBase_ConfigItems() map[uint32]*StrategyBase_Config {
	if m != nil {
		return m.StrategyBase_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*TargetStrategy_Config)(nil), "DataTables.TargetStrategy_Config")
	proto.RegisterType((*StrategyBase_Config)(nil), "DataTables.StrategyBase_Config")
	proto.RegisterType((*TargetStrategy_Config_Data)(nil), "DataTables.TargetStrategy_Config_Data")
	proto.RegisterMapType((map[uint32]*StrategyBase_Config)(nil), "DataTables.TargetStrategy_Config_Data.StrategyBaseConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*TargetStrategy_Config)(nil), "DataTables.TargetStrategy_Config_Data.TargetStrategyConfigItemsEntry")
}

func init() { proto.RegisterFile("TargetStrategy_Config.proto", fileDescriptor_78e58d9f4178f539) }

var fileDescriptor_78e58d9f4178f539 = []byte{
	// 384 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x31, 0x6f, 0xda, 0x40,
	0x18, 0xe5, 0x6c, 0xa0, 0xd5, 0x47, 0x91, 0xaa, 0xab, 0x68, 0x0f, 0xb7, 0xba, 0x52, 0x4f, 0x4c,
	0xae, 0xea, 0x2a, 0x4a, 0x94, 0x11, 0x9b, 0x81, 0x2d, 0x31, 0xec, 0xe8, 0x20, 0x17, 0x64, 0x61,
	0x63, 0x64, 0x5f, 0x90, 0x3c, 0x65, 0x88, 0xb2, 0xe7, 0xef, 0xe4, 0x1f, 0x64, 0x64, 0xcc, 0x18,
	0xc1, 0x1f, 0x89, 0x38, 0x63, 0x62, 0x12, 0x9b, 0x64, 0xbb, 0xf7, 0xde, 0xe7, 0xf7, 0x3d, 0xbd,
	0x4f, 0x86, 0x9f, 0x03, 0x16, 0x4e, 0xb8, 0xe8, 0x8b, 0x90, 0x09, 0x3e, 0x89, 0x87, 0x56, 0x30,
	0xbb, 0x74, 0x27, 0xc6, 0x3c, 0x0c, 0x44, 0x80, 0xc1, 0x66, 0x82, 0x0d, 0xd8, 0xc8, 0xe3, 0x91,
	0x7e, 0x0e, 0x8d, 0xdc, 0x51, 0x4c, 0xe0, 0x53, 0x7f, 0xea, 0x7a, 0x5e, 0xcf, 0x26, 0xa8, 0x85,
	0xda, 0x75, 0x27, 0x85, 0x98, 0x02, 0xa4, 0xc3, 0x3d, 0x9b, 0x28, 0x2d, 0xb5, 0x5d, 0x77, 0x32,
	0x8c, 0x7e, 0x8f, 0xe0, 0x5b, 0x0a, 0x3b, 0x2c, 0xe2, 0xa9, 0xe3, 0xfe, 0x77, 0x89, 0x69, 0x86,
	0xc1, 0x3a, 0x7c, 0x49, 0xd1, 0x20, 0x9e, 0x73, 0xa2, 0xc8, 0x89, 0x3d, 0x0e, 0x6b, 0xf0, 0xd9,
	0x62, 0xde, 0x58, 0xea, 0xaa, 0xd4, 0x77, 0x18, 0x63, 0x28, 0x5b, 0xcc, 0x9f, 0x93, 0xb2, 0xe4,
	0xe5, 0x1b, 0x7f, 0x87, 0xea, 0x19, 0x0b, 0x99, 0xff, 0x8f, 0x54, 0x24, 0xbb, 0x45, 0x3b, 0xde,
	0x24, 0xd5, 0x0c, 0x6f, 0xea, 0x37, 0x65, 0xd0, 0x72, 0xfb, 0x18, 0x6e, 0x3a, 0xc3, 0xb7, 0xa8,
	0xa0, 0xd9, 0xa1, 0x2b, 0xb8, 0x1f, 0x11, 0xd4, 0x52, 0xdb, 0x35, 0xb3, 0x6b, 0xbc, 0x14, 0x6c,
	0x14, 0xbb, 0xbd, 0x92, 0x12, 0xa5, 0xb7, 0xf1, 0xe9, 0xce, 0x44, 0x18, 0x3b, 0xcd, 0x42, 0x1d,
	0x5f, 0x43, 0x33, 0xa7, 0xe1, 0x6d, 0x08, 0x45, 0x86, 0xb0, 0x3e, 0x18, 0x22, 0xeb, 0xf3, 0x26,
	0xc2, 0x8f, 0x02, 0x55, 0x0b, 0x80, 0x1e, 0x4e, 0x8f, 0xbf, 0x82, 0x3a, 0xe5, 0xf1, 0xf6, 0xcc,
	0x9b, 0x27, 0x3e, 0x86, 0xca, 0x82, 0x79, 0x57, 0xc9, 0x61, 0x6b, 0xe6, 0x9f, 0x77, 0x03, 0x3a,
	0xc9, 0xfc, 0xa9, 0x72, 0x82, 0xb4, 0x29, 0xfc, 0x3a, 0x94, 0x34, 0x67, 0xdd, 0xd1, 0xfe, 0xba,
	0xdf, 0xd9, 0x75, 0x39, 0xe5, 0x65, 0x96, 0x75, 0xfe, 0x3e, 0xac, 0x28, 0x5a, 0xae, 0x28, 0x7a,
	0x5a, 0x51, 0x74, 0xb7, 0xa6, 0xa5, 0xe5, 0x9a, 0x96, 0x1e, 0xd7, 0xb4, 0x04, 0x8d, 0x71, 0xe0,
	0x1b, 0x36, 0x73, 0xa3, 0xd8, 0x88, 0x78, 0xb8, 0xe0, 0xa1, 0x71, 0xc1, 0x04, 0x1b, 0x55, 0xe5,
	0x8f, 0xf5, 0xff, 0x39, 0x00, 0x00, 0xff, 0xff, 0x59, 0x67, 0x56, 0xbd, 0x77, 0x03, 0x00, 0x00,
}

func (m *TargetStrategy_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetStrategy_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetStrategy_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyID) > 0 {
		dAtA2 := make([]byte, len(m.StrategyID)*10)
		var j1 int
		for _, num := range m.StrategyID {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x12
	}
	if m.SkillID != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.SkillID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StrategyBase_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StrategyBase_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StrategyBase_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Param2 != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.Param2))
		i--
		dAtA[i] = 0x30
	}
	if m.Param1 != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.Param1))
		i--
		dAtA[i] = 0x28
	}
	if m.Camp != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.Camp))
		i--
		dAtA[i] = 0x20
	}
	if m.CalcType != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.CalcType))
		i--
		dAtA[i] = 0x18
	}
	if m.StrategyType != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.StrategyType))
		i--
		dAtA[i] = 0x10
	}
	if m.StrategyID != 0 {
		i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(m.StrategyID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TargetStrategy_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TargetStrategy_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TargetStrategy_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StrategyBase_ConfigItems) > 0 {
		for k := range m.StrategyBase_ConfigItems {
			v := m.StrategyBase_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TargetStrategy_ConfigItems) > 0 {
		for k := range m.TargetStrategy_ConfigItems {
			v := m.TargetStrategy_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTargetStrategy_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTargetStrategy_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovTargetStrategy_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TargetStrategy_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SkillID != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.SkillID))
	}
	if len(m.StrategyID) > 0 {
		l = 0
		for _, e := range m.StrategyID {
			l += sovTargetStrategy_Config(uint64(e))
		}
		n += 1 + sovTargetStrategy_Config(uint64(l)) + l
	}
	return n
}

func (m *StrategyBase_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StrategyID != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.StrategyID))
	}
	if m.StrategyType != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.StrategyType))
	}
	if m.CalcType != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.CalcType))
	}
	if m.Camp != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.Camp))
	}
	if m.Param1 != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.Param1))
	}
	if m.Param2 != 0 {
		n += 1 + sovTargetStrategy_Config(uint64(m.Param2))
	}
	return n
}

func (m *TargetStrategy_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TargetStrategy_ConfigItems) > 0 {
		for k, v := range m.TargetStrategy_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTargetStrategy_Config(uint64(l))
			}
			mapEntrySize := 1 + sovTargetStrategy_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovTargetStrategy_Config(uint64(mapEntrySize))
		}
	}
	if len(m.StrategyBase_ConfigItems) > 0 {
		for k, v := range m.StrategyBase_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTargetStrategy_Config(uint64(l))
			}
			mapEntrySize := 1 + sovTargetStrategy_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovTargetStrategy_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTargetStrategy_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTargetStrategy_Config(x uint64) (n int) {
	return sovTargetStrategy_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TargetStrategy_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetStrategy_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetStrategy_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetStrategy_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillID", wireType)
			}
			m.SkillID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SkillID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargetStrategy_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.StrategyID = append(m.StrategyID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargetStrategy_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTargetStrategy_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTargetStrategy_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.StrategyID) == 0 {
					m.StrategyID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargetStrategy_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.StrategyID = append(m.StrategyID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargetStrategy_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StrategyBase_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetStrategy_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StrategyBase_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StrategyBase_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyID", wireType)
			}
			m.StrategyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyType", wireType)
			}
			m.StrategyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StrategyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalcType", wireType)
			}
			m.CalcType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CalcType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Camp", wireType)
			}
			m.Camp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Camp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param1", wireType)
			}
			m.Param1 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param1 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Param2", wireType)
			}
			m.Param2 = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Param2 |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTargetStrategy_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TargetStrategy_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTargetStrategy_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TargetStrategy_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TargetStrategy_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetStrategy_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetStrategy_ConfigItems == nil {
				m.TargetStrategy_ConfigItems = make(map[uint32]*TargetStrategy_Config)
			}
			var mapkey uint32
			var mapvalue *TargetStrategy_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargetStrategy_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargetStrategy_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargetStrategy_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TargetStrategy_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTargetStrategy_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.TargetStrategy_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StrategyBase_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StrategyBase_ConfigItems == nil {
				m.StrategyBase_ConfigItems = make(map[uint32]*StrategyBase_Config)
			}
			var mapkey uint32
			var mapvalue *StrategyBase_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTargetStrategy_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargetStrategy_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTargetStrategy_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &StrategyBase_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTargetStrategy_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTargetStrategy_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.StrategyBase_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTargetStrategy_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTargetStrategy_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTargetStrategy_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTargetStrategy_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTargetStrategy_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTargetStrategy_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTargetStrategy_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTargetStrategy_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTargetStrategy_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTargetStrategy_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTargetStrategy_Config = fmt.Errorf("proto: unexpected end of group")
)
