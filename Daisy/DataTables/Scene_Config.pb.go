// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Scene_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Scene_Config struct {
	//* 关卡ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *Scene_Config) Reset()         { *m = Scene_Config{} }
func (m *Scene_Config) String() string { return proto.CompactTextString(m) }
func (*Scene_Config) ProtoMessage()    {}
func (*Scene_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b73bd73945e2a20, []int{0}
}
func (m *Scene_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Scene_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Scene_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Scene_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scene_Config.Merge(m, src)
}
func (m *Scene_Config) XXX_Size() int {
	return m.Size()
}
func (m *Scene_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Scene_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Scene_Config proto.InternalMessageInfo

func (m *Scene_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type BattleArea_Config struct {
	//* 副本进度
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 场景ID
	MapID uint32 `protobuf:"varint,2,opt,name=MapID,proto3" json:"MapID,omitempty"`
	//* 场景进度
	MapLevelID uint32 `protobuf:"varint,3,opt,name=MapLevelID,proto3" json:"MapLevelID,omitempty"`
	//* 怪物的BD(和ElementType对应）
	MonsterBulidID []uint32 `protobuf:"varint,4,rep,packed,name=MonsterBulidID,proto3" json:"MonsterBulidID,omitempty"`
	//* Boss的BD(和ElementType对应）
	BossBulidID []uint32 `protobuf:"varint,5,rep,packed,name=BossBulidID,proto3" json:"BossBulidID,omitempty"`
	//* 怪物ID
	NpcId []uint32 `protobuf:"varint,6,rep,packed,name=NpcId,proto3" json:"NpcId,omitempty"`
	//* 怪物ID
	BossNpcId []uint32 `protobuf:"varint,7,rep,packed,name=BossNpcId,proto3" json:"BossNpcId,omitempty"`
	//* 挑战战斗区域配置
	BossBattleArea uint32 `protobuf:"varint,9,opt,name=BossBattleArea,proto3" json:"BossBattleArea,omitempty"`
	//* 普通阵营buff列表
	NormalFormationBuffList []uint32 `protobuf:"varint,10,rep,packed,name=NormalFormationBuffList,proto3" json:"NormalFormationBuffList,omitempty"`
	//* 挑战阵营buff列表
	BossFormationBuffList []uint32 `protobuf:"varint,11,rep,packed,name=BossFormationBuffList,proto3" json:"BossFormationBuffList,omitempty"`
	//* 挑战BOSS所需门票数
	BossTickets uint32 `protobuf:"varint,13,opt,name=BossTickets,proto3" json:"BossTickets,omitempty"`
	//* 离线收益计算频率
	OfflineDropFreq float64 `protobuf:"fixed64,14,opt,name=OfflineDropFreq,proto3" json:"OfflineDropFreq,omitempty"`
	//* 挂机掉落ID
	DropID uint32 `protobuf:"varint,15,opt,name=DropID,proto3" json:"DropID,omitempty"`
	//* 挂机掉落金币
	DropMoney uint32 `protobuf:"varint,16,opt,name=DropMoney,proto3" json:"DropMoney,omitempty"`
	//* 挂机掉落指挥官经验值
	ActorDropExp uint32 `protobuf:"varint,17,opt,name=ActorDropExp,proto3" json:"ActorDropExp,omitempty"`
	//* 挂机掉落特工经验值
	SpecialDropExp uint32 `protobuf:"varint,18,opt,name=SpecialDropExp,proto3" json:"SpecialDropExp,omitempty"`
	//* 挑战掉落ID
	BossDropID uint32 `protobuf:"varint,19,opt,name=BossDropID,proto3" json:"BossDropID,omitempty"`
	//* 挑战掉落金币
	BossDropMoney uint32 `protobuf:"varint,20,opt,name=BossDropMoney,proto3" json:"BossDropMoney,omitempty"`
	//* 挑战掉落指挥官经验值
	BossActorDropExp uint32 `protobuf:"varint,21,opt,name=BossActorDropExp,proto3" json:"BossActorDropExp,omitempty"`
	//* 挑战掉落特工经验值
	BossSpecialDropExp uint32 `protobuf:"varint,22,opt,name=BossSpecialDropExp,proto3" json:"BossSpecialDropExp,omitempty"`
	//* 关卡分值
	SeasonSceore uint32 `protobuf:"varint,25,opt,name=SeasonSceore,proto3" json:"SeasonSceore,omitempty"`
	//* 关卡难度
	BattleDifficulty uint32 `protobuf:"varint,26,opt,name=BattleDifficulty,proto3" json:"BattleDifficulty,omitempty"`
}

func (m *BattleArea_Config) Reset()         { *m = BattleArea_Config{} }
func (m *BattleArea_Config) String() string { return proto.CompactTextString(m) }
func (*BattleArea_Config) ProtoMessage()    {}
func (*BattleArea_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b73bd73945e2a20, []int{1}
}
func (m *BattleArea_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BattleArea_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BattleArea_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BattleArea_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BattleArea_Config.Merge(m, src)
}
func (m *BattleArea_Config) XXX_Size() int {
	return m.Size()
}
func (m *BattleArea_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_BattleArea_Config.DiscardUnknown(m)
}

var xxx_messageInfo_BattleArea_Config proto.InternalMessageInfo

func (m *BattleArea_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *BattleArea_Config) GetMapID() uint32 {
	if m != nil {
		return m.MapID
	}
	return 0
}

func (m *BattleArea_Config) GetMapLevelID() uint32 {
	if m != nil {
		return m.MapLevelID
	}
	return 0
}

func (m *BattleArea_Config) GetMonsterBulidID() []uint32 {
	if m != nil {
		return m.MonsterBulidID
	}
	return nil
}

func (m *BattleArea_Config) GetBossBulidID() []uint32 {
	if m != nil {
		return m.BossBulidID
	}
	return nil
}

func (m *BattleArea_Config) GetNpcId() []uint32 {
	if m != nil {
		return m.NpcId
	}
	return nil
}

func (m *BattleArea_Config) GetBossNpcId() []uint32 {
	if m != nil {
		return m.BossNpcId
	}
	return nil
}

func (m *BattleArea_Config) GetBossBattleArea() uint32 {
	if m != nil {
		return m.BossBattleArea
	}
	return 0
}

func (m *BattleArea_Config) GetNormalFormationBuffList() []uint32 {
	if m != nil {
		return m.NormalFormationBuffList
	}
	return nil
}

func (m *BattleArea_Config) GetBossFormationBuffList() []uint32 {
	if m != nil {
		return m.BossFormationBuffList
	}
	return nil
}

func (m *BattleArea_Config) GetBossTickets() uint32 {
	if m != nil {
		return m.BossTickets
	}
	return 0
}

func (m *BattleArea_Config) GetOfflineDropFreq() float64 {
	if m != nil {
		return m.OfflineDropFreq
	}
	return 0
}

func (m *BattleArea_Config) GetDropID() uint32 {
	if m != nil {
		return m.DropID
	}
	return 0
}

func (m *BattleArea_Config) GetDropMoney() uint32 {
	if m != nil {
		return m.DropMoney
	}
	return 0
}

func (m *BattleArea_Config) GetActorDropExp() uint32 {
	if m != nil {
		return m.ActorDropExp
	}
	return 0
}

func (m *BattleArea_Config) GetSpecialDropExp() uint32 {
	if m != nil {
		return m.SpecialDropExp
	}
	return 0
}

func (m *BattleArea_Config) GetBossDropID() uint32 {
	if m != nil {
		return m.BossDropID
	}
	return 0
}

func (m *BattleArea_Config) GetBossDropMoney() uint32 {
	if m != nil {
		return m.BossDropMoney
	}
	return 0
}

func (m *BattleArea_Config) GetBossActorDropExp() uint32 {
	if m != nil {
		return m.BossActorDropExp
	}
	return 0
}

func (m *BattleArea_Config) GetBossSpecialDropExp() uint32 {
	if m != nil {
		return m.BossSpecialDropExp
	}
	return 0
}

func (m *BattleArea_Config) GetSeasonSceore() uint32 {
	if m != nil {
		return m.SeasonSceore
	}
	return 0
}

func (m *BattleArea_Config) GetBattleDifficulty() uint32 {
	if m != nil {
		return m.BattleDifficulty
	}
	return 0
}

type Scene_Config_Data struct {
	Scene_ConfigItems      map[uint32]*Scene_Config      `protobuf:"bytes,1,rep,name=Scene_Config_items,json=SceneConfigItems,proto3" json:"Scene_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	BattleArea_ConfigItems map[uint32]*BattleArea_Config `protobuf:"bytes,2,rep,name=BattleArea_Config_items,json=BattleAreaConfigItems,proto3" json:"BattleArea_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Scene_Config_Data) Reset()         { *m = Scene_Config_Data{} }
func (m *Scene_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Scene_Config_Data) ProtoMessage()    {}
func (*Scene_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b73bd73945e2a20, []int{2}
}
func (m *Scene_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Scene_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Scene_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Scene_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scene_Config_Data.Merge(m, src)
}
func (m *Scene_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Scene_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Scene_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Scene_Config_Data proto.InternalMessageInfo

func (m *Scene_Config_Data) GetScene_ConfigItems() map[uint32]*Scene_Config {
	if m != nil {
		return m.Scene_ConfigItems
	}
	return nil
}

func (m *Scene_Config_Data) GetBattleArea_ConfigItems() map[uint32]*BattleArea_Config {
	if m != nil {
		return m.BattleArea_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*Scene_Config)(nil), "DataTables.Scene_Config")
	proto.RegisterType((*BattleArea_Config)(nil), "DataTables.BattleArea_Config")
	proto.RegisterType((*Scene_Config_Data)(nil), "DataTables.Scene_Config_Data")
	proto.RegisterMapType((map[uint32]*BattleArea_Config)(nil), "DataTables.Scene_Config_Data.BattleAreaConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Scene_Config)(nil), "DataTables.Scene_Config_Data.SceneConfigItemsEntry")
}

func init() { proto.RegisterFile("Scene_Config.proto", fileDescriptor_0b73bd73945e2a20) }

var fileDescriptor_0b73bd73945e2a20 = []byte{
	// 598 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x94, 0x4f, 0x6f, 0xda, 0x30,
	0x18, 0xc6, 0x1b, 0x58, 0x99, 0xfa, 0x52, 0x28, 0xbc, 0x2b, 0xad, 0x87, 0xb6, 0x08, 0xa1, 0x69,
	0x42, 0x3b, 0x64, 0x52, 0xd9, 0x01, 0xed, 0x56, 0x96, 0x56, 0x8a, 0x54, 0x3a, 0x09, 0x7a, 0x9d,
	0x90, 0x1b, 0x9c, 0x2a, 0x6a, 0x88, 0xb3, 0xc4, 0xa0, 0xf1, 0x2d, 0xf6, 0x4d, 0xb6, 0x8f, 0xb1,
	0x63, 0x8f, 0x3b, 0x4e, 0xf0, 0x45, 0x26, 0x3b, 0x30, 0xf2, 0x07, 0x76, 0x89, 0xe2, 0xdf, 0xfb,
	0xd8, 0xcf, 0x63, 0xcb, 0xaf, 0x01, 0x47, 0x36, 0xf3, 0xd9, 0xf8, 0x13, 0xf7, 0x1d, 0xf7, 0xc1,
	0x08, 0x42, 0x2e, 0x38, 0x82, 0x49, 0x05, 0xbd, 0xa3, 0xf7, 0x1e, 0x8b, 0xda, 0x3a, 0x1c, 0x27,
	0x15, 0x58, 0x85, 0x82, 0x65, 0x12, 0xad, 0xa5, 0x75, 0x2a, 0xc3, 0x82, 0x65, 0xb6, 0x7f, 0x94,
	0xa0, 0xde, 0xa7, 0x42, 0x78, 0xec, 0x32, 0x64, 0x74, 0x8f, 0x0a, 0x4f, 0xe1, 0x70, 0x40, 0x03,
	0xcb, 0x24, 0x05, 0x85, 0xe2, 0x01, 0xea, 0x00, 0x03, 0x1a, 0xdc, 0xb0, 0x39, 0xf3, 0x2c, 0x93,
	0x14, 0x55, 0x29, 0x41, 0xf0, 0x2d, 0x54, 0x07, 0xdc, 0x8f, 0x04, 0x0b, 0xfb, 0x33, 0xcf, 0x9d,
	0x58, 0x26, 0x79, 0xd6, 0x2a, 0x76, 0x2a, 0xc3, 0x0c, 0xc5, 0x16, 0x94, 0xfb, 0x3c, 0x8a, 0x36,
	0xa2, 0x43, 0x25, 0x4a, 0x22, 0xe9, 0x7f, 0x1b, 0xd8, 0xd6, 0x84, 0x94, 0x54, 0x2d, 0x1e, 0xe0,
	0x2b, 0x38, 0x92, 0xa2, 0xb8, 0xf2, 0x5c, 0x55, 0xb6, 0x40, 0xba, 0xab, 0x25, 0xfe, 0x6d, 0x8e,
	0x1c, 0xa9, 0x84, 0x19, 0x8a, 0x3d, 0x38, 0xbf, 0xe5, 0xe1, 0x94, 0x7a, 0xd7, 0xf2, 0x2b, 0x5c,
	0xee, 0xf7, 0x67, 0x8e, 0x73, 0xe3, 0x46, 0x82, 0x80, 0x5a, 0x73, 0x5f, 0x19, 0x3f, 0x40, 0x43,
	0xae, 0x95, 0x9f, 0x57, 0x56, 0xf3, 0x76, 0x17, 0x37, 0xbb, 0xbd, 0x73, 0xed, 0x47, 0x26, 0x22,
	0x52, 0x51, 0xa1, 0x92, 0x08, 0x3b, 0x70, 0xf2, 0xd9, 0x71, 0x3c, 0xd7, 0x67, 0x66, 0xc8, 0x83,
	0xeb, 0x90, 0x7d, 0x25, 0xd5, 0x96, 0xd6, 0xd1, 0x86, 0x59, 0x8c, 0x67, 0x50, 0x92, 0xff, 0x96,
	0x49, 0x4e, 0xd4, 0x32, 0xeb, 0x91, 0x3c, 0x19, 0xf9, 0x37, 0xe0, 0x3e, 0x5b, 0x90, 0x9a, 0x2a,
	0x6d, 0x01, 0xb6, 0xe1, 0xf8, 0xd2, 0x16, 0x3c, 0x94, 0xe4, 0xea, 0x5b, 0x40, 0xea, 0x4a, 0x90,
	0x62, 0xf2, 0xf4, 0x46, 0x01, 0xb3, 0x5d, 0xea, 0x6d, 0x54, 0x18, 0x9f, 0x5e, 0x9a, 0xca, 0x3b,
	0x20, 0xa3, 0xaf, 0x53, 0xbc, 0x88, 0xef, 0xc0, 0x96, 0xe0, 0x1b, 0xa8, 0x6c, 0x46, 0x71, 0x9a,
	0x53, 0x25, 0x49, 0x43, 0x7c, 0x07, 0x35, 0x09, 0x52, 0xa9, 0x1a, 0x4a, 0x98, 0xe3, 0x68, 0x00,
	0x4a, 0x96, 0x49, 0x77, 0xa6, 0xd4, 0x3b, 0x2a, 0x72, 0xb7, 0x23, 0x46, 0x23, 0xee, 0x8f, 0x6c,
	0xc6, 0x43, 0x46, 0x5e, 0xc6, 0xbb, 0x4d, 0x32, 0xe5, 0xaf, 0x6e, 0x84, 0xe9, 0x3a, 0x8e, 0x6b,
	0xcf, 0x3c, 0xb1, 0x20, 0xcd, 0xb5, 0x7f, 0x86, 0xb7, 0x7f, 0x16, 0xa1, 0x9e, 0x6c, 0xa9, 0xb1,
	0xec, 0x36, 0xa4, 0xe9, 0x4e, 0x1c, 0xbb, 0x82, 0x4d, 0x23, 0xa2, 0xb5, 0x8a, 0x9d, 0xf2, 0x45,
	0xd7, 0xd8, 0x36, 0xa4, 0x91, 0x9b, 0x1a, 0x93, 0x18, 0x58, 0x72, 0xd6, 0x95, 0x2f, 0xc2, 0xc5,
	0xb0, 0x96, 0xc5, 0x18, 0xc0, 0x79, 0xae, 0x53, 0xd7, 0x3e, 0x05, 0xe5, 0xd3, 0xfb, 0xbf, 0xcf,
	0x76, 0x72, 0xce, 0xac, 0xb1, 0xb3, 0xd6, 0xfc, 0x02, 0x8d, 0x9d, 0xe1, 0xb0, 0x06, 0xc5, 0x47,
	0xb6, 0x58, 0x3f, 0x10, 0xf2, 0x17, 0x0d, 0x38, 0x9c, 0x53, 0x6f, 0xc6, 0xd4, 0x0b, 0x51, 0xbe,
	0x20, 0xfb, 0xa2, 0x0c, 0x63, 0xd9, 0xc7, 0x42, 0x4f, 0x6b, 0x3e, 0x40, 0x73, 0x7f, 0xa6, 0x1d,
	0x1e, 0xdd, 0xb4, 0xc7, 0xeb, 0xa4, 0x47, 0xee, 0x64, 0x12, 0x46, 0xfd, 0xf7, 0xbf, 0x96, 0xba,
	0xf6, 0xb4, 0xd4, 0xb5, 0x3f, 0x4b, 0x5d, 0xfb, 0xbe, 0xd2, 0x0f, 0x9e, 0x56, 0xfa, 0xc1, 0xef,
	0x95, 0x7e, 0x00, 0x0d, 0x9b, 0x4f, 0x0d, 0x93, 0xba, 0xd1, 0xc2, 0x88, 0x58, 0x38, 0x67, 0xa1,
	0x31, 0xa1, 0x82, 0xde, 0x97, 0xd4, 0x43, 0xda, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x71, 0x2f,
	0xa0, 0x18, 0x5e, 0x05, 0x00, 0x00,
}

func (m *Scene_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scene_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Scene_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BattleArea_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleArea_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BattleArea_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BattleDifficulty != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BattleDifficulty))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.SeasonSceore != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.SeasonSceore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if m.BossSpecialDropExp != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossSpecialDropExp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.BossActorDropExp != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossActorDropExp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.BossDropMoney != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossDropMoney))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.BossDropID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossDropID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.SpecialDropExp != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.SpecialDropExp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.ActorDropExp != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.ActorDropExp))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.DropMoney != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.DropMoney))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.DropID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.DropID))
		i--
		dAtA[i] = 0x78
	}
	if m.OfflineDropFreq != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.OfflineDropFreq))))
		i--
		dAtA[i] = 0x71
	}
	if m.BossTickets != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossTickets))
		i--
		dAtA[i] = 0x68
	}
	if len(m.BossFormationBuffList) > 0 {
		dAtA2 := make([]byte, len(m.BossFormationBuffList)*10)
		var j1 int
		for _, num := range m.BossFormationBuffList {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintScene_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.NormalFormationBuffList) > 0 {
		dAtA4 := make([]byte, len(m.NormalFormationBuffList)*10)
		var j3 int
		for _, num := range m.NormalFormationBuffList {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintScene_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x52
	}
	if m.BossBattleArea != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.BossBattleArea))
		i--
		dAtA[i] = 0x48
	}
	if len(m.BossNpcId) > 0 {
		dAtA6 := make([]byte, len(m.BossNpcId)*10)
		var j5 int
		for _, num := range m.BossNpcId {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintScene_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NpcId) > 0 {
		dAtA8 := make([]byte, len(m.NpcId)*10)
		var j7 int
		for _, num := range m.NpcId {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintScene_Config(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BossBulidID) > 0 {
		dAtA10 := make([]byte, len(m.BossBulidID)*10)
		var j9 int
		for _, num := range m.BossBulidID {
			for num >= 1<<7 {
				dAtA10[j9] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j9++
			}
			dAtA10[j9] = uint8(num)
			j9++
		}
		i -= j9
		copy(dAtA[i:], dAtA10[:j9])
		i = encodeVarintScene_Config(dAtA, i, uint64(j9))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MonsterBulidID) > 0 {
		dAtA12 := make([]byte, len(m.MonsterBulidID)*10)
		var j11 int
		for _, num := range m.MonsterBulidID {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintScene_Config(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0x22
	}
	if m.MapLevelID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.MapLevelID))
		i--
		dAtA[i] = 0x18
	}
	if m.MapID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.MapID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintScene_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Scene_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scene_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Scene_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BattleArea_ConfigItems) > 0 {
		for k := range m.BattleArea_ConfigItems {
			v := m.BattleArea_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScene_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintScene_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintScene_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Scene_ConfigItems) > 0 {
		for k := range m.Scene_ConfigItems {
			v := m.Scene_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScene_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintScene_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintScene_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintScene_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovScene_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Scene_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovScene_Config(uint64(m.ID))
	}
	return n
}

func (m *BattleArea_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovScene_Config(uint64(m.ID))
	}
	if m.MapID != 0 {
		n += 1 + sovScene_Config(uint64(m.MapID))
	}
	if m.MapLevelID != 0 {
		n += 1 + sovScene_Config(uint64(m.MapLevelID))
	}
	if len(m.MonsterBulidID) > 0 {
		l = 0
		for _, e := range m.MonsterBulidID {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if len(m.BossBulidID) > 0 {
		l = 0
		for _, e := range m.BossBulidID {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if len(m.NpcId) > 0 {
		l = 0
		for _, e := range m.NpcId {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if len(m.BossNpcId) > 0 {
		l = 0
		for _, e := range m.BossNpcId {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if m.BossBattleArea != 0 {
		n += 1 + sovScene_Config(uint64(m.BossBattleArea))
	}
	if len(m.NormalFormationBuffList) > 0 {
		l = 0
		for _, e := range m.NormalFormationBuffList {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if len(m.BossFormationBuffList) > 0 {
		l = 0
		for _, e := range m.BossFormationBuffList {
			l += sovScene_Config(uint64(e))
		}
		n += 1 + sovScene_Config(uint64(l)) + l
	}
	if m.BossTickets != 0 {
		n += 1 + sovScene_Config(uint64(m.BossTickets))
	}
	if m.OfflineDropFreq != 0 {
		n += 9
	}
	if m.DropID != 0 {
		n += 1 + sovScene_Config(uint64(m.DropID))
	}
	if m.DropMoney != 0 {
		n += 2 + sovScene_Config(uint64(m.DropMoney))
	}
	if m.ActorDropExp != 0 {
		n += 2 + sovScene_Config(uint64(m.ActorDropExp))
	}
	if m.SpecialDropExp != 0 {
		n += 2 + sovScene_Config(uint64(m.SpecialDropExp))
	}
	if m.BossDropID != 0 {
		n += 2 + sovScene_Config(uint64(m.BossDropID))
	}
	if m.BossDropMoney != 0 {
		n += 2 + sovScene_Config(uint64(m.BossDropMoney))
	}
	if m.BossActorDropExp != 0 {
		n += 2 + sovScene_Config(uint64(m.BossActorDropExp))
	}
	if m.BossSpecialDropExp != 0 {
		n += 2 + sovScene_Config(uint64(m.BossSpecialDropExp))
	}
	if m.SeasonSceore != 0 {
		n += 2 + sovScene_Config(uint64(m.SeasonSceore))
	}
	if m.BattleDifficulty != 0 {
		n += 2 + sovScene_Config(uint64(m.BattleDifficulty))
	}
	return n
}

func (m *Scene_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Scene_ConfigItems) > 0 {
		for k, v := range m.Scene_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScene_Config(uint64(l))
			}
			mapEntrySize := 1 + sovScene_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovScene_Config(uint64(mapEntrySize))
		}
	}
	if len(m.BattleArea_ConfigItems) > 0 {
		for k, v := range m.BattleArea_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScene_Config(uint64(l))
			}
			mapEntrySize := 1 + sovScene_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovScene_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovScene_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScene_Config(x uint64) (n int) {
	return sovScene_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Scene_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scene_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scene_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleArea_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleArea_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleArea_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapID", wireType)
			}
			m.MapID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MapLevelID", wireType)
			}
			m.MapLevelID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MapLevelID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.MonsterBulidID = append(m.MonsterBulidID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.MonsterBulidID) == 0 {
					m.MonsterBulidID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.MonsterBulidID = append(m.MonsterBulidID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field MonsterBulidID", wireType)
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossBulidID = append(m.BossBulidID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossBulidID) == 0 {
					m.BossBulidID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossBulidID = append(m.BossBulidID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossBulidID", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NpcId = append(m.NpcId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NpcId) == 0 {
					m.NpcId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NpcId = append(m.NpcId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NpcId", wireType)
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossNpcId = append(m.BossNpcId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossNpcId) == 0 {
					m.BossNpcId = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossNpcId = append(m.BossNpcId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossNpcId", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossBattleArea", wireType)
			}
			m.BossBattleArea = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossBattleArea |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NormalFormationBuffList = append(m.NormalFormationBuffList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NormalFormationBuffList) == 0 {
					m.NormalFormationBuffList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NormalFormationBuffList = append(m.NormalFormationBuffList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalFormationBuffList", wireType)
			}
		case 11:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BossFormationBuffList = append(m.BossFormationBuffList, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthScene_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthScene_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BossFormationBuffList) == 0 {
					m.BossFormationBuffList = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BossFormationBuffList = append(m.BossFormationBuffList, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BossFormationBuffList", wireType)
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossTickets", wireType)
			}
			m.BossTickets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossTickets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineDropFreq", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.OfflineDropFreq = float64(math.Float64frombits(v))
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropID", wireType)
			}
			m.DropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropMoney", wireType)
			}
			m.DropMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropMoney |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActorDropExp", wireType)
			}
			m.ActorDropExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ActorDropExp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialDropExp", wireType)
			}
			m.SpecialDropExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialDropExp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossDropID", wireType)
			}
			m.BossDropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossDropID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossDropMoney", wireType)
			}
			m.BossDropMoney = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossDropMoney |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossActorDropExp", wireType)
			}
			m.BossActorDropExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossActorDropExp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BossSpecialDropExp", wireType)
			}
			m.BossSpecialDropExp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BossSpecialDropExp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonSceore", wireType)
			}
			m.SeasonSceore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonSceore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleDifficulty", wireType)
			}
			m.BattleDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BattleDifficulty |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Scene_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scene_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scene_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Scene_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScene_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScene_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Scene_ConfigItems == nil {
				m.Scene_ConfigItems = make(map[uint32]*Scene_Config)
			}
			var mapkey uint32
			var mapvalue *Scene_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScene_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScene_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Scene_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScene_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScene_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Scene_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BattleArea_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScene_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScene_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BattleArea_ConfigItems == nil {
				m.BattleArea_ConfigItems = make(map[uint32]*BattleArea_Config)
			}
			var mapkey uint32
			var mapvalue *BattleArea_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScene_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScene_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BattleArea_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScene_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScene_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BattleArea_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScene_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScene_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScene_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScene_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScene_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScene_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScene_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScene_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScene_Config = fmt.Errorf("proto: unexpected end of group")
)
