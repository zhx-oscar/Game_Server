// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Talent_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BaseTalent_Config struct {
	//* 天赋ID
	TalentID uint32 `protobuf:"varint,1,opt,name=TalentID,proto3" json:"TalentID,omitempty"`
	//* 天赋名
	TalentName string `protobuf:"bytes,2,opt,name=TalentName,proto3" json:"TalentName,omitempty"`
	//* 类型
	TalentType uint32 `protobuf:"varint,3,opt,name=TalentType,proto3" json:"TalentType,omitempty"`
	//* 解锁天赋特工所需等级
	UnlockLevel uint32 `protobuf:"varint,4,opt,name=UnlockLevel,proto3" json:"UnlockLevel,omitempty"`
	//* 等级上限
	MaxLevel uint32 `protobuf:"varint,5,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	//* 装备技能id
	BuffID []uint32 `protobuf:"varint,6,rep,packed,name=BuffID,proto3" json:"BuffID,omitempty"`
}

func (m *BaseTalent_Config) Reset()         { *m = BaseTalent_Config{} }
func (m *BaseTalent_Config) String() string { return proto.CompactTextString(m) }
func (*BaseTalent_Config) ProtoMessage()    {}
func (*BaseTalent_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_2798d1553092a67e, []int{0}
}
func (m *BaseTalent_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BaseTalent_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BaseTalent_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BaseTalent_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BaseTalent_Config.Merge(m, src)
}
func (m *BaseTalent_Config) XXX_Size() int {
	return m.Size()
}
func (m *BaseTalent_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_BaseTalent_Config.DiscardUnknown(m)
}

var xxx_messageInfo_BaseTalent_Config proto.InternalMessageInfo

func (m *BaseTalent_Config) GetTalentID() uint32 {
	if m != nil {
		return m.TalentID
	}
	return 0
}

func (m *BaseTalent_Config) GetTalentName() string {
	if m != nil {
		return m.TalentName
	}
	return ""
}

func (m *BaseTalent_Config) GetTalentType() uint32 {
	if m != nil {
		return m.TalentType
	}
	return 0
}

func (m *BaseTalent_Config) GetUnlockLevel() uint32 {
	if m != nil {
		return m.UnlockLevel
	}
	return 0
}

func (m *BaseTalent_Config) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *BaseTalent_Config) GetBuffID() []uint32 {
	if m != nil {
		return m.BuffID
	}
	return nil
}

type AdvancedTalent_Config struct {
	//* 天赋ID
	TalentID uint32 `protobuf:"varint,1,opt,name=TalentID,proto3" json:"TalentID,omitempty"`
	//* 天赋名
	TalentName string `protobuf:"bytes,2,opt,name=TalentName,proto3" json:"TalentName,omitempty"`
	//* 根天赋id
	RootAdvancedTalentID uint32 `protobuf:"varint,3,opt,name=RootAdvancedTalentID,proto3" json:"RootAdvancedTalentID,omitempty"`
	//* 解锁天赋特工所需等级
	UnlockLevel uint32 `protobuf:"varint,4,opt,name=UnlockLevel,proto3" json:"UnlockLevel,omitempty"`
	//* 解锁天赋所需已学习天赋id
	UnlockCondition []uint32 `protobuf:"varint,5,rep,packed,name=UnlockCondition,proto3" json:"UnlockCondition,omitempty"`
	//* 装备Buffid
	SkillID []uint32 `protobuf:"varint,6,rep,packed,name=SkillID,proto3" json:"SkillID,omitempty"`
}

func (m *AdvancedTalent_Config) Reset()         { *m = AdvancedTalent_Config{} }
func (m *AdvancedTalent_Config) String() string { return proto.CompactTextString(m) }
func (*AdvancedTalent_Config) ProtoMessage()    {}
func (*AdvancedTalent_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_2798d1553092a67e, []int{1}
}
func (m *AdvancedTalent_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AdvancedTalent_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AdvancedTalent_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AdvancedTalent_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AdvancedTalent_Config.Merge(m, src)
}
func (m *AdvancedTalent_Config) XXX_Size() int {
	return m.Size()
}
func (m *AdvancedTalent_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AdvancedTalent_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AdvancedTalent_Config proto.InternalMessageInfo

func (m *AdvancedTalent_Config) GetTalentID() uint32 {
	if m != nil {
		return m.TalentID
	}
	return 0
}

func (m *AdvancedTalent_Config) GetTalentName() string {
	if m != nil {
		return m.TalentName
	}
	return ""
}

func (m *AdvancedTalent_Config) GetRootAdvancedTalentID() uint32 {
	if m != nil {
		return m.RootAdvancedTalentID
	}
	return 0
}

func (m *AdvancedTalent_Config) GetUnlockLevel() uint32 {
	if m != nil {
		return m.UnlockLevel
	}
	return 0
}

func (m *AdvancedTalent_Config) GetUnlockCondition() []uint32 {
	if m != nil {
		return m.UnlockCondition
	}
	return nil
}

func (m *AdvancedTalent_Config) GetSkillID() []uint32 {
	if m != nil {
		return m.SkillID
	}
	return nil
}

type RootAdvancedTalent_Config struct {
	//* 根天赋ID
	RootAdvancedTalentID uint32 `protobuf:"varint,1,opt,name=RootAdvancedTalentID,proto3" json:"RootAdvancedTalentID,omitempty"`
	//* 子天赋id
	ChildAdvandedTalent []uint32 `protobuf:"varint,2,rep,packed,name=ChildAdvandedTalent,proto3" json:"ChildAdvandedTalent,omitempty"`
}

func (m *RootAdvancedTalent_Config) Reset()         { *m = RootAdvancedTalent_Config{} }
func (m *RootAdvancedTalent_Config) String() string { return proto.CompactTextString(m) }
func (*RootAdvancedTalent_Config) ProtoMessage()    {}
func (*RootAdvancedTalent_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_2798d1553092a67e, []int{2}
}
func (m *RootAdvancedTalent_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RootAdvancedTalent_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RootAdvancedTalent_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RootAdvancedTalent_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RootAdvancedTalent_Config.Merge(m, src)
}
func (m *RootAdvancedTalent_Config) XXX_Size() int {
	return m.Size()
}
func (m *RootAdvancedTalent_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_RootAdvancedTalent_Config.DiscardUnknown(m)
}

var xxx_messageInfo_RootAdvancedTalent_Config proto.InternalMessageInfo

func (m *RootAdvancedTalent_Config) GetRootAdvancedTalentID() uint32 {
	if m != nil {
		return m.RootAdvancedTalentID
	}
	return 0
}

func (m *RootAdvancedTalent_Config) GetChildAdvandedTalent() []uint32 {
	if m != nil {
		return m.ChildAdvandedTalent
	}
	return nil
}

type Talent_Config_Data struct {
	BaseTalent_ConfigItems         map[uint32]*BaseTalent_Config         `protobuf:"bytes,1,rep,name=BaseTalent_Config_items,json=BaseTalentConfigItems,proto3" json:"BaseTalent_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AdvancedTalent_ConfigItems     map[uint32]*AdvancedTalent_Config     `protobuf:"bytes,2,rep,name=AdvancedTalent_Config_items,json=AdvancedTalentConfigItems,proto3" json:"AdvancedTalent_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RootAdvancedTalent_ConfigItems map[uint32]*RootAdvancedTalent_Config `protobuf:"bytes,3,rep,name=RootAdvancedTalent_Config_items,json=RootAdvancedTalentConfigItems,proto3" json:"RootAdvancedTalent_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Talent_Config_Data) Reset()         { *m = Talent_Config_Data{} }
func (m *Talent_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Talent_Config_Data) ProtoMessage()    {}
func (*Talent_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_2798d1553092a67e, []int{3}
}
func (m *Talent_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Talent_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Talent_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Talent_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Talent_Config_Data.Merge(m, src)
}
func (m *Talent_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Talent_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Talent_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Talent_Config_Data proto.InternalMessageInfo

func (m *Talent_Config_Data) GetBaseTalent_ConfigItems() map[uint32]*BaseTalent_Config {
	if m != nil {
		return m.BaseTalent_ConfigItems
	}
	return nil
}

func (m *Talent_Config_Data) GetAdvancedTalent_ConfigItems() map[uint32]*AdvancedTalent_Config {
	if m != nil {
		return m.AdvancedTalent_ConfigItems
	}
	return nil
}

func (m *Talent_Config_Data) GetRootAdvancedTalent_ConfigItems() map[uint32]*RootAdvancedTalent_Config {
	if m != nil {
		return m.RootAdvancedTalent_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*BaseTalent_Config)(nil), "DataTables.BaseTalent_Config")
	proto.RegisterType((*AdvancedTalent_Config)(nil), "DataTables.AdvancedTalent_Config")
	proto.RegisterType((*RootAdvancedTalent_Config)(nil), "DataTables.RootAdvancedTalent_Config")
	proto.RegisterType((*Talent_Config_Data)(nil), "DataTables.Talent_Config_Data")
	proto.RegisterMapType((map[uint32]*AdvancedTalent_Config)(nil), "DataTables.Talent_Config_Data.AdvancedTalentConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*BaseTalent_Config)(nil), "DataTables.Talent_Config_Data.BaseTalentConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*RootAdvancedTalent_Config)(nil), "DataTables.Talent_Config_Data.RootAdvancedTalentConfigItemsEntry")
}

func init() { proto.RegisterFile("Talent_Config.proto", fileDescriptor_2798d1553092a67e) }

var fileDescriptor_2798d1553092a67e = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x31, 0x09, 0x30, 0xd1, 0x09, 0xd8, 0x23, 0xb0, 0x17, 0x74, 0xc6, 0x58, 0x42,
	0x72, 0x65, 0x50, 0xae, 0xe0, 0x9f, 0x28, 0x2e, 0x31, 0x45, 0x24, 0xa0, 0x30, 0xa1, 0x8e, 0xf6,
	0xe2, 0xcd, 0x61, 0xc5, 0xf1, 0x1e, 0xb1, 0x2f, 0x90, 0x82, 0x82, 0x92, 0x8e, 0x97, 0x42, 0xa2,
	0xbc, 0x92, 0x12, 0x25, 0xa2, 0xe4, 0x1d, 0x50, 0x76, 0xed, 0x64, 0x8d, 0xed, 0x84, 0x82, 0xce,
	0x33, 0xdf, 0xee, 0xfc, 0xbe, 0x99, 0x1d, 0x19, 0xf6, 0xfb, 0x34, 0x60, 0x61, 0x3c, 0xe8, 0xf2,
	0x70, 0xe4, 0x9f, 0xda, 0x67, 0x53, 0x1e, 0x73, 0x0c, 0x0e, 0x8d, 0x69, 0x9f, 0x9e, 0x04, 0x2c,
	0x32, 0xbf, 0x21, 0xb8, 0xd1, 0xa1, 0x11, 0xcb, 0x9c, 0xc3, 0x2d, 0xb8, 0x22, 0x13, 0x3d, 0x87,
	0x20, 0x03, 0x59, 0x7b, 0xee, 0x3a, 0xc6, 0x3a, 0x80, 0xfc, 0x7e, 0x4d, 0x27, 0x8c, 0x54, 0x0d,
	0x64, 0x5d, 0x75, 0x95, 0xcc, 0x46, 0xef, 0xcf, 0xcf, 0x18, 0xd1, 0xc4, 0x6d, 0x25, 0x83, 0x0d,
	0x68, 0xbc, 0x0d, 0x03, 0x3e, 0x1c, 0xbf, 0x64, 0x33, 0x16, 0x90, 0x4b, 0xe2, 0x80, 0x9a, 0x5a,
	0xd1, 0x5f, 0xd1, 0x8f, 0x52, 0xae, 0x49, 0x7a, 0x1a, 0xe3, 0x5b, 0x50, 0xef, 0x9c, 0x8f, 0x46,
	0x3d, 0x87, 0xd4, 0x0d, 0xcd, 0xda, 0x73, 0x93, 0xc8, 0xfc, 0x8d, 0xa0, 0x79, 0xec, 0xcd, 0x68,
	0x38, 0x64, 0xde, 0xff, 0xeb, 0xa5, 0x0d, 0x37, 0x5d, 0xce, 0xe3, 0x6c, 0xe1, 0x9e, 0x93, 0x74,
	0x55, 0xa8, 0xfd, 0x43, 0x7f, 0x16, 0x5c, 0x93, 0x61, 0x97, 0x87, 0x9e, 0x1f, 0xfb, 0x3c, 0x24,
	0x35, 0xd1, 0xcc, 0xdf, 0x69, 0x4c, 0xe0, 0xf2, 0x9b, 0xb1, 0x1f, 0x04, 0xeb, 0x76, 0xd3, 0xd0,
	0xfc, 0x8c, 0xe0, 0x20, 0x8f, 0x4f, 0x7b, 0x2e, 0xf3, 0x8d, 0xb6, 0xf8, 0x7e, 0x08, 0xfb, 0xdd,
	0x77, 0x7e, 0xe0, 0x09, 0xc1, 0x4b, 0x05, 0x52, 0x15, 0xdc, 0x22, 0xc9, 0xfc, 0x55, 0x03, 0x9c,
	0xe1, 0x0e, 0x56, 0x8b, 0x85, 0xdf, 0xc3, 0xed, 0xdc, 0x46, 0x0d, 0xfc, 0x98, 0x4d, 0x22, 0x82,
	0x0c, 0xcd, 0x6a, 0xb4, 0x9f, 0xd8, 0x9b, 0x05, 0xb4, 0xf3, 0x05, 0xec, 0xcd, 0x6d, 0x99, 0xed,
	0xad, 0xee, 0xbe, 0x08, 0xe3, 0xe9, 0xdc, 0x6d, 0x16, 0x6a, 0xf8, 0x13, 0xdc, 0x29, 0x1c, 0x44,
	0x82, 0xad, 0x0a, 0xec, 0xf3, 0x1d, 0xd8, 0x6c, 0x85, 0x1c, 0xfa, 0xa0, 0x54, 0xc7, 0x5f, 0x10,
	0xdc, 0x2d, 0x7d, 0x8c, 0xc4, 0x83, 0x26, 0x3c, 0x1c, 0xef, 0xf0, 0x90, 0xaf, 0x92, 0xf3, 0x71,
	0xb8, 0xf5, 0x4c, 0xeb, 0x14, 0x5a, 0xe5, 0xf3, 0xc3, 0xd7, 0x41, 0x1b, 0xb3, 0x79, 0xb2, 0x07,
	0xab, 0x4f, 0x7c, 0x04, 0xb5, 0x19, 0x0d, 0xce, 0xe5, 0xf6, 0x37, 0xda, 0x87, 0xaa, 0xc1, 0xdc,
	0x33, 0xba, 0xf2, 0xec, 0xd3, 0xea, 0x63, 0xd4, 0xe2, 0xa0, 0x6f, 0x77, 0x5a, 0x00, 0x7b, 0x94,
	0x85, 0xdd, 0x53, 0x61, 0x85, 0xc3, 0x53, 0x81, 0x1f, 0xc0, 0xdc, 0x3d, 0x9e, 0x02, 0xe8, 0xb3,
	0x2c, 0xf4, 0xbe, 0x0a, 0x2d, 0x7d, 0x35, 0x05, 0xdc, 0x79, 0xf0, 0x7d, 0xa1, 0xa3, 0x8b, 0x85,
	0x8e, 0x7e, 0x2e, 0x74, 0xf4, 0x75, 0xa9, 0x57, 0x2e, 0x96, 0x7a, 0xe5, 0xc7, 0x52, 0xaf, 0x40,
	0x73, 0xc8, 0x27, 0xb6, 0x43, 0xfd, 0x68, 0x6e, 0x47, 0x6c, 0x3a, 0x63, 0x53, 0xdb, 0xa3, 0x31,
	0x3d, 0xa9, 0x8b, 0xff, 0xec, 0xd1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x34, 0x59, 0x11, 0x71,
	0x7e, 0x05, 0x00, 0x00,
}

func (m *BaseTalent_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BaseTalent_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BaseTalent_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BuffID) > 0 {
		dAtA2 := make([]byte, len(m.BuffID)*10)
		var j1 int
		for _, num := range m.BuffID {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintTalent_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x32
	}
	if m.MaxLevel != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.MaxLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.UnlockLevel != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.UnlockLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.TalentType != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.TalentType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TalentName) > 0 {
		i -= len(m.TalentName)
		copy(dAtA[i:], m.TalentName)
		i = encodeVarintTalent_Config(dAtA, i, uint64(len(m.TalentName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TalentID != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.TalentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AdvancedTalent_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AdvancedTalent_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AdvancedTalent_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SkillID) > 0 {
		dAtA4 := make([]byte, len(m.SkillID)*10)
		var j3 int
		for _, num := range m.SkillID {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintTalent_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x32
	}
	if len(m.UnlockCondition) > 0 {
		dAtA6 := make([]byte, len(m.UnlockCondition)*10)
		var j5 int
		for _, num := range m.UnlockCondition {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintTalent_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x2a
	}
	if m.UnlockLevel != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.UnlockLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.RootAdvancedTalentID != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.RootAdvancedTalentID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TalentName) > 0 {
		i -= len(m.TalentName)
		copy(dAtA[i:], m.TalentName)
		i = encodeVarintTalent_Config(dAtA, i, uint64(len(m.TalentName)))
		i--
		dAtA[i] = 0x12
	}
	if m.TalentID != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.TalentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RootAdvancedTalent_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RootAdvancedTalent_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RootAdvancedTalent_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChildAdvandedTalent) > 0 {
		dAtA8 := make([]byte, len(m.ChildAdvandedTalent)*10)
		var j7 int
		for _, num := range m.ChildAdvandedTalent {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintTalent_Config(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x12
	}
	if m.RootAdvancedTalentID != 0 {
		i = encodeVarintTalent_Config(dAtA, i, uint64(m.RootAdvancedTalentID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Talent_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Talent_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Talent_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RootAdvancedTalent_ConfigItems) > 0 {
		for k := range m.RootAdvancedTalent_ConfigItems {
			v := m.RootAdvancedTalent_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.AdvancedTalent_ConfigItems) > 0 {
		for k := range m.AdvancedTalent_ConfigItems {
			v := m.AdvancedTalent_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BaseTalent_ConfigItems) > 0 {
		for k := range m.BaseTalent_ConfigItems {
			v := m.BaseTalent_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTalent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintTalent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintTalent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTalent_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovTalent_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BaseTalent_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TalentID != 0 {
		n += 1 + sovTalent_Config(uint64(m.TalentID))
	}
	l = len(m.TalentName)
	if l > 0 {
		n += 1 + l + sovTalent_Config(uint64(l))
	}
	if m.TalentType != 0 {
		n += 1 + sovTalent_Config(uint64(m.TalentType))
	}
	if m.UnlockLevel != 0 {
		n += 1 + sovTalent_Config(uint64(m.UnlockLevel))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovTalent_Config(uint64(m.MaxLevel))
	}
	if len(m.BuffID) > 0 {
		l = 0
		for _, e := range m.BuffID {
			l += sovTalent_Config(uint64(e))
		}
		n += 1 + sovTalent_Config(uint64(l)) + l
	}
	return n
}

func (m *AdvancedTalent_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TalentID != 0 {
		n += 1 + sovTalent_Config(uint64(m.TalentID))
	}
	l = len(m.TalentName)
	if l > 0 {
		n += 1 + l + sovTalent_Config(uint64(l))
	}
	if m.RootAdvancedTalentID != 0 {
		n += 1 + sovTalent_Config(uint64(m.RootAdvancedTalentID))
	}
	if m.UnlockLevel != 0 {
		n += 1 + sovTalent_Config(uint64(m.UnlockLevel))
	}
	if len(m.UnlockCondition) > 0 {
		l = 0
		for _, e := range m.UnlockCondition {
			l += sovTalent_Config(uint64(e))
		}
		n += 1 + sovTalent_Config(uint64(l)) + l
	}
	if len(m.SkillID) > 0 {
		l = 0
		for _, e := range m.SkillID {
			l += sovTalent_Config(uint64(e))
		}
		n += 1 + sovTalent_Config(uint64(l)) + l
	}
	return n
}

func (m *RootAdvancedTalent_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RootAdvancedTalentID != 0 {
		n += 1 + sovTalent_Config(uint64(m.RootAdvancedTalentID))
	}
	if len(m.ChildAdvandedTalent) > 0 {
		l = 0
		for _, e := range m.ChildAdvandedTalent {
			l += sovTalent_Config(uint64(e))
		}
		n += 1 + sovTalent_Config(uint64(l)) + l
	}
	return n
}

func (m *Talent_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaseTalent_ConfigItems) > 0 {
		for k, v := range m.BaseTalent_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovTalent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent_Config(uint64(mapEntrySize))
		}
	}
	if len(m.AdvancedTalent_ConfigItems) > 0 {
		for k, v := range m.AdvancedTalent_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovTalent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent_Config(uint64(mapEntrySize))
		}
	}
	if len(m.RootAdvancedTalent_ConfigItems) > 0 {
		for k, v := range m.RootAdvancedTalent_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTalent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovTalent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovTalent_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovTalent_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTalent_Config(x uint64) (n int) {
	return sovTalent_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BaseTalent_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BaseTalent_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BaseTalent_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentID", wireType)
			}
			m.TalentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TalentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentType", wireType)
			}
			m.TalentType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockLevel", wireType)
			}
			m.UnlockLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BuffID = append(m.BuffID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BuffID) == 0 {
					m.BuffID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BuffID = append(m.BuffID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AdvancedTalent_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AdvancedTalent_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AdvancedTalent_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentID", wireType)
			}
			m.TalentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TalentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TalentName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTalent_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TalentName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootAdvancedTalentID", wireType)
			}
			m.RootAdvancedTalentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootAdvancedTalentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockLevel", wireType)
			}
			m.UnlockLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnlockLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.UnlockCondition = append(m.UnlockCondition, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.UnlockCondition) == 0 {
					m.UnlockCondition = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.UnlockCondition = append(m.UnlockCondition, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field UnlockCondition", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SkillID = append(m.SkillID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SkillID) == 0 {
					m.SkillID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SkillID = append(m.SkillID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillID", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RootAdvancedTalent_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RootAdvancedTalent_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RootAdvancedTalent_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootAdvancedTalentID", wireType)
			}
			m.RootAdvancedTalentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RootAdvancedTalentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ChildAdvandedTalent = append(m.ChildAdvandedTalent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTalent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTalent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ChildAdvandedTalent) == 0 {
					m.ChildAdvandedTalent = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ChildAdvandedTalent = append(m.ChildAdvandedTalent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildAdvandedTalent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTalent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Talent_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTalent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Talent_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Talent_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTalent_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BaseTalent_ConfigItems == nil {
				m.BaseTalent_ConfigItems = make(map[uint32]*BaseTalent_Config)
			}
			var mapkey uint32
			var mapvalue *BaseTalent_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BaseTalent_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BaseTalent_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdvancedTalent_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AdvancedTalent_ConfigItems == nil {
				m.AdvancedTalent_ConfigItems = make(map[uint32]*AdvancedTalent_Config)
			}
			var mapkey uint32
			var mapvalue *AdvancedTalent_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AdvancedTalent_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AdvancedTalent_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootAdvancedTalent_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTalent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RootAdvancedTalent_ConfigItems == nil {
				m.RootAdvancedTalent_ConfigItems = make(map[uint32]*RootAdvancedTalent_Config)
			}
			var mapkey uint32
			var mapvalue *RootAdvancedTalent_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTalent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTalent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTalent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &RootAdvancedTalent_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTalent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTalent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RootAdvancedTalent_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTalent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTalent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTalent_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTalent_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTalent_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTalent_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTalent_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTalent_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTalent_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTalent_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTalent_Config = fmt.Errorf("proto: unexpected end of group")
)
