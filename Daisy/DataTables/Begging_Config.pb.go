// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Begging_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Begging_Config struct {
	//* 文本序号
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 出现概率
	Probability uint32 `protobuf:"varint,3,opt,name=Probability,proto3" json:"Probability,omitempty"`
}

func (m *Begging_Config) Reset()         { *m = Begging_Config{} }
func (m *Begging_Config) String() string { return proto.CompactTextString(m) }
func (*Begging_Config) ProtoMessage()    {}
func (*Begging_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb9fc5fc98027bd, []int{0}
}
func (m *Begging_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Begging_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Begging_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Begging_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Begging_Config.Merge(m, src)
}
func (m *Begging_Config) XXX_Size() int {
	return m.Size()
}
func (m *Begging_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Begging_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Begging_Config proto.InternalMessageInfo

func (m *Begging_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Begging_Config) GetProbability() uint32 {
	if m != nil {
		return m.Probability
	}
	return 0
}

type Begging_Config_Data struct {
	Begging_ConfigItems map[uint32]*Begging_Config `protobuf:"bytes,1,rep,name=Begging_Config_items,json=BeggingConfigItems,proto3" json:"Begging_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Begging_Config_Data) Reset()         { *m = Begging_Config_Data{} }
func (m *Begging_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Begging_Config_Data) ProtoMessage()    {}
func (*Begging_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_efb9fc5fc98027bd, []int{1}
}
func (m *Begging_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Begging_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Begging_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Begging_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Begging_Config_Data.Merge(m, src)
}
func (m *Begging_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Begging_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Begging_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Begging_Config_Data proto.InternalMessageInfo

func (m *Begging_Config_Data) GetBegging_ConfigItems() map[uint32]*Begging_Config {
	if m != nil {
		return m.Begging_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*Begging_Config)(nil), "DataTables.Begging_Config")
	proto.RegisterType((*Begging_Config_Data)(nil), "DataTables.Begging_Config_Data")
	proto.RegisterMapType((map[uint32]*Begging_Config)(nil), "DataTables.Begging_Config_Data.BeggingConfigItemsEntry")
}

func init() { proto.RegisterFile("Begging_Config.proto", fileDescriptor_efb9fc5fc98027bd) }

var fileDescriptor_efb9fc5fc98027bd = []byte{
	// 252 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x71, 0x4a, 0x4d, 0x4f,
	0xcf, 0xcc, 0x4b, 0x8f, 0x77, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x72, 0x49, 0x2c, 0x49, 0x0c, 0x49, 0x4c, 0xca, 0x49, 0x2d, 0x56, 0x72, 0xe2, 0xe2,
	0x43, 0x55, 0x23, 0xc4, 0xc7, 0xc5, 0xe4, 0xe9, 0x22, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x1b, 0xc4,
	0xe4, 0xe9, 0x22, 0xa4, 0xc0, 0xc5, 0x1d, 0x50, 0x94, 0x9f, 0x94, 0x98, 0x94, 0x99, 0x93, 0x59,
	0x52, 0x29, 0xc1, 0x0c, 0x96, 0x40, 0x16, 0x52, 0x7a, 0xcc, 0xc8, 0x25, 0x8c, 0x6a, 0x48, 0x3c,
	0xc8, 0x06, 0xa1, 0x4c, 0x74, 0xfb, 0xe3, 0x33, 0x4b, 0x52, 0x73, 0x8b, 0x25, 0x18, 0x15, 0x98,
	0x35, 0xb8, 0x8d, 0xcc, 0xf5, 0x10, 0xce, 0xd0, 0xc3, 0xa2, 0x1d, 0x26, 0x06, 0x11, 0xf2, 0x04,
	0xe9, 0x74, 0xcd, 0x2b, 0x29, 0xaa, 0x0c, 0x12, 0xc2, 0x94, 0x90, 0x4a, 0xe4, 0x12, 0xc7, 0xa1,
	0x5c, 0x48, 0x80, 0x8b, 0x39, 0x3b, 0xb5, 0x12, 0xea, 0x21, 0x10, 0x53, 0xc8, 0x80, 0x8b, 0xb5,
	0x2c, 0x31, 0xa7, 0x34, 0x55, 0x82, 0x49, 0x81, 0x51, 0x83, 0xdb, 0x48, 0x0a, 0xb7, 0x43, 0x82,
	0x20, 0x0a, 0xad, 0x98, 0x2c, 0x18, 0x9d, 0xf4, 0x4f, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e,
	0xf1, 0xc1, 0x23, 0x39, 0xc6, 0x09, 0x8f, 0xe5, 0x18, 0x2e, 0x3c, 0x96, 0x63, 0xb8, 0xf1, 0x58,
	0x8e, 0x81, 0x4b, 0x34, 0x39, 0x3f, 0x57, 0xcf, 0x25, 0x31, 0xb3, 0xb8, 0x52, 0xaf, 0x38, 0xb5,
	0xa8, 0x2c, 0xb5, 0x48, 0x2f, 0x25, 0xb1, 0x24, 0x31, 0x89, 0x0d, 0x1c, 0xda, 0xc6, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xea, 0xc9, 0xe7, 0x0a, 0x85, 0x01, 0x00, 0x00,
}

func (m *Begging_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Begging_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Begging_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Probability != 0 {
		i = encodeVarintBegging_Config(dAtA, i, uint64(m.Probability))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintBegging_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Begging_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Begging_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Begging_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Begging_ConfigItems) > 0 {
		for k := range m.Begging_ConfigItems {
			v := m.Begging_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintBegging_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintBegging_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintBegging_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintBegging_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovBegging_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Begging_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovBegging_Config(uint64(m.ID))
	}
	if m.Probability != 0 {
		n += 1 + sovBegging_Config(uint64(m.Probability))
	}
	return n
}

func (m *Begging_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Begging_ConfigItems) > 0 {
		for k, v := range m.Begging_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBegging_Config(uint64(l))
			}
			mapEntrySize := 1 + sovBegging_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovBegging_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovBegging_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBegging_Config(x uint64) (n int) {
	return sovBegging_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Begging_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBegging_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Begging_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Begging_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBegging_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Probability", wireType)
			}
			m.Probability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBegging_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Probability |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBegging_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBegging_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBegging_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Begging_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBegging_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Begging_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Begging_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Begging_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBegging_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBegging_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBegging_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Begging_ConfigItems == nil {
				m.Begging_ConfigItems = make(map[uint32]*Begging_Config)
			}
			var mapkey uint32
			var mapvalue *Begging_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBegging_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBegging_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBegging_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBegging_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthBegging_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Begging_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBegging_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBegging_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Begging_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBegging_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBegging_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthBegging_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBegging_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBegging_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBegging_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBegging_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBegging_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBegging_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBegging_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBegging_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBegging_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBegging_Config = fmt.Errorf("proto: unexpected end of group")
)
