// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: SpecialAgent_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SpecialAgent_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 特工对应AIID
	AIID uint32 `protobuf:"varint,3,opt,name=AIID,proto3" json:"AIID,omitempty"`
	//* 黑板变量
	BlackBoardKeys string `protobuf:"bytes,4,opt,name=BlackBoardKeys,proto3" json:"BlackBoardKeys,omitempty"`
	//* 是否拥有护盾能力
	ShieldCapability uint32 `protobuf:"varint,6,opt,name=ShieldCapability,proto3" json:"ShieldCapability,omitempty"`
	//* 普攻池
	NormalAttack []uint32 `protobuf:"varint,7,rep,packed,name=NormalAttack,proto3" json:"NormalAttack,omitempty"`
	//* 连段终结
	AddComboAttack uint32 `protobuf:"varint,8,opt,name=AddComboAttack,proto3" json:"AddComboAttack,omitempty"`
	//* 合体技池
	CombineSkills []uint32 `protobuf:"varint,9,rep,packed,name=CombineSkills,proto3" json:"CombineSkills,omitempty"`
	//* 碰撞半径
	CollisionRadius float32 `protobuf:"fixed32,10,opt,name=CollisionRadius,proto3" json:"CollisionRadius,omitempty"`
	//* 角色质量
	Mass uint32 `protobuf:"varint,11,opt,name=Mass,proto3" json:"Mass,omitempty"`
	//* 公共冷却时间ms
	PublicCD uint32 `protobuf:"varint,12,opt,name=PublicCD,proto3" json:"PublicCD,omitempty"`
	//* 走路速度
	WalkSpeed float32 `protobuf:"fixed32,13,opt,name=WalkSpeed,proto3" json:"WalkSpeed,omitempty"`
	//* 跑步速度
	RunSpeed float32 `protobuf:"fixed32,14,opt,name=RunSpeed,proto3" json:"RunSpeed,omitempty"`
	//* 冲刺速度
	FastSpeed float32 `protobuf:"fixed32,15,opt,name=FastSpeed,proto3" json:"FastSpeed,omitempty"`
	//* 迂回速度
	LookAtSpeed float32 `protobuf:"fixed32,16,opt,name=LookAtSpeed,proto3" json:"LookAtSpeed,omitempty"`
	//* 迂回后退
	LookAtBackSpeed float32 `protobuf:"fixed32,17,opt,name=LookAtBackSpeed,proto3" json:"LookAtBackSpeed,omitempty"`
	//* 最大速度
	MaxSpeed float32 `protobuf:"fixed32,18,opt,name=MaxSpeed,proto3" json:"MaxSpeed,omitempty"`
	//* 转向速度
	TurnSpeed float32 `protobuf:"fixed32,19,opt,name=TurnSpeed,proto3" json:"TurnSpeed,omitempty"`
	//* 受击表现配置
	AnimatorController string `protobuf:"bytes,20,opt,name=AnimatorController,proto3" json:"AnimatorController,omitempty"`
	//* 闪避距离
	DodgeDist float32 `protobuf:"fixed32,21,opt,name=DodgeDist,proto3" json:"DodgeDist,omitempty"`
	//* 闪避时间ms
	DodgeTime uint32 `protobuf:"varint,22,opt,name=DodgeTime,proto3" json:"DodgeTime,omitempty"`
	//* 索引Prop属性表的数据id
	PropValueID uint32 `protobuf:"varint,23,opt,name=PropValueID,proto3" json:"PropValueID,omitempty"`
	//* 冲刺距离
	FastDist float32 `protobuf:"fixed32,24,opt,name=FastDist,proto3" json:"FastDist,omitempty"`
	//* 天赋池
	Talent []uint32 `protobuf:"varint,28,rep,packed,name=Talent,proto3" json:"Talent,omitempty"`
}

func (m *SpecialAgent_Config) Reset()         { *m = SpecialAgent_Config{} }
func (m *SpecialAgent_Config) String() string { return proto.CompactTextString(m) }
func (*SpecialAgent_Config) ProtoMessage()    {}
func (*SpecialAgent_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad8418bf5a56ea2, []int{0}
}
func (m *SpecialAgent_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialAgent_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialAgent_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialAgent_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialAgent_Config.Merge(m, src)
}
func (m *SpecialAgent_Config) XXX_Size() int {
	return m.Size()
}
func (m *SpecialAgent_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialAgent_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialAgent_Config proto.InternalMessageInfo

func (m *SpecialAgent_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SpecialAgent_Config) GetAIID() uint32 {
	if m != nil {
		return m.AIID
	}
	return 0
}

func (m *SpecialAgent_Config) GetBlackBoardKeys() string {
	if m != nil {
		return m.BlackBoardKeys
	}
	return ""
}

func (m *SpecialAgent_Config) GetShieldCapability() uint32 {
	if m != nil {
		return m.ShieldCapability
	}
	return 0
}

func (m *SpecialAgent_Config) GetNormalAttack() []uint32 {
	if m != nil {
		return m.NormalAttack
	}
	return nil
}

func (m *SpecialAgent_Config) GetAddComboAttack() uint32 {
	if m != nil {
		return m.AddComboAttack
	}
	return 0
}

func (m *SpecialAgent_Config) GetCombineSkills() []uint32 {
	if m != nil {
		return m.CombineSkills
	}
	return nil
}

func (m *SpecialAgent_Config) GetCollisionRadius() float32 {
	if m != nil {
		return m.CollisionRadius
	}
	return 0
}

func (m *SpecialAgent_Config) GetMass() uint32 {
	if m != nil {
		return m.Mass
	}
	return 0
}

func (m *SpecialAgent_Config) GetPublicCD() uint32 {
	if m != nil {
		return m.PublicCD
	}
	return 0
}

func (m *SpecialAgent_Config) GetWalkSpeed() float32 {
	if m != nil {
		return m.WalkSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetRunSpeed() float32 {
	if m != nil {
		return m.RunSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetFastSpeed() float32 {
	if m != nil {
		return m.FastSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetLookAtSpeed() float32 {
	if m != nil {
		return m.LookAtSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetLookAtBackSpeed() float32 {
	if m != nil {
		return m.LookAtBackSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetMaxSpeed() float32 {
	if m != nil {
		return m.MaxSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetTurnSpeed() float32 {
	if m != nil {
		return m.TurnSpeed
	}
	return 0
}

func (m *SpecialAgent_Config) GetAnimatorController() string {
	if m != nil {
		return m.AnimatorController
	}
	return ""
}

func (m *SpecialAgent_Config) GetDodgeDist() float32 {
	if m != nil {
		return m.DodgeDist
	}
	return 0
}

func (m *SpecialAgent_Config) GetDodgeTime() uint32 {
	if m != nil {
		return m.DodgeTime
	}
	return 0
}

func (m *SpecialAgent_Config) GetPropValueID() uint32 {
	if m != nil {
		return m.PropValueID
	}
	return 0
}

func (m *SpecialAgent_Config) GetFastDist() float32 {
	if m != nil {
		return m.FastDist
	}
	return 0
}

func (m *SpecialAgent_Config) GetTalent() []uint32 {
	if m != nil {
		return m.Talent
	}
	return nil
}

type SpecialAgentConst_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 值
	Value uint32 `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (m *SpecialAgentConst_Config) Reset()         { *m = SpecialAgentConst_Config{} }
func (m *SpecialAgentConst_Config) String() string { return proto.CompactTextString(m) }
func (*SpecialAgentConst_Config) ProtoMessage()    {}
func (*SpecialAgentConst_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad8418bf5a56ea2, []int{1}
}
func (m *SpecialAgentConst_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialAgentConst_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialAgentConst_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialAgentConst_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialAgentConst_Config.Merge(m, src)
}
func (m *SpecialAgentConst_Config) XXX_Size() int {
	return m.Size()
}
func (m *SpecialAgentConst_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialAgentConst_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialAgentConst_Config proto.InternalMessageInfo

func (m *SpecialAgentConst_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SpecialAgentConst_Config) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

type Upgrade_Config struct {
	//* 等级
	Level uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	//* 升到此等级需要的经验值
	Exp uint32 `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
	//* 升到此等级所获得的的科技点数
	TechnologyPointNum uint32 `protobuf:"varint,3,opt,name=TechnologyPointNum,proto3" json:"TechnologyPointNum,omitempty"`
}

func (m *Upgrade_Config) Reset()         { *m = Upgrade_Config{} }
func (m *Upgrade_Config) String() string { return proto.CompactTextString(m) }
func (*Upgrade_Config) ProtoMessage()    {}
func (*Upgrade_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad8418bf5a56ea2, []int{2}
}
func (m *Upgrade_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Upgrade_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Upgrade_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Upgrade_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upgrade_Config.Merge(m, src)
}
func (m *Upgrade_Config) XXX_Size() int {
	return m.Size()
}
func (m *Upgrade_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Upgrade_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Upgrade_Config proto.InternalMessageInfo

func (m *Upgrade_Config) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Upgrade_Config) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

func (m *Upgrade_Config) GetTechnologyPointNum() uint32 {
	if m != nil {
		return m.TechnologyPointNum
	}
	return 0
}

type Describe_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 创角可选
	Bornable uint32 `protobuf:"varint,2,opt,name=Bornable,proto3" json:"Bornable,omitempty"`
}

func (m *Describe_Config) Reset()         { *m = Describe_Config{} }
func (m *Describe_Config) String() string { return proto.CompactTextString(m) }
func (*Describe_Config) ProtoMessage()    {}
func (*Describe_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad8418bf5a56ea2, []int{3}
}
func (m *Describe_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Describe_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Describe_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Describe_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Describe_Config.Merge(m, src)
}
func (m *Describe_Config) XXX_Size() int {
	return m.Size()
}
func (m *Describe_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Describe_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Describe_Config proto.InternalMessageInfo

func (m *Describe_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Describe_Config) GetBornable() uint32 {
	if m != nil {
		return m.Bornable
	}
	return 0
}

type SpecialAgent_Config_Data struct {
	SpecialAgent_ConfigItems      map[uint32]*SpecialAgent_Config      `protobuf:"bytes,1,rep,name=SpecialAgent_Config_items,json=SpecialAgentConfigItems,proto3" json:"SpecialAgent_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SpecialAgentConst_ConfigItems map[uint32]*SpecialAgentConst_Config `protobuf:"bytes,2,rep,name=SpecialAgentConst_Config_items,json=SpecialAgentConstConfigItems,proto3" json:"SpecialAgentConst_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Upgrade_ConfigItems           map[uint32]*Upgrade_Config           `protobuf:"bytes,3,rep,name=Upgrade_Config_items,json=UpgradeConfigItems,proto3" json:"Upgrade_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Describe_ConfigItems          map[uint32]*Describe_Config          `protobuf:"bytes,4,rep,name=Describe_Config_items,json=DescribeConfigItems,proto3" json:"Describe_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *SpecialAgent_Config_Data) Reset()         { *m = SpecialAgent_Config_Data{} }
func (m *SpecialAgent_Config_Data) String() string { return proto.CompactTextString(m) }
func (*SpecialAgent_Config_Data) ProtoMessage()    {}
func (*SpecialAgent_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ad8418bf5a56ea2, []int{4}
}
func (m *SpecialAgent_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpecialAgent_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpecialAgent_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpecialAgent_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpecialAgent_Config_Data.Merge(m, src)
}
func (m *SpecialAgent_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *SpecialAgent_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_SpecialAgent_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_SpecialAgent_Config_Data proto.InternalMessageInfo

func (m *SpecialAgent_Config_Data) GetSpecialAgent_ConfigItems() map[uint32]*SpecialAgent_Config {
	if m != nil {
		return m.SpecialAgent_ConfigItems
	}
	return nil
}

func (m *SpecialAgent_Config_Data) GetSpecialAgentConst_ConfigItems() map[uint32]*SpecialAgentConst_Config {
	if m != nil {
		return m.SpecialAgentConst_ConfigItems
	}
	return nil
}

func (m *SpecialAgent_Config_Data) GetUpgrade_ConfigItems() map[uint32]*Upgrade_Config {
	if m != nil {
		return m.Upgrade_ConfigItems
	}
	return nil
}

func (m *SpecialAgent_Config_Data) GetDescribe_ConfigItems() map[uint32]*Describe_Config {
	if m != nil {
		return m.Describe_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*SpecialAgent_Config)(nil), "DataTables.SpecialAgent_Config")
	proto.RegisterType((*SpecialAgentConst_Config)(nil), "DataTables.SpecialAgentConst_Config")
	proto.RegisterType((*Upgrade_Config)(nil), "DataTables.Upgrade_Config")
	proto.RegisterType((*Describe_Config)(nil), "DataTables.Describe_Config")
	proto.RegisterType((*SpecialAgent_Config_Data)(nil), "DataTables.SpecialAgent_Config_Data")
	proto.RegisterMapType((map[uint32]*Describe_Config)(nil), "DataTables.SpecialAgent_Config_Data.DescribeConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SpecialAgent_Config)(nil), "DataTables.SpecialAgent_Config_Data.SpecialAgentConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SpecialAgentConst_Config)(nil), "DataTables.SpecialAgent_Config_Data.SpecialAgentConstConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Upgrade_Config)(nil), "DataTables.SpecialAgent_Config_Data.UpgradeConfigItemsEntry")
}

func init() { proto.RegisterFile("SpecialAgent_Config.proto", fileDescriptor_5ad8418bf5a56ea2) }

var fileDescriptor_5ad8418bf5a56ea2 = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x41, 0x4f, 0xfb, 0x36,
	0x1c, 0x25, 0x2d, 0xe5, 0x0f, 0xbf, 0xd2, 0xc2, 0x4c, 0x01, 0xaf, 0xab, 0xba, 0xae, 0x42, 0x53,
	0xb5, 0x43, 0xb6, 0x31, 0x4d, 0x9a, 0xd0, 0x90, 0xd6, 0x36, 0x20, 0x55, 0x03, 0x84, 0xd2, 0x6e,
	0x3b, 0x22, 0x37, 0x31, 0xc5, 0xaa, 0x1b, 0x77, 0x49, 0x8a, 0xe8, 0x61, 0xdf, 0x60, 0x87, 0x7d,
	0x9b, 0x7d, 0x85, 0x1d, 0x39, 0xee, 0x38, 0xc1, 0xa7, 0xd8, 0x6d, 0xb2, 0x93, 0x86, 0xa4, 0x4d,
	0x00, 0xed, 0xe6, 0xdf, 0x7b, 0xf6, 0x7b, 0xcf, 0x3f, 0xff, 0x9a, 0xc2, 0xc7, 0xfd, 0x29, 0xb5,
	0x18, 0xe1, 0xed, 0x11, 0x75, 0xfc, 0x9b, 0xae, 0x70, 0x6e, 0xd9, 0x48, 0x9f, 0xba, 0xc2, 0x17,
	0x08, 0x0c, 0xe2, 0x93, 0x01, 0x19, 0x72, 0xea, 0x35, 0xff, 0x2d, 0xc0, 0x5e, 0xca, 0x4e, 0x54,
	0x86, 0x5c, 0xcf, 0xc0, 0x5a, 0x43, 0x6b, 0x95, 0xcc, 0x5c, 0xcf, 0x40, 0x08, 0xd6, 0xdb, 0xbd,
	0x9e, 0x81, 0xf3, 0x0a, 0x51, 0x6b, 0xf4, 0x39, 0x94, 0x3b, 0x9c, 0x58, 0xe3, 0x8e, 0x20, 0xae,
	0xfd, 0x23, 0x9d, 0x7b, 0x78, 0xbd, 0xa1, 0xb5, 0xb6, 0xcc, 0x25, 0x14, 0x7d, 0x01, 0xbb, 0xfd,
	0x3b, 0x46, 0xb9, 0xdd, 0x25, 0x53, 0x32, 0x64, 0x9c, 0xf9, 0x73, 0xbc, 0xa1, 0x74, 0x56, 0x70,
	0xd4, 0x84, 0xed, 0x2b, 0xe1, 0x4e, 0x08, 0x6f, 0xfb, 0x3e, 0xb1, 0xc6, 0xf8, 0x43, 0x23, 0xdf,
	0x2a, 0x99, 0x09, 0x4c, 0xfa, 0xb6, 0x6d, 0xbb, 0x2b, 0x26, 0x43, 0x11, 0xee, 0xda, 0x54, 0x6a,
	0x4b, 0x28, 0x3a, 0x82, 0x92, 0x2c, 0x99, 0x43, 0xfb, 0x63, 0xc6, 0xb9, 0x87, 0xb7, 0x94, 0x58,
	0x12, 0x44, 0x2d, 0xd8, 0xe9, 0x0a, 0xce, 0x99, 0xc7, 0x84, 0x63, 0x12, 0x9b, 0xcd, 0x3c, 0x0c,
	0x0d, 0xad, 0x95, 0x33, 0x97, 0x61, 0xd9, 0x83, 0x4b, 0xe2, 0x79, 0xb8, 0x18, 0xf4, 0x40, 0xae,
	0x51, 0x15, 0x36, 0xaf, 0x67, 0x43, 0xce, 0xac, 0xae, 0x81, 0xb7, 0x15, 0x1e, 0xd5, 0xa8, 0x06,
	0x5b, 0xbf, 0x10, 0x3e, 0xee, 0x4f, 0x29, 0xb5, 0x71, 0x49, 0x69, 0xbe, 0x00, 0xf2, 0xa4, 0x39,
	0x73, 0x02, 0xb2, 0xac, 0xc8, 0xa8, 0x96, 0x27, 0xcf, 0x89, 0xe7, 0x07, 0xe4, 0x4e, 0x70, 0x32,
	0x02, 0x50, 0x03, 0x8a, 0x17, 0x42, 0x8c, 0xdb, 0x21, 0xbf, 0xab, 0xf8, 0x38, 0x24, 0xef, 0x14,
	0x94, 0x1d, 0x62, 0x85, 0xfe, 0x1f, 0x05, 0x77, 0x5a, 0x82, 0x65, 0x8a, 0x4b, 0xf2, 0x10, 0x6c,
	0x41, 0x41, 0x8a, 0x45, 0x2d, 0x53, 0x0c, 0x66, 0x6e, 0x18, 0x71, 0x2f, 0x48, 0x11, 0x01, 0x48,
	0x07, 0xd4, 0x76, 0xd8, 0x84, 0xf8, 0xc2, 0xed, 0x0a, 0xc7, 0x77, 0x05, 0xe7, 0xd4, 0xc5, 0x15,
	0x35, 0x01, 0x29, 0x8c, 0x54, 0x33, 0x84, 0x3d, 0xa2, 0x06, 0xf3, 0x7c, 0xbc, 0x1f, 0xa8, 0x45,
	0x40, 0xc4, 0x0e, 0xd8, 0x84, 0xe2, 0x03, 0xd5, 0xc8, 0x17, 0x40, 0xde, 0xf8, 0xda, 0x15, 0xd3,
	0x9f, 0x09, 0x9f, 0xd1, 0x9e, 0x81, 0x0f, 0x15, 0x1f, 0x87, 0xe4, 0x3d, 0x64, 0x83, 0x94, 0x38,
	0x0e, 0xee, 0xb1, 0xa8, 0xd1, 0x01, 0x6c, 0x0c, 0x08, 0xa7, 0x8e, 0x8f, 0x6b, 0x6a, 0x00, 0xc2,
	0xaa, 0xf9, 0x03, 0xe0, 0xf8, 0xe8, 0x77, 0x85, 0xe3, 0x65, 0xce, 0x7f, 0x05, 0x0a, 0xca, 0x0a,
	0xe7, 0x14, 0x14, 0x14, 0xcd, 0x3b, 0x28, 0xff, 0x34, 0x1d, 0xb9, 0xc4, 0xa6, 0x8b, 0x73, 0x15,
	0x28, 0x5c, 0xd0, 0x7b, 0xca, 0xc3, 0xa3, 0x41, 0x81, 0x76, 0x21, 0x7f, 0xf6, 0x30, 0x0d, 0xcf,
	0xca, 0xa5, 0xec, 0xde, 0x80, 0x5a, 0x77, 0x8e, 0xe0, 0x62, 0x34, 0xbf, 0x16, 0xcc, 0xf1, 0xaf,
	0x66, 0x93, 0xf0, 0xd7, 0x95, 0xc2, 0x34, 0x4f, 0x61, 0xc7, 0xa0, 0x9e, 0xe5, 0xb2, 0x21, 0xcd,
	0x8a, 0x58, 0x85, 0xcd, 0x8e, 0x70, 0x1d, 0xf9, 0xbb, 0x0e, 0x9d, 0xa2, 0xba, 0xf9, 0xe7, 0x87,
	0xe4, 0x5d, 0x43, 0x8d, 0x1b, 0xf9, 0x25, 0x40, 0xbf, 0xa5, 0x7e, 0x2c, 0x6e, 0x98, 0x4f, 0x27,
	0x1e, 0xd6, 0x1a, 0xf9, 0x56, 0xf1, 0xb8, 0xad, 0xbf, 0x7c, 0x33, 0xf4, 0x2c, 0x21, 0x7d, 0xa9,
	0x9b, 0xb7, 0x6c, 0xd4, 0x93, 0x1a, 0x67, 0x8e, 0xef, 0xce, 0xcd, 0xc3, 0x0c, 0x16, 0xfd, 0xae,
	0x41, 0x3d, 0xeb, 0x1d, 0xc2, 0x10, 0x39, 0x15, 0xe2, 0xfc, 0xff, 0x84, 0xf0, 0x56, 0x93, 0xd4,
	0x5e, 0xdb, 0x82, 0x1c, 0xa8, 0x24, 0xdf, 0x34, 0xcc, 0x90, 0x57, 0x19, 0xbe, 0x7f, 0x57, 0x86,
	0x50, 0x60, 0xc5, 0x19, 0xad, 0x12, 0xe8, 0x57, 0xd8, 0x5f, 0x7a, 0xd9, 0xd0, 0x70, 0x5d, 0x19,
	0x9e, 0xbe, 0xcb, 0x70, 0xa1, 0xb0, 0xe2, 0xb8, 0x97, 0xc2, 0x54, 0xc7, 0x50, 0x7b, 0xed, 0xa9,
	0xe4, 0xb8, 0x8e, 0xe9, 0x3c, 0x1c, 0x2d, 0xb9, 0x44, 0xdf, 0x42, 0xe1, 0x3e, 0x1a, 0xff, 0xe2,
	0xf1, 0xa7, 0x6f, 0x84, 0x32, 0x83, 0xdd, 0x27, 0xb9, 0xef, 0xb4, 0xea, 0x0c, 0x3e, 0x7b, 0xf3,
	0x49, 0x52, 0x1c, 0x4f, 0x92, 0x8e, 0x47, 0x59, 0x8e, 0xf1, 0x69, 0x89, 0xdb, 0x12, 0x38, 0xcc,
	0x78, 0x85, 0x14, 0xb3, 0xaf, 0x92, 0x66, 0xd5, 0xb8, 0x59, 0x72, 0x18, 0xe2, 0x16, 0x16, 0xe0,
	0xac, 0xbe, 0xa7, 0x78, 0x7c, 0x9d, 0xf4, 0xf8, 0x24, 0xee, 0xb1, 0x34, 0x00, 0x31, 0x93, 0xce,
	0x97, 0x7f, 0x3d, 0xd5, 0xb5, 0xc7, 0xa7, 0xba, 0xf6, 0xcf, 0x53, 0x5d, 0xfb, 0xe3, 0xb9, 0xbe,
	0xf6, 0xf8, 0x5c, 0x5f, 0xfb, 0xfb, 0xb9, 0xbe, 0x06, 0xfb, 0x96, 0x98, 0xe8, 0x06, 0x61, 0xde,
	0x5c, 0xf7, 0xa8, 0x7b, 0x4f, 0x5d, 0xdd, 0x26, 0x3e, 0x19, 0x6e, 0xa8, 0x3f, 0xf9, 0x6f, 0xfe,
	0x0b, 0x00, 0x00, 0xff, 0xff, 0x9c, 0x40, 0xa8, 0x43, 0x01, 0x08, 0x00, 0x00,
}

func (m *SpecialAgent_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialAgent_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialAgent_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Talent) > 0 {
		dAtA2 := make([]byte, len(m.Talent)*10)
		var j1 int
		for _, num := range m.Talent {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xe2
	}
	if m.FastDist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FastDist))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc5
	}
	if m.PropValueID != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.PropValueID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.DodgeTime != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.DodgeTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.DodgeDist != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.DodgeDist))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xad
	}
	if len(m.AnimatorController) > 0 {
		i -= len(m.AnimatorController)
		copy(dAtA[i:], m.AnimatorController)
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(len(m.AnimatorController)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa2
	}
	if m.TurnSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.TurnSpeed))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x9d
	}
	if m.MaxSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxSpeed))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x95
	}
	if m.LookAtBackSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LookAtBackSpeed))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8d
	}
	if m.LookAtSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LookAtSpeed))))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x85
	}
	if m.FastSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.FastSpeed))))
		i--
		dAtA[i] = 0x7d
	}
	if m.RunSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.RunSpeed))))
		i--
		dAtA[i] = 0x75
	}
	if m.WalkSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.WalkSpeed))))
		i--
		dAtA[i] = 0x6d
	}
	if m.PublicCD != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.PublicCD))
		i--
		dAtA[i] = 0x60
	}
	if m.Mass != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.Mass))
		i--
		dAtA[i] = 0x58
	}
	if m.CollisionRadius != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.CollisionRadius))))
		i--
		dAtA[i] = 0x55
	}
	if len(m.CombineSkills) > 0 {
		dAtA4 := make([]byte, len(m.CombineSkills)*10)
		var j3 int
		for _, num := range m.CombineSkills {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x4a
	}
	if m.AddComboAttack != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.AddComboAttack))
		i--
		dAtA[i] = 0x40
	}
	if len(m.NormalAttack) > 0 {
		dAtA6 := make([]byte, len(m.NormalAttack)*10)
		var j5 int
		for _, num := range m.NormalAttack {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x3a
	}
	if m.ShieldCapability != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.ShieldCapability))
		i--
		dAtA[i] = 0x30
	}
	if len(m.BlackBoardKeys) > 0 {
		i -= len(m.BlackBoardKeys)
		copy(dAtA[i:], m.BlackBoardKeys)
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(len(m.BlackBoardKeys)))
		i--
		dAtA[i] = 0x22
	}
	if m.AIID != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.AIID))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialAgentConst_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialAgentConst_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialAgentConst_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Value != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Upgrade_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upgrade_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Upgrade_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TechnologyPointNum != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.TechnologyPointNum))
		i--
		dAtA[i] = 0x18
	}
	if m.Exp != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Describe_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Describe_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Describe_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bornable != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.Bornable))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpecialAgent_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpecialAgent_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpecialAgent_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Describe_ConfigItems) > 0 {
		for k := range m.Describe_ConfigItems {
			v := m.Describe_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Upgrade_ConfigItems) > 0 {
		for k := range m.Upgrade_ConfigItems {
			v := m.Upgrade_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.SpecialAgentConst_ConfigItems) > 0 {
		for k := range m.SpecialAgentConst_ConfigItems {
			v := m.SpecialAgentConst_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SpecialAgent_ConfigItems) > 0 {
		for k := range m.SpecialAgent_ConfigItems {
			v := m.SpecialAgent_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSpecialAgent_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSpecialAgent_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovSpecialAgent_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SpecialAgent_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.ID))
	}
	if m.AIID != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.AIID))
	}
	l = len(m.BlackBoardKeys)
	if l > 0 {
		n += 1 + l + sovSpecialAgent_Config(uint64(l))
	}
	if m.ShieldCapability != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.ShieldCapability))
	}
	if len(m.NormalAttack) > 0 {
		l = 0
		for _, e := range m.NormalAttack {
			l += sovSpecialAgent_Config(uint64(e))
		}
		n += 1 + sovSpecialAgent_Config(uint64(l)) + l
	}
	if m.AddComboAttack != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.AddComboAttack))
	}
	if len(m.CombineSkills) > 0 {
		l = 0
		for _, e := range m.CombineSkills {
			l += sovSpecialAgent_Config(uint64(e))
		}
		n += 1 + sovSpecialAgent_Config(uint64(l)) + l
	}
	if m.CollisionRadius != 0 {
		n += 5
	}
	if m.Mass != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.Mass))
	}
	if m.PublicCD != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.PublicCD))
	}
	if m.WalkSpeed != 0 {
		n += 5
	}
	if m.RunSpeed != 0 {
		n += 5
	}
	if m.FastSpeed != 0 {
		n += 5
	}
	if m.LookAtSpeed != 0 {
		n += 6
	}
	if m.LookAtBackSpeed != 0 {
		n += 6
	}
	if m.MaxSpeed != 0 {
		n += 6
	}
	if m.TurnSpeed != 0 {
		n += 6
	}
	l = len(m.AnimatorController)
	if l > 0 {
		n += 2 + l + sovSpecialAgent_Config(uint64(l))
	}
	if m.DodgeDist != 0 {
		n += 6
	}
	if m.DodgeTime != 0 {
		n += 2 + sovSpecialAgent_Config(uint64(m.DodgeTime))
	}
	if m.PropValueID != 0 {
		n += 2 + sovSpecialAgent_Config(uint64(m.PropValueID))
	}
	if m.FastDist != 0 {
		n += 6
	}
	if len(m.Talent) > 0 {
		l = 0
		for _, e := range m.Talent {
			l += sovSpecialAgent_Config(uint64(e))
		}
		n += 2 + sovSpecialAgent_Config(uint64(l)) + l
	}
	return n
}

func (m *SpecialAgentConst_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.ID))
	}
	if m.Value != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.Value))
	}
	return n
}

func (m *Upgrade_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.Exp))
	}
	if m.TechnologyPointNum != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.TechnologyPointNum))
	}
	return n
}

func (m *Describe_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.ID))
	}
	if m.Bornable != 0 {
		n += 1 + sovSpecialAgent_Config(uint64(m.Bornable))
	}
	return n
}

func (m *SpecialAgent_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpecialAgent_ConfigItems) > 0 {
		for k, v := range m.SpecialAgent_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpecialAgent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSpecialAgent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSpecialAgent_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SpecialAgentConst_ConfigItems) > 0 {
		for k, v := range m.SpecialAgentConst_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpecialAgent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSpecialAgent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSpecialAgent_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Upgrade_ConfigItems) > 0 {
		for k, v := range m.Upgrade_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpecialAgent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSpecialAgent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSpecialAgent_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Describe_ConfigItems) > 0 {
		for k, v := range m.Describe_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSpecialAgent_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSpecialAgent_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSpecialAgent_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSpecialAgent_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSpecialAgent_Config(x uint64) (n int) {
	return sovSpecialAgent_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SpecialAgent_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialAgent_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialAgent_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AIID", wireType)
			}
			m.AIID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AIID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackBoardKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackBoardKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShieldCapability", wireType)
			}
			m.ShieldCapability = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ShieldCapability |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NormalAttack = append(m.NormalAttack, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NormalAttack) == 0 {
					m.NormalAttack = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NormalAttack = append(m.NormalAttack, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NormalAttack", wireType)
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddComboAttack", wireType)
			}
			m.AddComboAttack = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AddComboAttack |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.CombineSkills = append(m.CombineSkills, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.CombineSkills) == 0 {
					m.CombineSkills = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.CombineSkills = append(m.CombineSkills, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field CombineSkills", wireType)
			}
		case 10:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollisionRadius", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.CollisionRadius = float32(math.Float32frombits(v))
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mass", wireType)
			}
			m.Mass = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Mass |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicCD", wireType)
			}
			m.PublicCD = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PublicCD |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalkSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.WalkSpeed = float32(math.Float32frombits(v))
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field RunSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.RunSpeed = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FastSpeed = float32(math.Float32frombits(v))
		case 16:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookAtSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LookAtSpeed = float32(math.Float32frombits(v))
		case 17:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LookAtBackSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LookAtBackSpeed = float32(math.Float32frombits(v))
		case 18:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxSpeed = float32(math.Float32frombits(v))
		case 19:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field TurnSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.TurnSpeed = float32(math.Float32frombits(v))
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AnimatorController", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AnimatorController = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 21:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field DodgeDist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.DodgeDist = float32(math.Float32frombits(v))
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DodgeTime", wireType)
			}
			m.DodgeTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DodgeTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropValueID", wireType)
			}
			m.PropValueID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropValueID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastDist", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.FastDist = float32(math.Float32frombits(v))
		case 28:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Talent = append(m.Talent, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSpecialAgent_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Talent) == 0 {
					m.Talent = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Talent = append(m.Talent, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Talent", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialAgentConst_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialAgentConst_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialAgentConst_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Upgrade_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upgrade_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upgrade_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TechnologyPointNum", wireType)
			}
			m.TechnologyPointNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TechnologyPointNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Describe_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Describe_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Describe_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bornable", wireType)
			}
			m.Bornable = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Bornable |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpecialAgent_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpecialAgent_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpecialAgent_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgent_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialAgent_ConfigItems == nil {
				m.SpecialAgent_ConfigItems = make(map[uint32]*SpecialAgent_Config)
			}
			var mapkey uint32
			var mapvalue *SpecialAgent_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SpecialAgent_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpecialAgent_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgentConst_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SpecialAgentConst_ConfigItems == nil {
				m.SpecialAgentConst_ConfigItems = make(map[uint32]*SpecialAgentConst_Config)
			}
			var mapkey uint32
			var mapvalue *SpecialAgentConst_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SpecialAgentConst_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SpecialAgentConst_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Upgrade_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Upgrade_ConfigItems == nil {
				m.Upgrade_ConfigItems = make(map[uint32]*Upgrade_Config)
			}
			var mapkey uint32
			var mapvalue *Upgrade_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Upgrade_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Upgrade_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Describe_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Describe_ConfigItems == nil {
				m.Describe_ConfigItems = make(map[uint32]*Describe_Config)
			}
			var mapkey uint32
			var mapvalue *Describe_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSpecialAgent_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSpecialAgent_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Describe_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSpecialAgent_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Describe_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSpecialAgent_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSpecialAgent_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSpecialAgent_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSpecialAgent_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSpecialAgent_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSpecialAgent_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSpecialAgent_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSpecialAgent_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSpecialAgent_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSpecialAgent_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSpecialAgent_Config = fmt.Errorf("proto: unexpected end of group")
)
