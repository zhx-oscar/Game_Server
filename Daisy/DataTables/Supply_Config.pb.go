// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Supply_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SupplyDiscount_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 补给类型ID
	SupplyTypeID uint32 `protobuf:"varint,2,opt,name=SupplyTypeID,proto3" json:"SupplyTypeID,omitempty"`
	//* 补给数量
	SupplyCount uint32 `protobuf:"varint,4,opt,name=SupplyCount,proto3" json:"SupplyCount,omitempty"`
	//* 货币种类
	CurrencyType uint32 `protobuf:"varint,5,opt,name=CurrencyType,proto3" json:"CurrencyType,omitempty"`
	//* 原价
	OriginalCost uint32 `protobuf:"varint,6,opt,name=OriginalCost,proto3" json:"OriginalCost,omitempty"`
	//* 折扣上限
	UpperLimit uint32 `protobuf:"varint,7,opt,name=UpperLimit,proto3" json:"UpperLimit,omitempty"`
	//* 折扣价格
	DiscountPrice uint32 `protobuf:"varint,8,opt,name=DiscountPrice,proto3" json:"DiscountPrice,omitempty"`
}

func (m *SupplyDiscount_Config) Reset()         { *m = SupplyDiscount_Config{} }
func (m *SupplyDiscount_Config) String() string { return proto.CompactTextString(m) }
func (*SupplyDiscount_Config) ProtoMessage()    {}
func (*SupplyDiscount_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f9e9842102025b, []int{0}
}
func (m *SupplyDiscount_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyDiscount_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyDiscount_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyDiscount_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyDiscount_Config.Merge(m, src)
}
func (m *SupplyDiscount_Config) XXX_Size() int {
	return m.Size()
}
func (m *SupplyDiscount_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyDiscount_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyDiscount_Config proto.InternalMessageInfo

func (m *SupplyDiscount_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SupplyDiscount_Config) GetSupplyTypeID() uint32 {
	if m != nil {
		return m.SupplyTypeID
	}
	return 0
}

func (m *SupplyDiscount_Config) GetSupplyCount() uint32 {
	if m != nil {
		return m.SupplyCount
	}
	return 0
}

func (m *SupplyDiscount_Config) GetCurrencyType() uint32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

func (m *SupplyDiscount_Config) GetOriginalCost() uint32 {
	if m != nil {
		return m.OriginalCost
	}
	return 0
}

func (m *SupplyDiscount_Config) GetUpperLimit() uint32 {
	if m != nil {
		return m.UpperLimit
	}
	return 0
}

func (m *SupplyDiscount_Config) GetDiscountPrice() uint32 {
	if m != nil {
		return m.DiscountPrice
	}
	return 0
}

type SupplyBox_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 打开上限
	OpenLimit uint32 `protobuf:"varint,3,opt,name=OpenLimit,proto3" json:"OpenLimit,omitempty"`
	//* 掉落ID
	DropID uint32 `protobuf:"varint,4,opt,name=DropID,proto3" json:"DropID,omitempty"`
}

func (m *SupplyBox_Config) Reset()         { *m = SupplyBox_Config{} }
func (m *SupplyBox_Config) String() string { return proto.CompactTextString(m) }
func (*SupplyBox_Config) ProtoMessage()    {}
func (*SupplyBox_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f9e9842102025b, []int{1}
}
func (m *SupplyBox_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupplyBox_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupplyBox_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupplyBox_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupplyBox_Config.Merge(m, src)
}
func (m *SupplyBox_Config) XXX_Size() int {
	return m.Size()
}
func (m *SupplyBox_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SupplyBox_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SupplyBox_Config proto.InternalMessageInfo

func (m *SupplyBox_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *SupplyBox_Config) GetOpenLimit() uint32 {
	if m != nil {
		return m.OpenLimit
	}
	return 0
}

func (m *SupplyBox_Config) GetDropID() uint32 {
	if m != nil {
		return m.DropID
	}
	return 0
}

type Supply_Config_Data struct {
	SupplyDiscount_ConfigItems map[uint32]*SupplyDiscount_Config `protobuf:"bytes,1,rep,name=SupplyDiscount_Config_items,json=SupplyDiscountConfigItems,proto3" json:"SupplyDiscount_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	SupplyBox_ConfigItems      map[uint32]*SupplyBox_Config      `protobuf:"bytes,2,rep,name=SupplyBox_Config_items,json=SupplyBoxConfigItems,proto3" json:"SupplyBox_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Supply_Config_Data) Reset()         { *m = Supply_Config_Data{} }
func (m *Supply_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Supply_Config_Data) ProtoMessage()    {}
func (*Supply_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_87f9e9842102025b, []int{2}
}
func (m *Supply_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supply_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supply_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supply_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply_Config_Data.Merge(m, src)
}
func (m *Supply_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Supply_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Supply_Config_Data proto.InternalMessageInfo

func (m *Supply_Config_Data) GetSupplyDiscount_ConfigItems() map[uint32]*SupplyDiscount_Config {
	if m != nil {
		return m.SupplyDiscount_ConfigItems
	}
	return nil
}

func (m *Supply_Config_Data) GetSupplyBox_ConfigItems() map[uint32]*SupplyBox_Config {
	if m != nil {
		return m.SupplyBox_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*SupplyDiscount_Config)(nil), "DataTables.SupplyDiscount_Config")
	proto.RegisterType((*SupplyBox_Config)(nil), "DataTables.SupplyBox_Config")
	proto.RegisterType((*Supply_Config_Data)(nil), "DataTables.Supply_Config_Data")
	proto.RegisterMapType((map[uint32]*SupplyBox_Config)(nil), "DataTables.Supply_Config_Data.SupplyBoxConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SupplyDiscount_Config)(nil), "DataTables.Supply_Config_Data.SupplyDiscountConfigItemsEntry")
}

func init() { proto.RegisterFile("Supply_Config.proto", fileDescriptor_87f9e9842102025b) }

var fileDescriptor_87f9e9842102025b = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x41, 0x6f, 0xd3, 0x30,
	0x14, 0xc7, 0xeb, 0x94, 0x15, 0x78, 0x65, 0x68, 0x32, 0x6c, 0xf2, 0xc6, 0x64, 0x95, 0x8a, 0xc3,
	0x4e, 0x41, 0x2a, 0x07, 0x26, 0x24, 0x2e, 0x8d, 0x39, 0x44, 0x42, 0x1a, 0x2a, 0x43, 0xe2, 0x56,
	0x79, 0xc1, 0x4c, 0x16, 0x69, 0x6c, 0x39, 0xce, 0xb4, 0x1c, 0xf8, 0x0e, 0x7c, 0x2c, 0x8e, 0x3b,
	0x22, 0x71, 0x41, 0xed, 0xc7, 0xe0, 0x82, 0x62, 0x07, 0x35, 0x59, 0x5a, 0xc4, 0x2d, 0xfe, 0xbf,
	0xbf, 0xdf, 0xef, 0xbd, 0x7f, 0x12, 0x78, 0xf4, 0xbe, 0xd0, 0x3a, 0x2d, 0xe7, 0x91, 0xca, 0x3e,
	0xcb, 0xcb, 0x50, 0x1b, 0x65, 0x15, 0x06, 0xc6, 0x2d, 0x3f, 0xe7, 0x17, 0xa9, 0xc8, 0xc7, 0xbf,
	0x11, 0xec, 0x7b, 0x0f, 0x93, 0x79, 0xa2, 0x8a, 0xcc, 0xd6, 0x5e, 0xfc, 0x10, 0x82, 0x98, 0x11,
	0x34, 0x42, 0x27, 0xbb, 0xb3, 0x20, 0x66, 0x78, 0x0c, 0x0f, 0xbc, 0xf1, 0xbc, 0xd4, 0x22, 0x66,
	0x24, 0x70, 0x95, 0x96, 0x86, 0x47, 0x30, 0xf4, 0xe7, 0xa8, 0xea, 0x44, 0xee, 0x38, 0x4b, 0x53,
	0xaa, 0xba, 0x44, 0x85, 0x31, 0x22, 0x4b, 0xdc, 0x1d, 0xb2, 0xe3, 0xbb, 0x34, 0xb5, 0xca, 0x73,
	0x66, 0xe4, 0xa5, 0xcc, 0x78, 0x1a, 0xa9, 0xdc, 0x92, 0x81, 0xf7, 0x34, 0x35, 0x4c, 0x01, 0x3e,
	0x68, 0x2d, 0xcc, 0x5b, 0xb9, 0x90, 0x96, 0xdc, 0x75, 0x8e, 0x86, 0x82, 0x9f, 0xc1, 0xee, 0xdf,
	0x85, 0xde, 0x19, 0x99, 0x08, 0x72, 0xcf, 0x59, 0xda, 0xe2, 0xf8, 0x23, 0xec, 0xf9, 0xe1, 0xa6,
	0xea, 0x7a, 0xdb, 0xde, 0xc7, 0x70, 0xff, 0x4c, 0x8b, 0xcc, 0x83, 0xfa, 0x4e, 0x5e, 0x0b, 0xf8,
	0x00, 0x06, 0xcc, 0x28, 0x1d, 0xb3, 0x7a, 0xd9, 0xfa, 0x34, 0xfe, 0xd9, 0x07, 0xdc, 0xca, 0x7e,
	0x5e, 0x85, 0x8e, 0xbf, 0xc2, 0x93, 0x8d, 0x69, 0xcf, 0xa5, 0x15, 0x8b, 0x9c, 0xa0, 0x51, 0xff,
	0x64, 0x38, 0x79, 0x1d, 0xae, 0x5f, 0x50, 0xd8, 0x6d, 0x12, 0xb6, 0x3b, 0xf8, 0x4a, 0x5c, 0xdd,
	0x7f, 0x93, 0x59, 0x53, 0xce, 0x0e, 0xb7, 0xd6, 0x71, 0x06, 0x07, 0xb7, 0xf7, 0xad, 0xc9, 0x81,
	0x23, 0x9f, 0xfe, 0x17, 0x79, 0xaa, 0xae, 0x3b, 0xd0, 0xc7, 0x9b, 0x4a, 0x47, 0x0a, 0xe8, 0xbf,
	0x87, 0xc5, 0x7b, 0xd0, 0xff, 0x22, 0xca, 0x3a, 0xee, 0xea, 0x11, 0xbf, 0x84, 0x9d, 0x2b, 0x9e,
	0x16, 0xc2, 0x7d, 0x60, 0xc3, 0xc9, 0xd3, 0xee, 0x48, 0xb7, 0xb2, 0x9b, 0x79, 0xff, 0xab, 0xe0,
	0x14, 0x1d, 0x09, 0x38, 0xdc, 0x3a, 0xe3, 0x06, 0xd6, 0xa4, 0xcd, 0x3a, 0xee, 0xb2, 0xd6, 0x41,
	0x35, 0x30, 0xd3, 0xe7, 0xdf, 0x97, 0x14, 0xdd, 0x2c, 0x29, 0xfa, 0xb5, 0xa4, 0xe8, 0xdb, 0x8a,
	0xf6, 0x6e, 0x56, 0xb4, 0xf7, 0x63, 0x45, 0x7b, 0xb0, 0x9f, 0xa8, 0x45, 0xc8, 0xb8, 0xcc, 0xcb,
	0x30, 0x17, 0xe6, 0x4a, 0x98, 0xf0, 0x13, 0xb7, 0xfc, 0x62, 0xe0, 0xfe, 0xbc, 0x17, 0x7f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xc3, 0xa0, 0x7c, 0xf2, 0x90, 0x03, 0x00, 0x00,
}

func (m *SupplyDiscount_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyDiscount_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyDiscount_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DiscountPrice != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.DiscountPrice))
		i--
		dAtA[i] = 0x40
	}
	if m.UpperLimit != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.UpperLimit))
		i--
		dAtA[i] = 0x38
	}
	if m.OriginalCost != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.OriginalCost))
		i--
		dAtA[i] = 0x30
	}
	if m.CurrencyType != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.CurrencyType))
		i--
		dAtA[i] = 0x28
	}
	if m.SupplyCount != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.SupplyCount))
		i--
		dAtA[i] = 0x20
	}
	if m.SupplyTypeID != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.SupplyTypeID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SupplyBox_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupplyBox_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupplyBox_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DropID != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.DropID))
		i--
		dAtA[i] = 0x20
	}
	if m.OpenLimit != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.OpenLimit))
		i--
		dAtA[i] = 0x18
	}
	if m.ID != 0 {
		i = encodeVarintSupply_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Supply_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supply_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supply_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SupplyBox_ConfigItems) > 0 {
		for k := range m.SupplyBox_ConfigItems {
			v := m.SupplyBox_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSupply_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSupply_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSupply_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SupplyDiscount_ConfigItems) > 0 {
		for k := range m.SupplyDiscount_ConfigItems {
			v := m.SupplyDiscount_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintSupply_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintSupply_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSupply_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintSupply_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovSupply_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupplyDiscount_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSupply_Config(uint64(m.ID))
	}
	if m.SupplyTypeID != 0 {
		n += 1 + sovSupply_Config(uint64(m.SupplyTypeID))
	}
	if m.SupplyCount != 0 {
		n += 1 + sovSupply_Config(uint64(m.SupplyCount))
	}
	if m.CurrencyType != 0 {
		n += 1 + sovSupply_Config(uint64(m.CurrencyType))
	}
	if m.OriginalCost != 0 {
		n += 1 + sovSupply_Config(uint64(m.OriginalCost))
	}
	if m.UpperLimit != 0 {
		n += 1 + sovSupply_Config(uint64(m.UpperLimit))
	}
	if m.DiscountPrice != 0 {
		n += 1 + sovSupply_Config(uint64(m.DiscountPrice))
	}
	return n
}

func (m *SupplyBox_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovSupply_Config(uint64(m.ID))
	}
	if m.OpenLimit != 0 {
		n += 1 + sovSupply_Config(uint64(m.OpenLimit))
	}
	if m.DropID != 0 {
		n += 1 + sovSupply_Config(uint64(m.DropID))
	}
	return n
}

func (m *Supply_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupplyDiscount_ConfigItems) > 0 {
		for k, v := range m.SupplyDiscount_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSupply_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSupply_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSupply_Config(uint64(mapEntrySize))
		}
	}
	if len(m.SupplyBox_ConfigItems) > 0 {
		for k, v := range m.SupplyBox_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovSupply_Config(uint64(l))
			}
			mapEntrySize := 1 + sovSupply_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovSupply_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovSupply_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSupply_Config(x uint64) (n int) {
	return sovSupply_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SupplyDiscount_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyDiscount_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyDiscount_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyTypeID", wireType)
			}
			m.SupplyTypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplyTypeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyCount", wireType)
			}
			m.SupplyCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplyCount |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyType", wireType)
			}
			m.CurrencyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalCost", wireType)
			}
			m.OriginalCost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OriginalCost |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperLimit", wireType)
			}
			m.UpperLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscountPrice", wireType)
			}
			m.DiscountPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscountPrice |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSupply_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupplyBox_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupplyBox_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupplyBox_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenLimit", wireType)
			}
			m.OpenLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenLimit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DropID", wireType)
			}
			m.DropID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DropID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSupply_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supply_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSupply_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supply_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supply_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyDiscount_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupplyDiscount_ConfigItems == nil {
				m.SupplyDiscount_ConfigItems = make(map[uint32]*SupplyDiscount_Config)
			}
			var mapkey uint32
			var mapvalue *SupplyDiscount_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSupply_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupply_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupply_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSupply_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSupply_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SupplyDiscount_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSupply_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSupply_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SupplyDiscount_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyBox_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSupply_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SupplyBox_ConfigItems == nil {
				m.SupplyBox_ConfigItems = make(map[uint32]*SupplyBox_Config)
			}
			var mapkey uint32
			var mapvalue *SupplyBox_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSupply_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupply_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSupply_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSupply_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSupply_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SupplyBox_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSupply_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSupply_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SupplyBox_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSupply_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSupply_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSupply_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSupply_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSupply_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSupply_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSupply_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSupply_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSupply_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSupply_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSupply_Config = fmt.Errorf("proto: unexpected end of group")
)
