// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Scene_Dialogue.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SceneDialog_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (m *SceneDialog_Config) Reset()         { *m = SceneDialog_Config{} }
func (m *SceneDialog_Config) String() string { return proto.CompactTextString(m) }
func (*SceneDialog_Config) ProtoMessage()    {}
func (*SceneDialog_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee3418514f40988e, []int{0}
}
func (m *SceneDialog_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SceneDialog_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SceneDialog_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SceneDialog_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SceneDialog_Config.Merge(m, src)
}
func (m *SceneDialog_Config) XXX_Size() int {
	return m.Size()
}
func (m *SceneDialog_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_SceneDialog_Config.DiscardUnknown(m)
}

var xxx_messageInfo_SceneDialog_Config proto.InternalMessageInfo

func (m *SceneDialog_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

type DialogueTrigger_Config struct {
	//* ID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 所属剧情
	PlotID uint32 `protobuf:"varint,2,opt,name=PlotID,proto3" json:"PlotID,omitempty"`
	//* 对话顺序
	Orderly uint32 `protobuf:"varint,3,opt,name=Orderly,proto3" json:"Orderly,omitempty"`
	//* 持续时间
	Time uint32 `protobuf:"varint,6,opt,name=Time,proto3" json:"Time,omitempty"`
}

func (m *DialogueTrigger_Config) Reset()         { *m = DialogueTrigger_Config{} }
func (m *DialogueTrigger_Config) String() string { return proto.CompactTextString(m) }
func (*DialogueTrigger_Config) ProtoMessage()    {}
func (*DialogueTrigger_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee3418514f40988e, []int{1}
}
func (m *DialogueTrigger_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DialogueTrigger_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DialogueTrigger_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DialogueTrigger_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DialogueTrigger_Config.Merge(m, src)
}
func (m *DialogueTrigger_Config) XXX_Size() int {
	return m.Size()
}
func (m *DialogueTrigger_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_DialogueTrigger_Config.DiscardUnknown(m)
}

var xxx_messageInfo_DialogueTrigger_Config proto.InternalMessageInfo

func (m *DialogueTrigger_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *DialogueTrigger_Config) GetPlotID() uint32 {
	if m != nil {
		return m.PlotID
	}
	return 0
}

func (m *DialogueTrigger_Config) GetOrderly() uint32 {
	if m != nil {
		return m.Orderly
	}
	return 0
}

func (m *DialogueTrigger_Config) GetTime() uint32 {
	if m != nil {
		return m.Time
	}
	return 0
}

type Scene_Dialogue_Data struct {
	SceneDialog_ConfigItems     map[uint32]*SceneDialog_Config     `protobuf:"bytes,1,rep,name=SceneDialog_Config_items,json=SceneDialogConfigItems,proto3" json:"SceneDialog_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DialogueTrigger_ConfigItems map[uint32]*DialogueTrigger_Config `protobuf:"bytes,2,rep,name=DialogueTrigger_Config_items,json=DialogueTriggerConfigItems,proto3" json:"DialogueTrigger_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Scene_Dialogue_Data) Reset()         { *m = Scene_Dialogue_Data{} }
func (m *Scene_Dialogue_Data) String() string { return proto.CompactTextString(m) }
func (*Scene_Dialogue_Data) ProtoMessage()    {}
func (*Scene_Dialogue_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ee3418514f40988e, []int{2}
}
func (m *Scene_Dialogue_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Scene_Dialogue_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Scene_Dialogue_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Scene_Dialogue_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Scene_Dialogue_Data.Merge(m, src)
}
func (m *Scene_Dialogue_Data) XXX_Size() int {
	return m.Size()
}
func (m *Scene_Dialogue_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Scene_Dialogue_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Scene_Dialogue_Data proto.InternalMessageInfo

func (m *Scene_Dialogue_Data) GetSceneDialog_ConfigItems() map[uint32]*SceneDialog_Config {
	if m != nil {
		return m.SceneDialog_ConfigItems
	}
	return nil
}

func (m *Scene_Dialogue_Data) GetDialogueTrigger_ConfigItems() map[uint32]*DialogueTrigger_Config {
	if m != nil {
		return m.DialogueTrigger_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*SceneDialog_Config)(nil), "DataTables.SceneDialog_Config")
	proto.RegisterType((*DialogueTrigger_Config)(nil), "DataTables.DialogueTrigger_Config")
	proto.RegisterType((*Scene_Dialogue_Data)(nil), "DataTables.Scene_Dialogue_Data")
	proto.RegisterMapType((map[uint32]*DialogueTrigger_Config)(nil), "DataTables.Scene_Dialogue_Data.DialogueTriggerConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*SceneDialog_Config)(nil), "DataTables.Scene_Dialogue_Data.SceneDialogConfigItemsEntry")
}

func init() { proto.RegisterFile("Scene_Dialogue.proto", fileDescriptor_ee3418514f40988e) }

var fileDescriptor_ee3418514f40988e = []byte{
	// 348 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x92, 0xc1, 0x4e, 0xf2, 0x40,
	0x10, 0xc7, 0xd9, 0xf6, 0xfb, 0x30, 0x19, 0xa2, 0x31, 0xab, 0x92, 0x0d, 0x9a, 0x95, 0x34, 0x1e,
	0x38, 0xad, 0x09, 0x7a, 0x20, 0x7a, 0x30, 0xd1, 0x7a, 0xe8, 0x49, 0x83, 0xdc, 0x9b, 0x05, 0xc6,
	0x66, 0x63, 0x69, 0x75, 0x5b, 0x48, 0x7a, 0xf4, 0x0d, 0x7c, 0x2c, 0x8f, 0x1c, 0x3d, 0x1a, 0xb8,
	0xfb, 0x0c, 0x86, 0x05, 0x22, 0x48, 0x91, 0xdb, 0xee, 0xce, 0x7f, 0xe6, 0xf7, 0x9f, 0x99, 0x85,
	0xfd, 0x87, 0x0e, 0x46, 0xe8, 0xbb, 0x4a, 0x86, 0x71, 0xd0, 0x47, 0xf1, 0xac, 0xe3, 0x34, 0xa6,
	0xe0, 0xca, 0x54, 0xb6, 0x64, 0x3b, 0xc4, 0xc4, 0x39, 0x01, 0x6a, 0x34, 0x53, 0x89, 0x7f, 0x13,
	0x47, 0x8f, 0x2a, 0xa0, 0x3b, 0x60, 0x79, 0x2e, 0x23, 0x55, 0x52, 0xdb, 0x6e, 0x5a, 0x9e, 0xeb,
	0x44, 0x50, 0x9e, 0xd7, 0x68, 0x69, 0x15, 0x04, 0xa8, 0xd7, 0x28, 0x69, 0x19, 0x8a, 0xf7, 0x61,
	0x9c, 0x7a, 0x2e, 0xb3, 0xcc, 0xdb, 0xec, 0x46, 0x19, 0x6c, 0xdd, 0xe9, 0x2e, 0xea, 0x30, 0x63,
	0xb6, 0x09, 0xcc, 0xaf, 0x94, 0xc2, 0xbf, 0x96, 0xea, 0x21, 0x2b, 0x9a, 0x67, 0x73, 0x76, 0xbe,
	0x6c, 0xd8, 0x5b, 0xb6, 0xee, 0x4f, 0x3c, 0xd3, 0x3e, 0xb0, 0x55, 0xb7, 0xbe, 0x4a, 0xb1, 0x97,
	0x30, 0x52, 0xb5, 0x6b, 0xa5, 0xfa, 0xa5, 0xf8, 0x69, 0x4e, 0xe4, 0x94, 0x10, 0x0b, 0xf9, 0xd3,
	0x74, 0x6f, 0x92, 0x7d, 0x1b, 0xa5, 0x3a, 0x6b, 0x96, 0xf3, 0x83, 0xf4, 0x95, 0xc0, 0x51, 0x7e,
	0xff, 0x33, 0xb6, 0x65, 0xd8, 0x57, 0x9b, 0xd8, 0xbf, 0x6a, 0xac, 0xf0, 0x2b, 0xeb, 0x05, 0x15,
	0x05, 0x87, 0x7f, 0x58, 0xa7, 0xbb, 0x60, 0x3f, 0x61, 0x36, 0x5b, 0xc4, 0xe4, 0x48, 0xcf, 0xe1,
	0xff, 0x40, 0x86, 0x7d, 0x34, 0x8b, 0x28, 0xd5, 0xf9, 0x8a, 0xb9, 0xa5, 0x21, 0x36, 0xa7, 0xe2,
	0x0b, 0xab, 0x41, 0x2a, 0x2f, 0x70, 0xbc, 0xc1, 0x69, 0x0e, 0xae, 0xb1, 0x8c, 0x73, 0x16, 0x71,
	0xf9, 0xb3, 0x5b, 0x40, 0x5e, 0x9f, 0xbe, 0x8f, 0x38, 0x19, 0x8e, 0x38, 0xf9, 0x1c, 0x71, 0xf2,
	0x36, 0xe6, 0x85, 0xe1, 0x98, 0x17, 0x3e, 0xc6, 0xbc, 0x00, 0x07, 0x9d, 0xb8, 0x27, 0x5c, 0xa9,
	0x92, 0x4c, 0x24, 0xa8, 0x07, 0xa8, 0x45, 0x57, 0xa6, 0xb2, 0x5d, 0x34, 0x5f, 0xf9, 0xec, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0x8c, 0x81, 0x79, 0xfd, 0xe2, 0x02, 0x00, 0x00,
}

func (m *SceneDialog_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SceneDialog_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SceneDialog_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		i = encodeVarintScene_Dialogue(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DialogueTrigger_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DialogueTrigger_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DialogueTrigger_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Time != 0 {
		i = encodeVarintScene_Dialogue(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x30
	}
	if m.Orderly != 0 {
		i = encodeVarintScene_Dialogue(dAtA, i, uint64(m.Orderly))
		i--
		dAtA[i] = 0x18
	}
	if m.PlotID != 0 {
		i = encodeVarintScene_Dialogue(dAtA, i, uint64(m.PlotID))
		i--
		dAtA[i] = 0x10
	}
	if m.ID != 0 {
		i = encodeVarintScene_Dialogue(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Scene_Dialogue_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Scene_Dialogue_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Scene_Dialogue_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DialogueTrigger_ConfigItems) > 0 {
		for k := range m.DialogueTrigger_ConfigItems {
			v := m.DialogueTrigger_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScene_Dialogue(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintScene_Dialogue(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintScene_Dialogue(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SceneDialog_ConfigItems) > 0 {
		for k := range m.SceneDialog_ConfigItems {
			v := m.SceneDialog_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintScene_Dialogue(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintScene_Dialogue(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintScene_Dialogue(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintScene_Dialogue(dAtA []byte, offset int, v uint64) int {
	offset -= sovScene_Dialogue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SceneDialog_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovScene_Dialogue(uint64(m.ID))
	}
	return n
}

func (m *DialogueTrigger_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovScene_Dialogue(uint64(m.ID))
	}
	if m.PlotID != 0 {
		n += 1 + sovScene_Dialogue(uint64(m.PlotID))
	}
	if m.Orderly != 0 {
		n += 1 + sovScene_Dialogue(uint64(m.Orderly))
	}
	if m.Time != 0 {
		n += 1 + sovScene_Dialogue(uint64(m.Time))
	}
	return n
}

func (m *Scene_Dialogue_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SceneDialog_ConfigItems) > 0 {
		for k, v := range m.SceneDialog_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScene_Dialogue(uint64(l))
			}
			mapEntrySize := 1 + sovScene_Dialogue(uint64(k)) + l
			n += mapEntrySize + 1 + sovScene_Dialogue(uint64(mapEntrySize))
		}
	}
	if len(m.DialogueTrigger_ConfigItems) > 0 {
		for k, v := range m.DialogueTrigger_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovScene_Dialogue(uint64(l))
			}
			mapEntrySize := 1 + sovScene_Dialogue(uint64(k)) + l
			n += mapEntrySize + 1 + sovScene_Dialogue(uint64(mapEntrySize))
		}
	}
	return n
}

func sovScene_Dialogue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozScene_Dialogue(x uint64) (n int) {
	return sovScene_Dialogue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SceneDialog_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Dialogue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SceneDialog_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SceneDialog_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Dialogue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DialogueTrigger_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Dialogue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DialogueTrigger_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DialogueTrigger_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlotID", wireType)
			}
			m.PlotID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PlotID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Orderly", wireType)
			}
			m.Orderly = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Orderly |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Dialogue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Scene_Dialogue_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowScene_Dialogue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Scene_Dialogue_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Scene_Dialogue_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SceneDialog_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SceneDialog_ConfigItems == nil {
				m.SceneDialog_ConfigItems = make(map[uint32]*SceneDialog_Config)
			}
			var mapkey uint32
			var mapvalue *SceneDialog_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Dialogue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Dialogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Dialogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &SceneDialog_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScene_Dialogue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.SceneDialog_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DialogueTrigger_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DialogueTrigger_ConfigItems == nil {
				m.DialogueTrigger_ConfigItems = make(map[uint32]*DialogueTrigger_Config)
			}
			var mapkey uint32
			var mapvalue *DialogueTrigger_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowScene_Dialogue
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Dialogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowScene_Dialogue
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DialogueTrigger_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipScene_Dialogue(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthScene_Dialogue
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DialogueTrigger_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipScene_Dialogue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthScene_Dialogue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipScene_Dialogue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowScene_Dialogue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowScene_Dialogue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthScene_Dialogue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupScene_Dialogue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthScene_Dialogue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthScene_Dialogue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowScene_Dialogue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupScene_Dialogue = fmt.Errorf("proto: unexpected end of group")
)
