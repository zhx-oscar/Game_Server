// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: Equip_Config.proto

package DataTables

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EquipMent_Config struct {
	//* 装备ID
	//1-10000=测试用
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	//* 道具类型
	TypeID uint32 `protobuf:"varint,3,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	//* 装备等级
	ItemLevel uint32 `protobuf:"varint,4,opt,name=ItemLevel,proto3" json:"ItemLevel,omitempty"`
	//* 品质等级
	QualityLevel uint32 `protobuf:"varint,5,opt,name=QualityLevel,proto3" json:"QualityLevel,omitempty"`
	//* 品质
	//0-随机
	//1-白色
	//2-灰色
	//3-蓝色
	//4-黄色
	//5-暗金
	//6-绿色
	Quality uint32 `protobuf:"varint,6,opt,name=Quality,proto3" json:"Quality,omitempty"`
	//* 大类
	//1-武器
	//2-防具
	//3-饰品
	Type uint32 `protobuf:"varint,7,opt,name=Type,proto3" json:"Type,omitempty"`
	//* 小类
	//0-无
	//1-远程
	//2-近程
	//3-重甲
	//4-中甲
	//5-轻甲
	Class uint32 `protobuf:"varint,8,opt,name=Class,proto3" json:"Class,omitempty"`
	//* 部位
	//0-头部
	//1-胸部
	//2-腰部
	//3-脚部
	//4-手部
	//5-武器
	//6-项链
	//7-戒指
	Position uint32 `protobuf:"varint,9,opt,name=Position,proto3" json:"Position,omitempty"`
	//* 对应绿色装备ID
	SuitEquipID uint32 `protobuf:"varint,10,opt,name=SuitEquipID,proto3" json:"SuitEquipID,omitempty"`
	//* 对应暗金装备ID
	GoldEquipID uint32 `protobuf:"varint,11,opt,name=GoldEquipID,proto3" json:"GoldEquipID,omitempty"`
	//* 是否珍品
	//0-随机
	//1-是
	IsPrecious bool `protobuf:"varint,12,opt,name=IsPrecious,proto3" json:"IsPrecious,omitempty"`
	//* 职业要求
	//0-通用
	//1-力量型
	//2-念力型
	//3-敏捷型
	JobTypeRequire uint32 `protobuf:"varint,13,opt,name=JobTypeRequire,proto3" json:"JobTypeRequire,omitempty"`
	//* 特工要求
	//（填写特工ID）
	JobRequire uint32 `protobuf:"varint,14,opt,name=JobRequire,proto3" json:"JobRequire,omitempty"`
	//* 等级要求
	RoleLevelRequire uint32 `protobuf:"varint,15,opt,name=RoleLevelRequire,proto3" json:"RoleLevelRequire,omitempty"`
	//* 词缀掉落组ID
	//前缀库|后缀库
	AffixDropID []uint32 `protobuf:"varint,16,rep,packed,name=AffixDropID,proto3" json:"AffixDropID,omitempty"`
	//* 固定词缀ID
	FixedAffix []uint32 `protobuf:"varint,17,rep,packed,name=FixedAffix,proto3" json:"FixedAffix,omitempty"`
	//* 最小孔数
	MinSocketNum uint32 `protobuf:"varint,18,opt,name=MinSocketNum,proto3" json:"MinSocketNum,omitempty"`
	//* 最大孔数
	MaxSocketNum uint32 `protobuf:"varint,19,opt,name=MaxSocketNum,proto3" json:"MaxSocketNum,omitempty"`
	//* 售卖价格
	Price uint32 `protobuf:"varint,23,opt,name=Price,proto3" json:"Price,omitempty"`
	//* 售卖货币类型
	CurrencyType uint32 `protobuf:"varint,24,opt,name=CurrencyType,proto3" json:"CurrencyType,omitempty"`
}

func (m *EquipMent_Config) Reset()         { *m = EquipMent_Config{} }
func (m *EquipMent_Config) String() string { return proto.CompactTextString(m) }
func (*EquipMent_Config) ProtoMessage()    {}
func (*EquipMent_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{0}
}
func (m *EquipMent_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipMent_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipMent_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipMent_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipMent_Config.Merge(m, src)
}
func (m *EquipMent_Config) XXX_Size() int {
	return m.Size()
}
func (m *EquipMent_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipMent_Config.DiscardUnknown(m)
}

var xxx_messageInfo_EquipMent_Config proto.InternalMessageInfo

func (m *EquipMent_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *EquipMent_Config) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EquipMent_Config) GetTypeID() uint32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *EquipMent_Config) GetItemLevel() uint32 {
	if m != nil {
		return m.ItemLevel
	}
	return 0
}

func (m *EquipMent_Config) GetQualityLevel() uint32 {
	if m != nil {
		return m.QualityLevel
	}
	return 0
}

func (m *EquipMent_Config) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *EquipMent_Config) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *EquipMent_Config) GetClass() uint32 {
	if m != nil {
		return m.Class
	}
	return 0
}

func (m *EquipMent_Config) GetPosition() uint32 {
	if m != nil {
		return m.Position
	}
	return 0
}

func (m *EquipMent_Config) GetSuitEquipID() uint32 {
	if m != nil {
		return m.SuitEquipID
	}
	return 0
}

func (m *EquipMent_Config) GetGoldEquipID() uint32 {
	if m != nil {
		return m.GoldEquipID
	}
	return 0
}

func (m *EquipMent_Config) GetIsPrecious() bool {
	if m != nil {
		return m.IsPrecious
	}
	return false
}

func (m *EquipMent_Config) GetJobTypeRequire() uint32 {
	if m != nil {
		return m.JobTypeRequire
	}
	return 0
}

func (m *EquipMent_Config) GetJobRequire() uint32 {
	if m != nil {
		return m.JobRequire
	}
	return 0
}

func (m *EquipMent_Config) GetRoleLevelRequire() uint32 {
	if m != nil {
		return m.RoleLevelRequire
	}
	return 0
}

func (m *EquipMent_Config) GetAffixDropID() []uint32 {
	if m != nil {
		return m.AffixDropID
	}
	return nil
}

func (m *EquipMent_Config) GetFixedAffix() []uint32 {
	if m != nil {
		return m.FixedAffix
	}
	return nil
}

func (m *EquipMent_Config) GetMinSocketNum() uint32 {
	if m != nil {
		return m.MinSocketNum
	}
	return 0
}

func (m *EquipMent_Config) GetMaxSocketNum() uint32 {
	if m != nil {
		return m.MaxSocketNum
	}
	return 0
}

func (m *EquipMent_Config) GetPrice() uint32 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *EquipMent_Config) GetCurrencyType() uint32 {
	if m != nil {
		return m.CurrencyType
	}
	return 0
}

type EquipAffix_Config struct {
	//* 词缀ID
	//1-100000=测试
	//100001-200000=装备固定词缀
	//200001-600000=装备前缀
	//600001-1000000=装备后缀
	AffixID uint32 `protobuf:"varint,1,opt,name=AffixID,proto3" json:"AffixID,omitempty"`
	//* 词缀名称
	AffixName string `protobuf:"bytes,2,opt,name=AffixName,proto3" json:"AffixName,omitempty"`
	//* 道具类型
	TypeID uint32 `protobuf:"varint,3,opt,name=TypeID,proto3" json:"TypeID,omitempty"`
	//* 词缀等级
	AffixLevel uint32 `protobuf:"varint,4,opt,name=AffixLevel,proto3" json:"AffixLevel,omitempty"`
	//* 词缀位置
	//1-前缀
	//2-后缀
	//3-固定词缀
	AffixPlace uint32 `protobuf:"varint,5,opt,name=AffixPlace,proto3" json:"AffixPlace,omitempty"`
	//* 词缀类型
	//0-通用
	//1-装备
	//2-宝石
	//3-饰品
	AffixType uint32 `protobuf:"varint,6,opt,name=AffixType,proto3" json:"AffixType,omitempty"`
	//* 品质限制
	//0-通用
	//1-白色
	//2-灰色
	//3-蓝色
	//4-黄色
	//5-暗金
	//6-绿色
	QualityLimit []uint32 `protobuf:"varint,7,rep,packed,name=QualityLimit,proto3" json:"QualityLimit,omitempty"`
	//* 装备部位限制
	//0-通用
	//1-头部
	//2-胸部
	//3-腰部
	//4-脚部
	//5-手部
	//6-武器
	//7-戒指
	//8-项链
	PositionLimit []uint32 `protobuf:"varint,8,rep,packed,name=PositionLimit,proto3" json:"PositionLimit,omitempty"`
	//* 词缀组
	AffixGroup uint32 `protobuf:"varint,9,opt,name=AffixGroup,proto3" json:"AffixGroup,omitempty"`
	//* 词缀效果类型
	//0-属性
	//1-BUFF
	AffixEffectType uint32 `protobuf:"varint,10,opt,name=AffixEffectType,proto3" json:"AffixEffectType,omitempty"`
	//* 属性ID
	//见att_enumeration
	AffixAttID uint32 `protobuf:"varint,11,opt,name=AffixAttID,proto3" json:"AffixAttID,omitempty"`
	//* 数值精度
	//0-整数
	//1-小数点后2位
	//2-百分比，小数点后4位
	AffixPrecision uint32 `protobuf:"varint,12,opt,name=AffixPrecision,proto3" json:"AffixPrecision,omitempty"`
	//* 数值参数生效位置
	//0-填入b
	//1-填入a
	AffixParam uint32 `protobuf:"varint,13,opt,name=AffixParam,proto3" json:"AffixParam,omitempty"`
	//* 属性最小值
	MinAffixAttValue float32 `protobuf:"fixed32,14,opt,name=MinAffixAttValue,proto3" json:"MinAffixAttValue,omitempty"`
	//* 属性最大值
	MaxAffixAttValue float32 `protobuf:"fixed32,15,opt,name=MaxAffixAttValue,proto3" json:"MaxAffixAttValue,omitempty"`
	//* BUFF的ID
	BuffID uint32 `protobuf:"varint,16,opt,name=BuffID,proto3" json:"BuffID,omitempty"`
	//* BUFF型词缀评分
	BuffAffixScore uint32 `protobuf:"varint,17,opt,name=BuffAffixScore,proto3" json:"BuffAffixScore,omitempty"`
	//* BUFF型词缀分类
	//1-攻击类
	//2-防御类
	//3-超自然能力
	BuffAffixType uint32 `protobuf:"varint,18,opt,name=BuffAffixType,proto3" json:"BuffAffixType,omitempty"`
}

func (m *EquipAffix_Config) Reset()         { *m = EquipAffix_Config{} }
func (m *EquipAffix_Config) String() string { return proto.CompactTextString(m) }
func (*EquipAffix_Config) ProtoMessage()    {}
func (*EquipAffix_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{1}
}
func (m *EquipAffix_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EquipAffix_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EquipAffix_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EquipAffix_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EquipAffix_Config.Merge(m, src)
}
func (m *EquipAffix_Config) XXX_Size() int {
	return m.Size()
}
func (m *EquipAffix_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_EquipAffix_Config.DiscardUnknown(m)
}

var xxx_messageInfo_EquipAffix_Config proto.InternalMessageInfo

func (m *EquipAffix_Config) GetAffixID() uint32 {
	if m != nil {
		return m.AffixID
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixName() string {
	if m != nil {
		return m.AffixName
	}
	return ""
}

func (m *EquipAffix_Config) GetTypeID() uint32 {
	if m != nil {
		return m.TypeID
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixLevel() uint32 {
	if m != nil {
		return m.AffixLevel
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixPlace() uint32 {
	if m != nil {
		return m.AffixPlace
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixType() uint32 {
	if m != nil {
		return m.AffixType
	}
	return 0
}

func (m *EquipAffix_Config) GetQualityLimit() []uint32 {
	if m != nil {
		return m.QualityLimit
	}
	return nil
}

func (m *EquipAffix_Config) GetPositionLimit() []uint32 {
	if m != nil {
		return m.PositionLimit
	}
	return nil
}

func (m *EquipAffix_Config) GetAffixGroup() uint32 {
	if m != nil {
		return m.AffixGroup
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixEffectType() uint32 {
	if m != nil {
		return m.AffixEffectType
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixAttID() uint32 {
	if m != nil {
		return m.AffixAttID
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixPrecision() uint32 {
	if m != nil {
		return m.AffixPrecision
	}
	return 0
}

func (m *EquipAffix_Config) GetAffixParam() uint32 {
	if m != nil {
		return m.AffixParam
	}
	return 0
}

func (m *EquipAffix_Config) GetMinAffixAttValue() float32 {
	if m != nil {
		return m.MinAffixAttValue
	}
	return 0
}

func (m *EquipAffix_Config) GetMaxAffixAttValue() float32 {
	if m != nil {
		return m.MaxAffixAttValue
	}
	return 0
}

func (m *EquipAffix_Config) GetBuffID() uint32 {
	if m != nil {
		return m.BuffID
	}
	return 0
}

func (m *EquipAffix_Config) GetBuffAffixScore() uint32 {
	if m != nil {
		return m.BuffAffixScore
	}
	return 0
}

func (m *EquipAffix_Config) GetBuffAffixType() uint32 {
	if m != nil {
		return m.BuffAffixType
	}
	return 0
}

type Quality_Config struct {
	//* 装备品质
	Quality uint32 `protobuf:"varint,1,opt,name=Quality,proto3" json:"Quality,omitempty"`
	//* 普通怪
	Common uint32 `protobuf:"varint,2,opt,name=Common,proto3" json:"Common,omitempty"`
	//* 精英怪
	Elit uint32 `protobuf:"varint,3,opt,name=Elit,proto3" json:"Elit,omitempty"`
	//* Boss
	Boss uint32 `protobuf:"varint,4,opt,name=Boss,proto3" json:"Boss,omitempty"`
	//* 幸运系数
	LuckyCoe uint32 `protobuf:"varint,5,opt,name=LuckyCoe,proto3" json:"LuckyCoe,omitempty"`
	//* 珍品概率
	GemRate uint32 `protobuf:"varint,6,opt,name=GemRate,proto3" json:"GemRate,omitempty"`
	//* 装备前缀数量
	EquipPrefixNum uint32 `protobuf:"varint,7,opt,name=EquipPrefixNum,proto3" json:"EquipPrefixNum,omitempty"`
	//* 装备后缀数量
	EquipSuffixNum uint32 `protobuf:"varint,8,opt,name=EquipSuffixNum,proto3" json:"EquipSuffixNum,omitempty"`
	//* 珠宝前缀数量
	GemPrefixNum uint32 `protobuf:"varint,9,opt,name=GemPrefixNum,proto3" json:"GemPrefixNum,omitempty"`
	//* 珠宝后缀数量
	GemSuffixNum uint32 `protobuf:"varint,10,opt,name=GemSuffixNum,proto3" json:"GemSuffixNum,omitempty"`
	//* 饰品前缀数量
	DecorationPrefixNum uint32 `protobuf:"varint,11,opt,name=DecorationPrefixNum,proto3" json:"DecorationPrefixNum,omitempty"`
	//* 饰品后缀数量
	DecorationSuffixNum uint32 `protobuf:"varint,12,opt,name=DecorationSuffixNum,proto3" json:"DecorationSuffixNum,omitempty"`
}

func (m *Quality_Config) Reset()         { *m = Quality_Config{} }
func (m *Quality_Config) String() string { return proto.CompactTextString(m) }
func (*Quality_Config) ProtoMessage()    {}
func (*Quality_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{2}
}
func (m *Quality_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Quality_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Quality_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Quality_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Quality_Config.Merge(m, src)
}
func (m *Quality_Config) XXX_Size() int {
	return m.Size()
}
func (m *Quality_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Quality_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Quality_Config proto.InternalMessageInfo

func (m *Quality_Config) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Quality_Config) GetCommon() uint32 {
	if m != nil {
		return m.Common
	}
	return 0
}

func (m *Quality_Config) GetElit() uint32 {
	if m != nil {
		return m.Elit
	}
	return 0
}

func (m *Quality_Config) GetBoss() uint32 {
	if m != nil {
		return m.Boss
	}
	return 0
}

func (m *Quality_Config) GetLuckyCoe() uint32 {
	if m != nil {
		return m.LuckyCoe
	}
	return 0
}

func (m *Quality_Config) GetGemRate() uint32 {
	if m != nil {
		return m.GemRate
	}
	return 0
}

func (m *Quality_Config) GetEquipPrefixNum() uint32 {
	if m != nil {
		return m.EquipPrefixNum
	}
	return 0
}

func (m *Quality_Config) GetEquipSuffixNum() uint32 {
	if m != nil {
		return m.EquipSuffixNum
	}
	return 0
}

func (m *Quality_Config) GetGemPrefixNum() uint32 {
	if m != nil {
		return m.GemPrefixNum
	}
	return 0
}

func (m *Quality_Config) GetGemSuffixNum() uint32 {
	if m != nil {
		return m.GemSuffixNum
	}
	return 0
}

func (m *Quality_Config) GetDecorationPrefixNum() uint32 {
	if m != nil {
		return m.DecorationPrefixNum
	}
	return 0
}

func (m *Quality_Config) GetDecorationSuffixNum() uint32 {
	if m != nil {
		return m.DecorationSuffixNum
	}
	return 0
}

type Hole_Config struct {
	//* 最小装备等级
	MinLevel uint32 `protobuf:"varint,1,opt,name=MinLevel,proto3" json:"MinLevel,omitempty"`
	//* 最大装备等级
	MaxLevel uint32 `protobuf:"varint,2,opt,name=MaxLevel,proto3" json:"MaxLevel,omitempty"`
	//* 孔数增量
	HoleAdd uint32 `protobuf:"varint,3,opt,name=HoleAdd,proto3" json:"HoleAdd,omitempty"`
}

func (m *Hole_Config) Reset()         { *m = Hole_Config{} }
func (m *Hole_Config) String() string { return proto.CompactTextString(m) }
func (*Hole_Config) ProtoMessage()    {}
func (*Hole_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{3}
}
func (m *Hole_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hole_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hole_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hole_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hole_Config.Merge(m, src)
}
func (m *Hole_Config) XXX_Size() int {
	return m.Size()
}
func (m *Hole_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_Hole_Config.DiscardUnknown(m)
}

var xxx_messageInfo_Hole_Config proto.InternalMessageInfo

func (m *Hole_Config) GetMinLevel() uint32 {
	if m != nil {
		return m.MinLevel
	}
	return 0
}

func (m *Hole_Config) GetMaxLevel() uint32 {
	if m != nil {
		return m.MaxLevel
	}
	return 0
}

func (m *Hole_Config) GetHoleAdd() uint32 {
	if m != nil {
		return m.HoleAdd
	}
	return 0
}

type AttEnumEration_Config struct {
	//* 枚举值
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 属性名称
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	//* 评分转换系数
	ScoreParam float32 `protobuf:"fixed32,3,opt,name=ScoreParam,proto3" json:"ScoreParam,omitempty"`
	//* 评分分类
	//0-其他
	//1-攻击
	//2-防御
	//3-超自然能力
	ScoreType uint32 `protobuf:"varint,4,opt,name=ScoreType,proto3" json:"ScoreType,omitempty"`
}

func (m *AttEnumEration_Config) Reset()         { *m = AttEnumEration_Config{} }
func (m *AttEnumEration_Config) String() string { return proto.CompactTextString(m) }
func (*AttEnumEration_Config) ProtoMessage()    {}
func (*AttEnumEration_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{4}
}
func (m *AttEnumEration_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AttEnumEration_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AttEnumEration_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AttEnumEration_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttEnumEration_Config.Merge(m, src)
}
func (m *AttEnumEration_Config) XXX_Size() int {
	return m.Size()
}
func (m *AttEnumEration_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AttEnumEration_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AttEnumEration_Config proto.InternalMessageInfo

func (m *AttEnumEration_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AttEnumEration_Config) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AttEnumEration_Config) GetScoreParam() float32 {
	if m != nil {
		return m.ScoreParam
	}
	return 0
}

func (m *AttEnumEration_Config) GetScoreType() uint32 {
	if m != nil {
		return m.ScoreType
	}
	return 0
}

type Equip_Config_Data struct {
	EquipMent_ConfigItems      map[uint32]*EquipMent_Config      `protobuf:"bytes,1,rep,name=EquipMent_Config_items,json=EquipMentConfigItems,proto3" json:"EquipMent_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	EquipAffix_ConfigItems     map[uint32]*EquipAffix_Config     `protobuf:"bytes,2,rep,name=EquipAffix_Config_items,json=EquipAffixConfigItems,proto3" json:"EquipAffix_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Quality_ConfigItems        map[uint32]*Quality_Config        `protobuf:"bytes,3,rep,name=Quality_Config_items,json=QualityConfigItems,proto3" json:"Quality_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Hole_ConfigItems           map[uint32]*Hole_Config           `protobuf:"bytes,4,rep,name=Hole_Config_items,json=HoleConfigItems,proto3" json:"Hole_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	AttEnumEration_ConfigItems map[uint32]*AttEnumEration_Config `protobuf:"bytes,5,rep,name=AttEnumEration_Config_items,json=AttEnumErationConfigItems,proto3" json:"AttEnumEration_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Equip_Config_Data) Reset()         { *m = Equip_Config_Data{} }
func (m *Equip_Config_Data) String() string { return proto.CompactTextString(m) }
func (*Equip_Config_Data) ProtoMessage()    {}
func (*Equip_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_11236f23d7fef5e0, []int{5}
}
func (m *Equip_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equip_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equip_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equip_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equip_Config_Data.Merge(m, src)
}
func (m *Equip_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *Equip_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Equip_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Equip_Config_Data proto.InternalMessageInfo

func (m *Equip_Config_Data) GetEquipMent_ConfigItems() map[uint32]*EquipMent_Config {
	if m != nil {
		return m.EquipMent_ConfigItems
	}
	return nil
}

func (m *Equip_Config_Data) GetEquipAffix_ConfigItems() map[uint32]*EquipAffix_Config {
	if m != nil {
		return m.EquipAffix_ConfigItems
	}
	return nil
}

func (m *Equip_Config_Data) GetQuality_ConfigItems() map[uint32]*Quality_Config {
	if m != nil {
		return m.Quality_ConfigItems
	}
	return nil
}

func (m *Equip_Config_Data) GetHole_ConfigItems() map[uint32]*Hole_Config {
	if m != nil {
		return m.Hole_ConfigItems
	}
	return nil
}

func (m *Equip_Config_Data) GetAttEnumEration_ConfigItems() map[uint32]*AttEnumEration_Config {
	if m != nil {
		return m.AttEnumEration_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*EquipMent_Config)(nil), "DataTables.EquipMent_Config")
	proto.RegisterType((*EquipAffix_Config)(nil), "DataTables.EquipAffix_Config")
	proto.RegisterType((*Quality_Config)(nil), "DataTables.Quality_Config")
	proto.RegisterType((*Hole_Config)(nil), "DataTables.Hole_Config")
	proto.RegisterType((*AttEnumEration_Config)(nil), "DataTables.AttEnumEration_Config")
	proto.RegisterType((*Equip_Config_Data)(nil), "DataTables.Equip_Config_Data")
	proto.RegisterMapType((map[uint32]*AttEnumEration_Config)(nil), "DataTables.Equip_Config_Data.AttEnumErationConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*EquipAffix_Config)(nil), "DataTables.Equip_Config_Data.EquipAffixConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*EquipMent_Config)(nil), "DataTables.Equip_Config_Data.EquipMentConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Hole_Config)(nil), "DataTables.Equip_Config_Data.HoleConfigItemsEntry")
	proto.RegisterMapType((map[uint32]*Quality_Config)(nil), "DataTables.Equip_Config_Data.QualityConfigItemsEntry")
}

func init() { proto.RegisterFile("Equip_Config.proto", fileDescriptor_11236f23d7fef5e0) }

var fileDescriptor_11236f23d7fef5e0 = []byte{
	// 1084 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x57, 0xcb, 0x6e, 0xdb, 0x46,
	0x14, 0x35, 0x25, 0x3f, 0xe4, 0xeb, 0xf7, 0xc4, 0x8f, 0x89, 0x9a, 0x12, 0xaa, 0x50, 0x14, 0x42,
	0x81, 0xaa, 0x81, 0x83, 0x22, 0x41, 0xd1, 0x8d, 0x2d, 0xa9, 0xae, 0x82, 0x38, 0x50, 0xe9, 0xa0,
	0x9b, 0x02, 0x35, 0x68, 0x6a, 0x64, 0x10, 0x26, 0x39, 0x0a, 0x1f, 0x86, 0x05, 0xf4, 0x13, 0xba,
	0xe8, 0x07, 0xf4, 0x53, 0xfa, 0x01, 0x5d, 0x66, 0xd9, 0x65, 0x61, 0x7f, 0x46, 0x37, 0xc5, 0xdc,
	0x19, 0x92, 0x43, 0x91, 0x32, 0x9a, 0xdd, 0xdc, 0x73, 0xcf, 0xdc, 0x73, 0x35, 0xf7, 0x70, 0x06,
	0x02, 0x32, 0x78, 0x9f, 0xb8, 0xd3, 0xcb, 0x1e, 0x0f, 0x26, 0xee, 0x75, 0x77, 0x1a, 0xf2, 0x98,
	0x13, 0xe8, 0xdb, 0xb1, 0xfd, 0xce, 0xbe, 0xf2, 0x58, 0xd4, 0xfe, 0x6d, 0x05, 0x76, 0x91, 0x72,
	0xce, 0x82, 0x58, 0xd1, 0xc8, 0x36, 0xd4, 0x86, 0x7d, 0x6a, 0xb4, 0x8c, 0xce, 0x96, 0x55, 0x1b,
	0xf6, 0x09, 0x81, 0xe5, 0xb7, 0xb6, 0xcf, 0x68, 0xad, 0x65, 0x74, 0xd6, 0x2d, 0x5c, 0x93, 0x43,
	0x58, 0x7d, 0x37, 0x9b, 0xb2, 0x61, 0x9f, 0xd6, 0x91, 0xa7, 0x22, 0xf2, 0x0c, 0xd6, 0x87, 0x31,
	0xf3, 0xdf, 0xb0, 0x5b, 0xe6, 0xd1, 0x65, 0x4c, 0xe5, 0x00, 0x69, 0xc3, 0xe6, 0x8f, 0x89, 0xed,
	0xb9, 0xf1, 0x4c, 0x12, 0x56, 0x90, 0x50, 0xc0, 0x08, 0x85, 0x35, 0x15, 0xd3, 0x55, 0x4c, 0xa7,
	0xa1, 0xe8, 0x43, 0xa8, 0xd0, 0x35, 0x84, 0x71, 0x4d, 0xf6, 0x61, 0xa5, 0xe7, 0xd9, 0x51, 0x44,
	0x1b, 0x08, 0xca, 0x80, 0x34, 0xa1, 0x31, 0xe2, 0x91, 0x1b, 0xbb, 0x3c, 0xa0, 0xeb, 0x98, 0xc8,
	0x62, 0xd2, 0x82, 0x8d, 0x8b, 0xc4, 0x8d, 0xf1, 0x57, 0x0f, 0xfb, 0x14, 0x30, 0xad, 0x43, 0x82,
	0x71, 0xc6, 0xbd, 0x71, 0xca, 0xd8, 0x90, 0x0c, 0x0d, 0x22, 0x26, 0xc0, 0x30, 0x1a, 0x85, 0xcc,
	0x71, 0x79, 0x12, 0xd1, 0xcd, 0x96, 0xd1, 0x69, 0x58, 0x1a, 0x42, 0xbe, 0x80, 0xed, 0xd7, 0xfc,
	0x4a, 0x34, 0x68, 0xb1, 0xf7, 0x89, 0x1b, 0x32, 0xba, 0x85, 0x45, 0xe6, 0x50, 0x51, 0xe7, 0x35,
	0xbf, 0x4a, 0x39, 0xdb, 0xc8, 0xd1, 0x10, 0xf2, 0x25, 0xec, 0x5a, 0xdc, 0x63, 0x78, 0x30, 0x29,
	0x6b, 0x07, 0x59, 0x25, 0x5c, 0x74, 0x7d, 0x32, 0x99, 0xb8, 0x77, 0xfd, 0x90, 0x8b, 0xae, 0x77,
	0x5b, 0x75, 0xd1, 0xb5, 0x06, 0x09, 0xb5, 0xef, 0xdd, 0x3b, 0x36, 0x46, 0x8c, 0xee, 0x21, 0x41,
	0x43, 0xc4, 0x74, 0xce, 0xdd, 0xe0, 0x82, 0x3b, 0x37, 0x2c, 0x7e, 0x9b, 0xf8, 0x94, 0xc8, 0xe9,
	0xe8, 0x18, 0x72, 0xec, 0xbb, 0x9c, 0xf3, 0x44, 0x71, 0x34, 0x4c, 0xcc, 0x64, 0x14, 0xba, 0x0e,
	0xa3, 0x47, 0x72, 0x26, 0x18, 0x88, 0x9d, 0xbd, 0x24, 0x0c, 0x59, 0xe0, 0xcc, 0x70, 0x8a, 0x54,
	0xee, 0xd4, 0xb1, 0xf6, 0xbf, 0xcb, 0xb0, 0x87, 0x67, 0x8c, 0x0d, 0xa5, 0x7e, 0xa4, 0xb0, 0x86,
	0x71, 0x66, 0xca, 0x34, 0x14, 0x6e, 0xc3, 0xa5, 0x66, 0xcf, 0x1c, 0x58, 0xe8, 0x51, 0x13, 0x00,
	0x49, 0xba, 0x49, 0x35, 0x24, 0xcb, 0x8f, 0x3c, 0xdb, 0x61, 0xca, 0xa3, 0x1a, 0x92, 0xa9, 0xe2,
	0xcf, 0x90, 0x1e, 0xcd, 0x01, 0xdd, 0xe3, 0xae, 0xef, 0xc6, 0x74, 0x0d, 0xcf, 0xb9, 0x80, 0x91,
	0xcf, 0x61, 0x2b, 0xf5, 0xa3, 0x24, 0x35, 0x90, 0x54, 0x04, 0xb3, 0x3e, 0xce, 0x42, 0x9e, 0x4c,
	0x95, 0x8f, 0x35, 0x84, 0x74, 0x60, 0x07, 0xa3, 0xc1, 0x64, 0xc2, 0x9c, 0x18, 0xbb, 0x91, 0x6e,
	0x9e, 0x87, 0xb3, 0x4a, 0x27, 0x71, 0x9c, 0x19, 0x5a, 0x43, 0x84, 0x5f, 0xe5, 0xef, 0x13, 0x06,
	0x8e, 0xc4, 0x57, 0xb3, 0x29, 0xfd, 0x5a, 0x44, 0xf3, 0x93, 0xb1, 0x43, 0xdb, 0x57, 0x9e, 0xd6,
	0x10, 0xe1, 0xd7, 0x73, 0x37, 0x48, 0x0b, 0xff, 0x64, 0x7b, 0x89, 0x74, 0x75, 0xcd, 0x2a, 0xe1,
	0xc8, 0xb5, 0xef, 0x8a, 0xdc, 0x1d, 0xc5, 0x9d, 0xc3, 0xc5, 0x24, 0x4f, 0x93, 0xc9, 0x04, 0x6d,
	0x8d, 0x93, 0x94, 0x91, 0xe8, 0x5b, 0xac, 0x90, 0x7c, 0xe1, 0xf0, 0x90, 0xd1, 0x3d, 0xd9, 0x77,
	0x11, 0x15, 0xe7, 0x9d, 0x21, 0x78, 0x4e, 0xd2, 0xda, 0x45, 0xb0, 0xfd, 0x47, 0x1d, 0xb6, 0xd5,
	0x98, 0x34, 0xeb, 0xa5, 0x97, 0x91, 0x51, 0xbc, 0x8c, 0x0e, 0x61, 0xb5, 0xc7, 0x7d, 0x9f, 0x07,
	0xe8, 0xbb, 0x2d, 0x4b, 0x45, 0xe2, 0x92, 0x1a, 0x78, 0x6e, 0xac, 0x2c, 0x87, 0x6b, 0x81, 0x9d,
	0xf2, 0x28, 0x52, 0x56, 0xc3, 0xb5, 0xb8, 0xa2, 0xde, 0x24, 0xce, 0xcd, 0xac, 0xc7, 0x53, 0x8b,
	0x65, 0xb1, 0x50, 0x3d, 0x63, 0xbe, 0x65, 0xc7, 0xa9, 0xbd, 0xd2, 0x50, 0xfc, 0x60, 0xfc, 0x3e,
	0x46, 0x21, 0x13, 0x2e, 0x4f, 0x7c, 0x75, 0x19, 0xce, 0xa1, 0x19, 0xef, 0x22, 0x99, 0x28, 0x5e,
	0x43, 0xe3, 0x65, 0xa8, 0x30, 0xeb, 0x19, 0xf3, 0xf3, 0x6a, 0xd2, 0x64, 0x05, 0x4c, 0x71, 0xf2,
	0x4a, 0x90, 0x71, 0xf2, 0x3a, 0xcf, 0xe1, 0x49, 0x9f, 0x39, 0x3c, 0xb4, 0x85, 0x7b, 0xf3, 0x72,
	0xd2, 0x69, 0x55, 0xa9, 0xe2, 0x8e, 0xbc, 0xf8, 0xe6, 0xfc, 0x8e, 0x2c, 0xd5, 0xbe, 0x84, 0x8d,
	0x1f, 0xb8, 0xc7, 0xd2, 0xd1, 0x34, 0xa1, 0x71, 0xee, 0x06, 0xf2, 0x1b, 0x96, 0xb3, 0xc9, 0x62,
	0xcc, 0xd9, 0xea, 0xfb, 0xae, 0xa9, 0x9c, 0x8a, 0xc5, 0xe1, 0x8a, 0x32, 0x27, 0xe3, 0xb1, 0x9a,
	0x51, 0x1a, 0xb6, 0x67, 0x70, 0x70, 0x12, 0xc7, 0x83, 0x20, 0xf1, 0x07, 0x52, 0xfb, 0x63, 0x1e,
	0x44, 0x13, 0x00, 0xbd, 0x26, 0x3f, 0x8d, 0x3a, 0x1a, 0x59, 0x43, 0xc4, 0xa5, 0x81, 0x11, 0xda,
	0x4f, 0x3d, 0x8c, 0x19, 0xd0, 0xfe, 0xb3, 0xa1, 0x2e, 0x3e, 0x25, 0x79, 0x29, 0xde, 0x68, 0xe2,
	0xc3, 0xe1, 0xfc, 0xe3, 0x7c, 0xe9, 0xc6, 0xcc, 0x8f, 0xa8, 0xd1, 0xaa, 0x77, 0x36, 0x8e, 0x5f,
	0x76, 0xf3, 0xa7, 0xbc, 0x5b, 0xda, 0xde, 0xcd, 0xf6, 0x4a, 0x50, 0x3c, 0xc3, 0xd1, 0x20, 0x88,
	0xc3, 0x99, 0xb5, 0x5f, 0x95, 0x22, 0x53, 0x38, 0x2a, 0x5d, 0xbe, 0x4a, 0xaf, 0x86, 0x7a, 0xaf,
	0xfe, 0x87, 0x1e, 0x6e, 0x2e, 0x09, 0x1e, 0x54, 0xe6, 0xc8, 0x35, 0xec, 0x17, 0x3f, 0x38, 0x25,
	0x57, 0x47, 0xb9, 0x6f, 0x1e, 0x97, 0x53, 0x3b, 0x4b, 0x5a, 0xa4, 0x9c, 0x20, 0xbf, 0xc0, 0x9e,
	0xe6, 0x1d, 0xa5, 0xb2, 0x8c, 0x2a, 0xc7, 0x8f, 0xab, 0x88, 0x6d, 0x25, 0x89, 0x9d, 0x39, 0x94,
	0xfc, 0x0a, 0x9f, 0x54, 0x5a, 0x47, 0x29, 0xad, 0xa0, 0xd2, 0x77, 0x8f, 0x2b, 0x15, 0x0b, 0x94,
	0x34, 0x9f, 0x2e, 0xcc, 0x37, 0x19, 0x3c, 0x5d, 0x38, 0x6b, 0xb2, 0x0b, 0xf5, 0x1b, 0x96, 0x5e,
	0x5f, 0x62, 0x49, 0x8e, 0x61, 0xe5, 0x16, 0xaf, 0x5b, 0xe1, 0xdf, 0x8d, 0xe3, 0x67, 0xa5, 0xb6,
	0x34, 0xbf, 0x59, 0x92, 0xfa, 0x6d, 0xed, 0x95, 0xd1, 0xbc, 0x86, 0xe6, 0xe2, 0x11, 0x57, 0xe8,
	0xbc, 0x28, 0xea, 0x7c, 0x5a, 0xd2, 0xd1, 0x8d, 0xa6, 0x0b, 0xd9, 0x70, 0xb4, 0x60, 0xb8, 0x15,
	0x2a, 0xcf, 0x8b, 0x2a, 0x4d, 0x5d, 0xa5, 0x68, 0x2e, 0x5d, 0xe2, 0x67, 0xd8, 0xaf, 0x9a, 0x6c,
	0x45, 0xfd, 0xaf, 0x8a, 0xf5, 0x8f, 0xf4, 0xfa, 0x9a, 0xa7, 0xf4, 0xe2, 0x1c, 0xcc, 0xc7, 0x87,
	0x59, 0x21, 0xf3, 0xb2, 0x28, 0xf3, 0x99, 0x2e, 0x53, 0x69, 0x2d, 0x4d, 0xf0, 0xf4, 0xeb, 0xbf,
	0xee, 0x4d, 0xe3, 0xc3, 0xbd, 0x69, 0xfc, 0x73, 0x6f, 0x1a, 0xbf, 0x3f, 0x98, 0x4b, 0x1f, 0x1e,
	0xcc, 0xa5, 0xbf, 0x1f, 0xcc, 0x25, 0x38, 0x70, 0xb8, 0xdf, 0xed, 0xdb, 0x6e, 0x34, 0xeb, 0x46,
	0x2c, 0xbc, 0x65, 0x61, 0x77, 0x6c, 0xc7, 0xf6, 0xd5, 0x2a, 0xfe, 0x15, 0x78, 0xf1, 0x5f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xe5, 0x02, 0xee, 0xcf, 0x20, 0x0c, 0x00, 0x00,
}

func (m *EquipMent_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipMent_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipMent_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CurrencyType != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.CurrencyType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc0
	}
	if m.Price != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.MaxSocketNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.MaxSocketNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.MinSocketNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.MinSocketNum))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.FixedAffix) > 0 {
		dAtA2 := make([]byte, len(m.FixedAffix)*10)
		var j1 int
		for _, num := range m.FixedAffix {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintEquip_Config(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if len(m.AffixDropID) > 0 {
		dAtA4 := make([]byte, len(m.AffixDropID)*10)
		var j3 int
		for _, num := range m.AffixDropID {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintEquip_Config(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x82
	}
	if m.RoleLevelRequire != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.RoleLevelRequire))
		i--
		dAtA[i] = 0x78
	}
	if m.JobRequire != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.JobRequire))
		i--
		dAtA[i] = 0x70
	}
	if m.JobTypeRequire != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.JobTypeRequire))
		i--
		dAtA[i] = 0x68
	}
	if m.IsPrecious {
		i--
		if m.IsPrecious {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.GoldEquipID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.GoldEquipID))
		i--
		dAtA[i] = 0x58
	}
	if m.SuitEquipID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.SuitEquipID))
		i--
		dAtA[i] = 0x50
	}
	if m.Position != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Position))
		i--
		dAtA[i] = 0x48
	}
	if m.Class != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Class))
		i--
		dAtA[i] = 0x40
	}
	if m.Type != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x38
	}
	if m.Quality != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x30
	}
	if m.QualityLevel != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.QualityLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.ItemLevel != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.ItemLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEquip_Config(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EquipAffix_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EquipAffix_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EquipAffix_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BuffAffixType != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.BuffAffixType))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.BuffAffixScore != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.BuffAffixScore))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.BuffID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.BuffID))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.MaxAffixAttValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MaxAffixAttValue))))
		i--
		dAtA[i] = 0x7d
	}
	if m.MinAffixAttValue != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MinAffixAttValue))))
		i--
		dAtA[i] = 0x75
	}
	if m.AffixParam != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixParam))
		i--
		dAtA[i] = 0x68
	}
	if m.AffixPrecision != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixPrecision))
		i--
		dAtA[i] = 0x60
	}
	if m.AffixAttID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixAttID))
		i--
		dAtA[i] = 0x58
	}
	if m.AffixEffectType != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixEffectType))
		i--
		dAtA[i] = 0x50
	}
	if m.AffixGroup != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixGroup))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PositionLimit) > 0 {
		dAtA6 := make([]byte, len(m.PositionLimit)*10)
		var j5 int
		for _, num := range m.PositionLimit {
			for num >= 1<<7 {
				dAtA6[j5] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j5++
			}
			dAtA6[j5] = uint8(num)
			j5++
		}
		i -= j5
		copy(dAtA[i:], dAtA6[:j5])
		i = encodeVarintEquip_Config(dAtA, i, uint64(j5))
		i--
		dAtA[i] = 0x42
	}
	if len(m.QualityLimit) > 0 {
		dAtA8 := make([]byte, len(m.QualityLimit)*10)
		var j7 int
		for _, num := range m.QualityLimit {
			for num >= 1<<7 {
				dAtA8[j7] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j7++
			}
			dAtA8[j7] = uint8(num)
			j7++
		}
		i -= j7
		copy(dAtA[i:], dAtA8[:j7])
		i = encodeVarintEquip_Config(dAtA, i, uint64(j7))
		i--
		dAtA[i] = 0x3a
	}
	if m.AffixType != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixType))
		i--
		dAtA[i] = 0x30
	}
	if m.AffixPlace != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixPlace))
		i--
		dAtA[i] = 0x28
	}
	if m.AffixLevel != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixLevel))
		i--
		dAtA[i] = 0x20
	}
	if m.TypeID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.TypeID))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AffixName) > 0 {
		i -= len(m.AffixName)
		copy(dAtA[i:], m.AffixName)
		i = encodeVarintEquip_Config(dAtA, i, uint64(len(m.AffixName)))
		i--
		dAtA[i] = 0x12
	}
	if m.AffixID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.AffixID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Quality_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Quality_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Quality_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DecorationSuffixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.DecorationSuffixNum))
		i--
		dAtA[i] = 0x60
	}
	if m.DecorationPrefixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.DecorationPrefixNum))
		i--
		dAtA[i] = 0x58
	}
	if m.GemSuffixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.GemSuffixNum))
		i--
		dAtA[i] = 0x50
	}
	if m.GemPrefixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.GemPrefixNum))
		i--
		dAtA[i] = 0x48
	}
	if m.EquipSuffixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.EquipSuffixNum))
		i--
		dAtA[i] = 0x40
	}
	if m.EquipPrefixNum != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.EquipPrefixNum))
		i--
		dAtA[i] = 0x38
	}
	if m.GemRate != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.GemRate))
		i--
		dAtA[i] = 0x30
	}
	if m.LuckyCoe != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.LuckyCoe))
		i--
		dAtA[i] = 0x28
	}
	if m.Boss != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Boss))
		i--
		dAtA[i] = 0x20
	}
	if m.Elit != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Elit))
		i--
		dAtA[i] = 0x18
	}
	if m.Common != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Common))
		i--
		dAtA[i] = 0x10
	}
	if m.Quality != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Hole_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hole_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hole_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HoleAdd != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.HoleAdd))
		i--
		dAtA[i] = 0x18
	}
	if m.MaxLevel != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.MaxLevel))
		i--
		dAtA[i] = 0x10
	}
	if m.MinLevel != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.MinLevel))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AttEnumEration_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AttEnumEration_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AttEnumEration_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ScoreType != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.ScoreType))
		i--
		dAtA[i] = 0x20
	}
	if m.ScoreParam != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ScoreParam))))
		i--
		dAtA[i] = 0x1d
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEquip_Config(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintEquip_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Equip_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equip_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equip_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AttEnumEration_ConfigItems) > 0 {
		for k := range m.AttEnumEration_ConfigItems {
			v := m.AttEnumEration_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEquip_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEquip_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquip_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Hole_ConfigItems) > 0 {
		for k := range m.Hole_ConfigItems {
			v := m.Hole_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEquip_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEquip_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquip_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Quality_ConfigItems) > 0 {
		for k := range m.Quality_ConfigItems {
			v := m.Quality_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEquip_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEquip_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquip_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.EquipAffix_ConfigItems) > 0 {
		for k := range m.EquipAffix_ConfigItems {
			v := m.EquipAffix_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEquip_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEquip_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquip_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.EquipMent_ConfigItems) > 0 {
		for k := range m.EquipMent_ConfigItems {
			v := m.EquipMent_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintEquip_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintEquip_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintEquip_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintEquip_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovEquip_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EquipMent_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEquip_Config(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEquip_Config(uint64(l))
	}
	if m.TypeID != 0 {
		n += 1 + sovEquip_Config(uint64(m.TypeID))
	}
	if m.ItemLevel != 0 {
		n += 1 + sovEquip_Config(uint64(m.ItemLevel))
	}
	if m.QualityLevel != 0 {
		n += 1 + sovEquip_Config(uint64(m.QualityLevel))
	}
	if m.Quality != 0 {
		n += 1 + sovEquip_Config(uint64(m.Quality))
	}
	if m.Type != 0 {
		n += 1 + sovEquip_Config(uint64(m.Type))
	}
	if m.Class != 0 {
		n += 1 + sovEquip_Config(uint64(m.Class))
	}
	if m.Position != 0 {
		n += 1 + sovEquip_Config(uint64(m.Position))
	}
	if m.SuitEquipID != 0 {
		n += 1 + sovEquip_Config(uint64(m.SuitEquipID))
	}
	if m.GoldEquipID != 0 {
		n += 1 + sovEquip_Config(uint64(m.GoldEquipID))
	}
	if m.IsPrecious {
		n += 2
	}
	if m.JobTypeRequire != 0 {
		n += 1 + sovEquip_Config(uint64(m.JobTypeRequire))
	}
	if m.JobRequire != 0 {
		n += 1 + sovEquip_Config(uint64(m.JobRequire))
	}
	if m.RoleLevelRequire != 0 {
		n += 1 + sovEquip_Config(uint64(m.RoleLevelRequire))
	}
	if len(m.AffixDropID) > 0 {
		l = 0
		for _, e := range m.AffixDropID {
			l += sovEquip_Config(uint64(e))
		}
		n += 2 + sovEquip_Config(uint64(l)) + l
	}
	if len(m.FixedAffix) > 0 {
		l = 0
		for _, e := range m.FixedAffix {
			l += sovEquip_Config(uint64(e))
		}
		n += 2 + sovEquip_Config(uint64(l)) + l
	}
	if m.MinSocketNum != 0 {
		n += 2 + sovEquip_Config(uint64(m.MinSocketNum))
	}
	if m.MaxSocketNum != 0 {
		n += 2 + sovEquip_Config(uint64(m.MaxSocketNum))
	}
	if m.Price != 0 {
		n += 2 + sovEquip_Config(uint64(m.Price))
	}
	if m.CurrencyType != 0 {
		n += 2 + sovEquip_Config(uint64(m.CurrencyType))
	}
	return n
}

func (m *EquipAffix_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AffixID != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixID))
	}
	l = len(m.AffixName)
	if l > 0 {
		n += 1 + l + sovEquip_Config(uint64(l))
	}
	if m.TypeID != 0 {
		n += 1 + sovEquip_Config(uint64(m.TypeID))
	}
	if m.AffixLevel != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixLevel))
	}
	if m.AffixPlace != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixPlace))
	}
	if m.AffixType != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixType))
	}
	if len(m.QualityLimit) > 0 {
		l = 0
		for _, e := range m.QualityLimit {
			l += sovEquip_Config(uint64(e))
		}
		n += 1 + sovEquip_Config(uint64(l)) + l
	}
	if len(m.PositionLimit) > 0 {
		l = 0
		for _, e := range m.PositionLimit {
			l += sovEquip_Config(uint64(e))
		}
		n += 1 + sovEquip_Config(uint64(l)) + l
	}
	if m.AffixGroup != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixGroup))
	}
	if m.AffixEffectType != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixEffectType))
	}
	if m.AffixAttID != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixAttID))
	}
	if m.AffixPrecision != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixPrecision))
	}
	if m.AffixParam != 0 {
		n += 1 + sovEquip_Config(uint64(m.AffixParam))
	}
	if m.MinAffixAttValue != 0 {
		n += 5
	}
	if m.MaxAffixAttValue != 0 {
		n += 5
	}
	if m.BuffID != 0 {
		n += 2 + sovEquip_Config(uint64(m.BuffID))
	}
	if m.BuffAffixScore != 0 {
		n += 2 + sovEquip_Config(uint64(m.BuffAffixScore))
	}
	if m.BuffAffixType != 0 {
		n += 2 + sovEquip_Config(uint64(m.BuffAffixType))
	}
	return n
}

func (m *Quality_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovEquip_Config(uint64(m.Quality))
	}
	if m.Common != 0 {
		n += 1 + sovEquip_Config(uint64(m.Common))
	}
	if m.Elit != 0 {
		n += 1 + sovEquip_Config(uint64(m.Elit))
	}
	if m.Boss != 0 {
		n += 1 + sovEquip_Config(uint64(m.Boss))
	}
	if m.LuckyCoe != 0 {
		n += 1 + sovEquip_Config(uint64(m.LuckyCoe))
	}
	if m.GemRate != 0 {
		n += 1 + sovEquip_Config(uint64(m.GemRate))
	}
	if m.EquipPrefixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.EquipPrefixNum))
	}
	if m.EquipSuffixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.EquipSuffixNum))
	}
	if m.GemPrefixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.GemPrefixNum))
	}
	if m.GemSuffixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.GemSuffixNum))
	}
	if m.DecorationPrefixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.DecorationPrefixNum))
	}
	if m.DecorationSuffixNum != 0 {
		n += 1 + sovEquip_Config(uint64(m.DecorationSuffixNum))
	}
	return n
}

func (m *Hole_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MinLevel != 0 {
		n += 1 + sovEquip_Config(uint64(m.MinLevel))
	}
	if m.MaxLevel != 0 {
		n += 1 + sovEquip_Config(uint64(m.MaxLevel))
	}
	if m.HoleAdd != 0 {
		n += 1 + sovEquip_Config(uint64(m.HoleAdd))
	}
	return n
}

func (m *AttEnumEration_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovEquip_Config(uint64(m.ID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEquip_Config(uint64(l))
	}
	if m.ScoreParam != 0 {
		n += 5
	}
	if m.ScoreType != 0 {
		n += 1 + sovEquip_Config(uint64(m.ScoreType))
	}
	return n
}

func (m *Equip_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EquipMent_ConfigItems) > 0 {
		for k, v := range m.EquipMent_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip_Config(uint64(l))
			}
			mapEntrySize := 1 + sovEquip_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip_Config(uint64(mapEntrySize))
		}
	}
	if len(m.EquipAffix_ConfigItems) > 0 {
		for k, v := range m.EquipAffix_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip_Config(uint64(l))
			}
			mapEntrySize := 1 + sovEquip_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Quality_ConfigItems) > 0 {
		for k, v := range m.Quality_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip_Config(uint64(l))
			}
			mapEntrySize := 1 + sovEquip_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip_Config(uint64(mapEntrySize))
		}
	}
	if len(m.Hole_ConfigItems) > 0 {
		for k, v := range m.Hole_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip_Config(uint64(l))
			}
			mapEntrySize := 1 + sovEquip_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip_Config(uint64(mapEntrySize))
		}
	}
	if len(m.AttEnumEration_ConfigItems) > 0 {
		for k, v := range m.AttEnumEration_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovEquip_Config(uint64(l))
			}
			mapEntrySize := 1 + sovEquip_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovEquip_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovEquip_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEquip_Config(x uint64) (n int) {
	return sovEquip_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EquipMent_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipMent_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipMent_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemLevel", wireType)
			}
			m.ItemLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityLevel", wireType)
			}
			m.QualityLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.QualityLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Class", wireType)
			}
			m.Class = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Class |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			m.Position = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Position |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuitEquipID", wireType)
			}
			m.SuitEquipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SuitEquipID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GoldEquipID", wireType)
			}
			m.GoldEquipID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GoldEquipID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrecious", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrecious = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobTypeRequire", wireType)
			}
			m.JobTypeRequire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobTypeRequire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JobRequire", wireType)
			}
			m.JobRequire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JobRequire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleLevelRequire", wireType)
			}
			m.RoleLevelRequire = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoleLevelRequire |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.AffixDropID = append(m.AffixDropID, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquip_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEquip_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.AffixDropID) == 0 {
					m.AffixDropID = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.AffixDropID = append(m.AffixDropID, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixDropID", wireType)
			}
		case 17:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.FixedAffix = append(m.FixedAffix, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquip_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEquip_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.FixedAffix) == 0 {
					m.FixedAffix = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.FixedAffix = append(m.FixedAffix, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedAffix", wireType)
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinSocketNum", wireType)
			}
			m.MinSocketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinSocketNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxSocketNum", wireType)
			}
			m.MaxSocketNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxSocketNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 24:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrencyType", wireType)
			}
			m.CurrencyType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrencyType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EquipAffix_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EquipAffix_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EquipAffix_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixID", wireType)
			}
			m.AffixID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AffixName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeID", wireType)
			}
			m.TypeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TypeID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixLevel", wireType)
			}
			m.AffixLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixPlace", wireType)
			}
			m.AffixPlace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixPlace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixType", wireType)
			}
			m.AffixType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.QualityLimit = append(m.QualityLimit, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquip_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEquip_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.QualityLimit) == 0 {
					m.QualityLimit = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.QualityLimit = append(m.QualityLimit, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field QualityLimit", wireType)
			}
		case 8:
			if wireType == 0 {
				var v uint32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PositionLimit = append(m.PositionLimit, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthEquip_Config
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthEquip_Config
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PositionLimit) == 0 {
					m.PositionLimit = make([]uint32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PositionLimit = append(m.PositionLimit, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionLimit", wireType)
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixGroup", wireType)
			}
			m.AffixGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixGroup |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixEffectType", wireType)
			}
			m.AffixEffectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixEffectType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixAttID", wireType)
			}
			m.AffixAttID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixAttID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixPrecision", wireType)
			}
			m.AffixPrecision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixPrecision |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixParam", wireType)
			}
			m.AffixParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixParam |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinAffixAttValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MinAffixAttValue = float32(math.Float32frombits(v))
		case 15:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxAffixAttValue", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MaxAffixAttValue = float32(math.Float32frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffID", wireType)
			}
			m.BuffID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffAffixScore", wireType)
			}
			m.BuffAffixScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffAffixScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BuffAffixType", wireType)
			}
			m.BuffAffixType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BuffAffixType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Quality_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Quality_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Quality_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Common", wireType)
			}
			m.Common = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Common |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Elit", wireType)
			}
			m.Elit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Elit |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Boss", wireType)
			}
			m.Boss = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Boss |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LuckyCoe", wireType)
			}
			m.LuckyCoe = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LuckyCoe |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemRate", wireType)
			}
			m.GemRate = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemRate |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipPrefixNum", wireType)
			}
			m.EquipPrefixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipPrefixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipSuffixNum", wireType)
			}
			m.EquipSuffixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EquipSuffixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemPrefixNum", wireType)
			}
			m.GemPrefixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemPrefixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GemSuffixNum", wireType)
			}
			m.GemSuffixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GemSuffixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecorationPrefixNum", wireType)
			}
			m.DecorationPrefixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecorationPrefixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DecorationSuffixNum", wireType)
			}
			m.DecorationSuffixNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DecorationSuffixNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Hole_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hole_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hole_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinLevel", wireType)
			}
			m.MinLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxLevel", wireType)
			}
			m.MaxLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoleAdd", wireType)
			}
			m.HoleAdd = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoleAdd |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AttEnumEration_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AttEnumEration_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AttEnumEration_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreParam", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ScoreParam = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScoreType", wireType)
			}
			m.ScoreType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ScoreType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equip_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equip_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equip_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipMent_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipMent_ConfigItems == nil {
				m.EquipMent_ConfigItems = make(map[uint32]*EquipMent_Config)
			}
			var mapkey uint32
			var mapvalue *EquipMent_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EquipMent_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipMent_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipAffix_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipAffix_ConfigItems == nil {
				m.EquipAffix_ConfigItems = make(map[uint32]*EquipAffix_Config)
			}
			var mapkey uint32
			var mapvalue *EquipAffix_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &EquipAffix_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EquipAffix_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Quality_ConfigItems == nil {
				m.Quality_ConfigItems = make(map[uint32]*Quality_Config)
			}
			var mapkey uint32
			var mapvalue *Quality_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Quality_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Quality_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hole_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Hole_ConfigItems == nil {
				m.Hole_ConfigItems = make(map[uint32]*Hole_Config)
			}
			var mapkey uint32
			var mapvalue *Hole_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Hole_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Hole_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AttEnumEration_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEquip_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AttEnumEration_ConfigItems == nil {
				m.AttEnumEration_ConfigItems = make(map[uint32]*AttEnumEration_Config)
			}
			var mapkey uint32
			var mapvalue *AttEnumEration_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowEquip_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowEquip_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthEquip_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AttEnumEration_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipEquip_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthEquip_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AttEnumEration_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEquip_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthEquip_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEquip_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEquip_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEquip_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEquip_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEquip_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEquip_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEquip_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEquip_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEquip_Config = fmt.Errorf("proto: unexpected end of group")
)
