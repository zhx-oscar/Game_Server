// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: AIData_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AIData_Config struct {
	//* AIID
	ID uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	//* 行为树名字
	TreeName string `protobuf:"bytes,2,opt,name=TreeName,proto3" json:"TreeName,omitempty"`
	//* 黑板变量
	BlackBoardKeys string `protobuf:"bytes,3,opt,name=BlackBoardKeys,proto3" json:"BlackBoardKeys,omitempty"`
}

func (m *AIData_Config) Reset()         { *m = AIData_Config{} }
func (m *AIData_Config) String() string { return proto.CompactTextString(m) }
func (*AIData_Config) ProtoMessage()    {}
func (*AIData_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_d62abfc9b08047a7, []int{0}
}
func (m *AIData_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AIData_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AIData_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AIData_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AIData_Config.Merge(m, src)
}
func (m *AIData_Config) XXX_Size() int {
	return m.Size()
}
func (m *AIData_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_AIData_Config.DiscardUnknown(m)
}

var xxx_messageInfo_AIData_Config proto.InternalMessageInfo

func (m *AIData_Config) GetID() uint32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *AIData_Config) GetTreeName() string {
	if m != nil {
		return m.TreeName
	}
	return ""
}

func (m *AIData_Config) GetBlackBoardKeys() string {
	if m != nil {
		return m.BlackBoardKeys
	}
	return ""
}

type AIData_Config_Data struct {
	AIData_ConfigItems map[uint32]*AIData_Config `protobuf:"bytes,1,rep,name=AIData_Config_items,json=AIDataConfigItems,proto3" json:"AIData_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *AIData_Config_Data) Reset()         { *m = AIData_Config_Data{} }
func (m *AIData_Config_Data) String() string { return proto.CompactTextString(m) }
func (*AIData_Config_Data) ProtoMessage()    {}
func (*AIData_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_d62abfc9b08047a7, []int{1}
}
func (m *AIData_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AIData_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AIData_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AIData_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AIData_Config_Data.Merge(m, src)
}
func (m *AIData_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *AIData_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_AIData_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_AIData_Config_Data proto.InternalMessageInfo

func (m *AIData_Config_Data) GetAIData_ConfigItems() map[uint32]*AIData_Config {
	if m != nil {
		return m.AIData_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*AIData_Config)(nil), "DataTables.AIData_Config")
	proto.RegisterType((*AIData_Config_Data)(nil), "DataTables.AIData_Config_Data")
	proto.RegisterMapType((map[uint32]*AIData_Config)(nil), "DataTables.AIData_Config_Data.AIDataConfigItemsEntry")
}

func init() { proto.RegisterFile("AIData_Config.proto", fileDescriptor_d62abfc9b08047a7) }

var fileDescriptor_d62abfc9b08047a7 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x76, 0xf4, 0x74, 0x49,
	0x2c, 0x49, 0x8c, 0x77, 0xce, 0xcf, 0x4b, 0xcb, 0x4c, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17,
	0xe2, 0x02, 0x09, 0x85, 0x24, 0x26, 0xe5, 0xa4, 0x16, 0x2b, 0x25, 0x73, 0xf1, 0xa2, 0x28, 0x11,
	0xe2, 0xe3, 0x62, 0xf2, 0x74, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0d, 0x62, 0xf2, 0x74, 0x11,
	0x92, 0xe2, 0xe2, 0x08, 0x29, 0x4a, 0x4d, 0xf5, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x52, 0x60, 0xd4,
	0xe0, 0x0c, 0x82, 0xf3, 0x85, 0xd4, 0xb8, 0xf8, 0x9c, 0x72, 0x12, 0x93, 0xb3, 0x9d, 0xf2, 0x13,
	0x8b, 0x52, 0xbc, 0x53, 0x2b, 0x8b, 0x25, 0x98, 0xc1, 0x2a, 0xd0, 0x44, 0x95, 0xee, 0x30, 0x72,
	0x09, 0xa1, 0xd8, 0x12, 0x0f, 0x62, 0x0b, 0xa5, 0xa2, 0x39, 0x2f, 0x3e, 0xb3, 0x24, 0x35, 0xb7,
	0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0xdb, 0xc8, 0x54, 0x0f, 0xe1, 0x4a, 0x3d, 0x4c, 0xcd, 0x50,
	0x21, 0x88, 0x88, 0x27, 0x48, 0x9f, 0x6b, 0x5e, 0x49, 0x51, 0x65, 0x90, 0x20, 0x86, 0xb8, 0x54,
	0x3c, 0x97, 0x18, 0x76, 0xc5, 0x42, 0x02, 0x5c, 0xcc, 0xd9, 0xa9, 0x95, 0x50, 0xcf, 0x82, 0x98,
	0x42, 0xfa, 0x5c, 0xac, 0x65, 0x89, 0x39, 0xa5, 0x10, 0xaf, 0x72, 0x1b, 0x49, 0xe2, 0x74, 0x44,
	0x10, 0x44, 0x9d, 0x15, 0x93, 0x05, 0xa3, 0x93, 0xfe, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85, 0xc7, 0x72, 0x0c, 0x37, 0x1e,
	0xcb, 0x31, 0x70, 0x89, 0x26, 0xe7, 0xe7, 0xea, 0xb9, 0x24, 0x66, 0x16, 0x57, 0xea, 0x15, 0xa7,
	0x16, 0x95, 0xa5, 0x16, 0xe9, 0xa5, 0x24, 0x96, 0x24, 0x26, 0xb1, 0x81, 0xe3, 0xc1, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0xca, 0xc5, 0x91, 0x11, 0x9e, 0x01, 0x00, 0x00,
}

func (m *AIData_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AIData_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AIData_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlackBoardKeys) > 0 {
		i -= len(m.BlackBoardKeys)
		copy(dAtA[i:], m.BlackBoardKeys)
		i = encodeVarintAIData_Config(dAtA, i, uint64(len(m.BlackBoardKeys)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TreeName) > 0 {
		i -= len(m.TreeName)
		copy(dAtA[i:], m.TreeName)
		i = encodeVarintAIData_Config(dAtA, i, uint64(len(m.TreeName)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintAIData_Config(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AIData_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AIData_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AIData_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AIData_ConfigItems) > 0 {
		for k := range m.AIData_ConfigItems {
			v := m.AIData_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintAIData_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintAIData_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintAIData_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintAIData_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovAIData_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *AIData_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovAIData_Config(uint64(m.ID))
	}
	l = len(m.TreeName)
	if l > 0 {
		n += 1 + l + sovAIData_Config(uint64(l))
	}
	l = len(m.BlackBoardKeys)
	if l > 0 {
		n += 1 + l + sovAIData_Config(uint64(l))
	}
	return n
}

func (m *AIData_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AIData_ConfigItems) > 0 {
		for k, v := range m.AIData_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovAIData_Config(uint64(l))
			}
			mapEntrySize := 1 + sovAIData_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovAIData_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovAIData_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAIData_Config(x uint64) (n int) {
	return sovAIData_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *AIData_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAIData_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AIData_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AIData_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TreeName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAIData_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TreeName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlackBoardKeys", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAIData_Config
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlackBoardKeys = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAIData_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AIData_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAIData_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AIData_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AIData_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AIData_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAIData_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AIData_ConfigItems == nil {
				m.AIData_ConfigItems = make(map[uint32]*AIData_Config)
			}
			var mapkey uint32
			var mapvalue *AIData_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowAIData_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAIData_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowAIData_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthAIData_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthAIData_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &AIData_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipAIData_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthAIData_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.AIData_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAIData_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAIData_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAIData_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAIData_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAIData_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAIData_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAIData_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAIData_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAIData_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAIData_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAIData_Config = fmt.Errorf("proto: unexpected end of group")
)
