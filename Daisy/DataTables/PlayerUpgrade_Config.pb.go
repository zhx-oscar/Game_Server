// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: PlayerUpgrade_Config.proto

package DataTables

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PlayerUpgrade_Config struct {
	//* 等级
	Level uint32 `protobuf:"varint,1,opt,name=Level,proto3" json:"Level,omitempty"`
	//* 升到此等级需要的经验值
	Exp uint32 `protobuf:"varint,2,opt,name=Exp,proto3" json:"Exp,omitempty"`
}

func (m *PlayerUpgrade_Config) Reset()         { *m = PlayerUpgrade_Config{} }
func (m *PlayerUpgrade_Config) String() string { return proto.CompactTextString(m) }
func (*PlayerUpgrade_Config) ProtoMessage()    {}
func (*PlayerUpgrade_Config) Descriptor() ([]byte, []int) {
	return fileDescriptor_fecf1dc81637537f, []int{0}
}
func (m *PlayerUpgrade_Config) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerUpgrade_Config) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerUpgrade_Config.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerUpgrade_Config) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerUpgrade_Config.Merge(m, src)
}
func (m *PlayerUpgrade_Config) XXX_Size() int {
	return m.Size()
}
func (m *PlayerUpgrade_Config) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerUpgrade_Config.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerUpgrade_Config proto.InternalMessageInfo

func (m *PlayerUpgrade_Config) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *PlayerUpgrade_Config) GetExp() uint32 {
	if m != nil {
		return m.Exp
	}
	return 0
}

type PlayerUpgrade_Config_Data struct {
	PlayerUpgrade_ConfigItems map[uint32]*PlayerUpgrade_Config `protobuf:"bytes,1,rep,name=PlayerUpgrade_Config_items,json=PlayerUpgradeConfigItems,proto3" json:"PlayerUpgrade_Config_items,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *PlayerUpgrade_Config_Data) Reset()         { *m = PlayerUpgrade_Config_Data{} }
func (m *PlayerUpgrade_Config_Data) String() string { return proto.CompactTextString(m) }
func (*PlayerUpgrade_Config_Data) ProtoMessage()    {}
func (*PlayerUpgrade_Config_Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_fecf1dc81637537f, []int{1}
}
func (m *PlayerUpgrade_Config_Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerUpgrade_Config_Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerUpgrade_Config_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerUpgrade_Config_Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerUpgrade_Config_Data.Merge(m, src)
}
func (m *PlayerUpgrade_Config_Data) XXX_Size() int {
	return m.Size()
}
func (m *PlayerUpgrade_Config_Data) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerUpgrade_Config_Data.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerUpgrade_Config_Data proto.InternalMessageInfo

func (m *PlayerUpgrade_Config_Data) GetPlayerUpgrade_ConfigItems() map[uint32]*PlayerUpgrade_Config {
	if m != nil {
		return m.PlayerUpgrade_ConfigItems
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerUpgrade_Config)(nil), "DataTables.PlayerUpgrade_Config")
	proto.RegisterType((*PlayerUpgrade_Config_Data)(nil), "DataTables.PlayerUpgrade_Config_Data")
	proto.RegisterMapType((map[uint32]*PlayerUpgrade_Config)(nil), "DataTables.PlayerUpgrade_Config_Data.PlayerUpgradeConfigItemsEntry")
}

func init() { proto.RegisterFile("PlayerUpgrade_Config.proto", fileDescriptor_fecf1dc81637537f) }

var fileDescriptor_fecf1dc81637537f = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x0a, 0xc8, 0x49, 0xac,
	0x4c, 0x2d, 0x0a, 0x2d, 0x48, 0x2f, 0x4a, 0x4c, 0x49, 0x8d, 0x77, 0xce, 0xcf, 0x4b, 0xcb, 0x4c,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x72, 0x49, 0x2c, 0x49, 0x0c, 0x49, 0x4c, 0xca,
	0x49, 0x2d, 0x56, 0xb2, 0xe3, 0x12, 0xc1, 0xa6, 0x52, 0x48, 0x84, 0x8b, 0xd5, 0x27, 0xb5, 0x2c,
	0x35, 0x47, 0x82, 0x51, 0x81, 0x51, 0x83, 0x37, 0x08, 0xc2, 0x11, 0x12, 0xe0, 0x62, 0x76, 0xad,
	0x28, 0x90, 0x60, 0x02, 0x8b, 0x81, 0x98, 0x4a, 0x7d, 0x4c, 0x5c, 0x92, 0xd8, 0x0c, 0x88, 0x07,
	0xd9, 0x21, 0xd4, 0xc8, 0x88, 0xdd, 0x21, 0xf1, 0x99, 0x25, 0xa9, 0xb9, 0xc5, 0x12, 0x8c, 0x0a,
	0xcc, 0x1a, 0xdc, 0x46, 0xce, 0x7a, 0x08, 0xf7, 0xe8, 0xe1, 0x34, 0x0b, 0x55, 0x06, 0x22, 0xe1,
	0x09, 0x32, 0xc5, 0x35, 0xaf, 0xa4, 0xa8, 0x32, 0x48, 0x02, 0x97, 0xb4, 0x54, 0x2e, 0x97, 0x2c,
	0x5e, 0xad, 0x20, 0x4f, 0x65, 0xa7, 0x56, 0x42, 0x3d, 0x0a, 0x62, 0x0a, 0x99, 0x71, 0xb1, 0x96,
	0x25, 0xe6, 0x94, 0xa6, 0x82, 0x3d, 0xca, 0x6d, 0xa4, 0x40, 0xc8, 0x81, 0x41, 0x10, 0xe5, 0x56,
	0x4c, 0x16, 0x8c, 0x4e, 0xfa, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91,
	0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0xc0, 0x25,
	0x9a, 0x9c, 0x9f, 0xab, 0xe7, 0x92, 0x98, 0x59, 0x5c, 0xa9, 0x57, 0x9c, 0x5a, 0x54, 0x96, 0x5a,
	0xa4, 0x97, 0x92, 0x58, 0x92, 0x98, 0xc4, 0x06, 0x8e, 0x14, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0xc1, 0xd3, 0xb1, 0xb2, 0x01, 0x00, 0x00,
}

func (m *PlayerUpgrade_Config) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerUpgrade_Config) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerUpgrade_Config) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exp != 0 {
		i = encodeVarintPlayerUpgrade_Config(dAtA, i, uint64(m.Exp))
		i--
		dAtA[i] = 0x10
	}
	if m.Level != 0 {
		i = encodeVarintPlayerUpgrade_Config(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PlayerUpgrade_Config_Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerUpgrade_Config_Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PlayerUpgrade_Config_Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlayerUpgrade_ConfigItems) > 0 {
		for k := range m.PlayerUpgrade_ConfigItems {
			v := m.PlayerUpgrade_ConfigItems[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintPlayerUpgrade_Config(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintPlayerUpgrade_Config(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintPlayerUpgrade_Config(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPlayerUpgrade_Config(dAtA []byte, offset int, v uint64) int {
	offset -= sovPlayerUpgrade_Config(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PlayerUpgrade_Config) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Level != 0 {
		n += 1 + sovPlayerUpgrade_Config(uint64(m.Level))
	}
	if m.Exp != 0 {
		n += 1 + sovPlayerUpgrade_Config(uint64(m.Exp))
	}
	return n
}

func (m *PlayerUpgrade_Config_Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PlayerUpgrade_ConfigItems) > 0 {
		for k, v := range m.PlayerUpgrade_ConfigItems {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPlayerUpgrade_Config(uint64(l))
			}
			mapEntrySize := 1 + sovPlayerUpgrade_Config(uint64(k)) + l
			n += mapEntrySize + 1 + sovPlayerUpgrade_Config(uint64(mapEntrySize))
		}
	}
	return n
}

func sovPlayerUpgrade_Config(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPlayerUpgrade_Config(x uint64) (n int) {
	return sovPlayerUpgrade_Config(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerUpgrade_Config) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerUpgrade_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerUpgrade_Config: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerUpgrade_Config: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerUpgrade_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exp", wireType)
			}
			m.Exp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerUpgrade_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exp |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerUpgrade_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerUpgrade_Config_Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerUpgrade_Config
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerUpgrade_Config_Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerUpgrade_Config_Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlayerUpgrade_ConfigItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerUpgrade_Config
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PlayerUpgrade_ConfigItems == nil {
				m.PlayerUpgrade_ConfigItems = make(map[uint32]*PlayerUpgrade_Config)
			}
			var mapkey uint32
			var mapvalue *PlayerUpgrade_Config
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerUpgrade_Config
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerUpgrade_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerUpgrade_Config
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPlayerUpgrade_Config
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPlayerUpgrade_Config
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PlayerUpgrade_Config{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerUpgrade_Config(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPlayerUpgrade_Config
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.PlayerUpgrade_ConfigItems[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerUpgrade_Config(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerUpgrade_Config
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerUpgrade_Config(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerUpgrade_Config
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerUpgrade_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerUpgrade_Config
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerUpgrade_Config
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPlayerUpgrade_Config
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPlayerUpgrade_Config
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPlayerUpgrade_Config        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerUpgrade_Config          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPlayerUpgrade_Config = fmt.Errorf("proto: unexpected end of group")
)
