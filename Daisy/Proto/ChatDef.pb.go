// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ChatDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 频道群组类型
type ChatMessage_ChatMsgType int32

const (
	ChatMessage_MsgTypePrivate ChatMessage_ChatMsgType = 0
	ChatMessage_MsgTypeGroup   ChatMessage_ChatMsgType = 1
)

var ChatMessage_ChatMsgType_name = map[int32]string{
	0: "MsgTypePrivate",
	1: "MsgTypeGroup",
}

var ChatMessage_ChatMsgType_value = map[string]int32{
	"MsgTypePrivate": 0,
	"MsgTypeGroup":   1,
}

func (x ChatMessage_ChatMsgType) String() string {
	return proto.EnumName(ChatMessage_ChatMsgType_name, int32(x))
}

func (ChatMessage_ChatMsgType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c8530bd08006c5e7, []int{0, 0}
}

// 聊天消息
type ChatMessage struct {
	Name       string                  `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	From       string                  `protobuf:"bytes,2,opt,name=From,proto3" json:"From,omitempty"`
	FromHead   string                  `protobuf:"bytes,3,opt,name=FromHead,proto3" json:"FromHead,omitempty"`
	TitleID    string                  `protobuf:"bytes,4,opt,name=TitleID,proto3" json:"TitleID,omitempty"`
	Level      string                  `protobuf:"bytes,5,opt,name=Level,proto3" json:"Level,omitempty"`
	To         string                  `protobuf:"bytes,6,opt,name=To,proto3" json:"To,omitempty"`
	MsgType    ChatMessage_ChatMsgType `protobuf:"varint,7,opt,name=MsgType,proto3,enum=ChatMessage_ChatMsgType" json:"MsgType,omitempty"`
	SendTime   int64                   `protobuf:"varint,8,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	MsgContent string                  `protobuf:"bytes,9,opt,name=MsgContent,proto3" json:"MsgContent,omitempty"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8530bd08006c5e7, []int{0}
}
func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ChatMessage) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *ChatMessage) GetFromHead() string {
	if m != nil {
		return m.FromHead
	}
	return ""
}

func (m *ChatMessage) GetTitleID() string {
	if m != nil {
		return m.TitleID
	}
	return ""
}

func (m *ChatMessage) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *ChatMessage) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *ChatMessage) GetMsgType() ChatMessage_ChatMsgType {
	if m != nil {
		return m.MsgType
	}
	return ChatMessage_MsgTypePrivate
}

func (m *ChatMessage) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *ChatMessage) GetMsgContent() string {
	if m != nil {
		return m.MsgContent
	}
	return ""
}

// 聊天历史消息
type ChatHistoryMessage struct {
	HistoryMsg []*ChatMessage `protobuf:"bytes,1,rep,name=HistoryMsg,proto3" json:"HistoryMsg,omitempty"`
}

func (m *ChatHistoryMessage) Reset()         { *m = ChatHistoryMessage{} }
func (m *ChatHistoryMessage) String() string { return proto.CompactTextString(m) }
func (*ChatHistoryMessage) ProtoMessage()    {}
func (*ChatHistoryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8530bd08006c5e7, []int{1}
}
func (m *ChatHistoryMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChatHistoryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChatHistoryMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChatHistoryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatHistoryMessage.Merge(m, src)
}
func (m *ChatHistoryMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChatHistoryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatHistoryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatHistoryMessage proto.InternalMessageInfo

func (m *ChatHistoryMessage) GetHistoryMsg() []*ChatMessage {
	if m != nil {
		return m.HistoryMsg
	}
	return nil
}

// 聊天频道系统历史消息
type ChannelChatHistoryMessage struct {
	ChannelHisMsg     map[string]*ChatHistoryMessage `protobuf:"bytes,1,rep,name=ChannelHisMsg,proto3" json:"ChannelHisMsg,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	OfflinePrivateMsg []*ChatMessage                 `protobuf:"bytes,2,rep,name=OfflinePrivateMsg,proto3" json:"OfflinePrivateMsg,omitempty"`
}

func (m *ChannelChatHistoryMessage) Reset()         { *m = ChannelChatHistoryMessage{} }
func (m *ChannelChatHistoryMessage) String() string { return proto.CompactTextString(m) }
func (*ChannelChatHistoryMessage) ProtoMessage()    {}
func (*ChannelChatHistoryMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_c8530bd08006c5e7, []int{2}
}
func (m *ChannelChatHistoryMessage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChannelChatHistoryMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChannelChatHistoryMessage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChannelChatHistoryMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChannelChatHistoryMessage.Merge(m, src)
}
func (m *ChannelChatHistoryMessage) XXX_Size() int {
	return m.Size()
}
func (m *ChannelChatHistoryMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChannelChatHistoryMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChannelChatHistoryMessage proto.InternalMessageInfo

func (m *ChannelChatHistoryMessage) GetChannelHisMsg() map[string]*ChatHistoryMessage {
	if m != nil {
		return m.ChannelHisMsg
	}
	return nil
}

func (m *ChannelChatHistoryMessage) GetOfflinePrivateMsg() []*ChatMessage {
	if m != nil {
		return m.OfflinePrivateMsg
	}
	return nil
}

func init() {
	proto.RegisterEnum("ChatMessage_ChatMsgType", ChatMessage_ChatMsgType_name, ChatMessage_ChatMsgType_value)
	proto.RegisterType((*ChatMessage)(nil), "ChatMessage")
	proto.RegisterType((*ChatHistoryMessage)(nil), "ChatHistoryMessage")
	proto.RegisterType((*ChannelChatHistoryMessage)(nil), "ChannelChatHistoryMessage")
	proto.RegisterMapType((map[string]*ChatHistoryMessage)(nil), "ChannelChatHistoryMessage.ChannelHisMsgEntry")
}

func init() { proto.RegisterFile("ChatDef.proto", fileDescriptor_c8530bd08006c5e7) }

var fileDescriptor_c8530bd08006c5e7 = []byte{
	// 408 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x8e, 0xd3, 0x40,
	0x10, 0x86, 0xbd, 0xf6, 0xf9, 0x72, 0x37, 0x39, 0x22, 0xb3, 0x50, 0x2c, 0x57, 0x18, 0xcb, 0x95,
	0x91, 0xc0, 0x85, 0xaf, 0x41, 0x57, 0x5e, 0x0e, 0x08, 0x12, 0x81, 0x93, 0xcf, 0x34, 0x74, 0x46,
	0x99, 0x38, 0x16, 0x8e, 0x37, 0xb2, 0x37, 0x91, 0x5c, 0xf3, 0x02, 0x3c, 0x0d, 0xcf, 0x40, 0x99,
	0x92, 0x12, 0x25, 0x2f, 0x82, 0x76, 0x6d, 0x07, 0x87, 0xe4, 0x2a, 0xcf, 0x7c, 0x33, 0xfb, 0xef,
	0xbf, 0xe3, 0x81, 0x47, 0xc3, 0x59, 0x2c, 0x6e, 0x71, 0xea, 0x2f, 0x0a, 0x2e, 0xb8, 0xfb, 0x53,
	0x87, 0xbe, 0x24, 0x63, 0x2c, 0xcb, 0x38, 0x41, 0x4a, 0xe1, 0xe4, 0x63, 0x3c, 0x47, 0x46, 0x1c,
	0xe2, 0x9d, 0x87, 0x2a, 0x96, 0xec, 0x6d, 0xc1, 0xe7, 0x4c, 0xaf, 0x99, 0x8c, 0xe9, 0x25, 0x9c,
	0xc9, 0xef, 0x08, 0xe3, 0x09, 0x33, 0x14, 0xdf, 0xe5, 0x94, 0x41, 0x2f, 0x4a, 0x45, 0x86, 0xef,
	0x6f, 0xd9, 0x89, 0x2a, 0xb5, 0x29, 0x7d, 0x0a, 0xe6, 0x07, 0x5c, 0x61, 0xc6, 0x4c, 0xc5, 0xeb,
	0x84, 0x0e, 0x40, 0x8f, 0x38, 0x3b, 0x55, 0x48, 0x8f, 0x38, 0x0d, 0xa0, 0x37, 0x2e, 0x93, 0xa8,
	0x5a, 0x20, 0xeb, 0x39, 0xc4, 0x1b, 0x04, 0xcc, 0xef, 0x58, 0xac, 0xe3, 0xba, 0x1e, 0xb6, 0x8d,
	0xd2, 0xcf, 0x3d, 0xe6, 0x93, 0x28, 0x9d, 0x23, 0x3b, 0x73, 0x88, 0x67, 0x84, 0xbb, 0x9c, 0xda,
	0x00, 0xe3, 0x32, 0x19, 0xf2, 0x5c, 0x60, 0x2e, 0xd8, 0xb9, 0xba, 0xa7, 0x43, 0xdc, 0xab, 0x66,
	0x04, 0x8d, 0x14, 0x85, 0x41, 0x13, 0xde, 0x15, 0xe9, 0x2a, 0x16, 0x68, 0x69, 0xd4, 0x82, 0x8b,
	0x86, 0xbd, 0x2b, 0xf8, 0x72, 0x61, 0x11, 0xf7, 0x06, 0xa8, 0x3c, 0x34, 0x4a, 0x4b, 0xc1, 0x8b,
	0xaa, 0x1d, 0xdf, 0x4b, 0x80, 0x96, 0x94, 0x09, 0x23, 0x8e, 0xe1, 0xf5, 0x83, 0x8b, 0xae, 0xfb,
	0xb0, 0x53, 0x77, 0xbf, 0xeb, 0xf0, 0x6c, 0x38, 0x8b, 0xf3, 0x1c, 0xb3, 0x23, 0x5a, 0xf7, 0xea,
	0x5f, 0xc9, 0xe2, 0x28, 0x2d, 0xff, 0xc9, 0xbd, 0xf2, 0x1f, 0x3c, 0xe2, 0xef, 0xf5, 0xbf, 0xc9,
	0x45, 0x51, 0x85, 0xfb, 0x1a, 0xf4, 0x1a, 0x1e, 0x7f, 0x9a, 0x4e, 0xb3, 0x34, 0x6f, 0x1f, 0x27,
	0x85, 0xf5, 0x23, 0x3e, 0x0f, 0xdb, 0x2e, 0x3f, 0xab, 0x27, 0xff, 0x77, 0x01, 0xb5, 0xc0, 0xf8,
	0x86, 0x55, 0xb3, 0x30, 0x32, 0xa4, 0x2f, 0xc0, 0x5c, 0xc5, 0xd9, 0x12, 0xd5, 0xc2, 0xf4, 0x83,
	0x27, 0xfe, 0xa1, 0xd3, 0xb0, 0xee, 0xb8, 0xd6, 0x5f, 0x93, 0x9b, 0xe7, 0xbf, 0x36, 0x36, 0x59,
	0x6f, 0x6c, 0xf2, 0x67, 0x63, 0x93, 0x1f, 0x5b, 0x5b, 0x5b, 0x6f, 0x6d, 0xed, 0xf7, 0xd6, 0xd6,
	0xbe, 0x98, 0x77, 0x72, 0x47, 0xbf, 0x9e, 0xaa, 0x55, 0xbd, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff,
	0x25, 0x27, 0x1d, 0xcb, 0xbb, 0x02, 0x00, 0x00,
}

func (m *ChatMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MsgContent) > 0 {
		i -= len(m.MsgContent)
		copy(dAtA[i:], m.MsgContent)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.MsgContent)))
		i--
		dAtA[i] = 0x4a
	}
	if m.SendTime != 0 {
		i = encodeVarintChatDef(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x40
	}
	if m.MsgType != 0 {
		i = encodeVarintChatDef(dAtA, i, uint64(m.MsgType))
		i--
		dAtA[i] = 0x38
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TitleID) > 0 {
		i -= len(m.TitleID)
		copy(dAtA[i:], m.TitleID)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.TitleID)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.FromHead) > 0 {
		i -= len(m.FromHead)
		copy(dAtA[i:], m.FromHead)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.FromHead)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintChatDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ChatHistoryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChatHistoryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChatHistoryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HistoryMsg) > 0 {
		for iNdEx := len(m.HistoryMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HistoryMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ChannelChatHistoryMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChannelChatHistoryMessage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChannelChatHistoryMessage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OfflinePrivateMsg) > 0 {
		for iNdEx := len(m.OfflinePrivateMsg) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OfflinePrivateMsg[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintChatDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ChannelHisMsg) > 0 {
		for k := range m.ChannelHisMsg {
			v := m.ChannelHisMsg[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintChatDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintChatDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintChatDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintChatDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovChatDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChatMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	l = len(m.FromHead)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	l = len(m.TitleID)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	if m.MsgType != 0 {
		n += 1 + sovChatDef(uint64(m.MsgType))
	}
	if m.SendTime != 0 {
		n += 1 + sovChatDef(uint64(m.SendTime))
	}
	l = len(m.MsgContent)
	if l > 0 {
		n += 1 + l + sovChatDef(uint64(l))
	}
	return n
}

func (m *ChatHistoryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.HistoryMsg) > 0 {
		for _, e := range m.HistoryMsg {
			l = e.Size()
			n += 1 + l + sovChatDef(uint64(l))
		}
	}
	return n
}

func (m *ChannelChatHistoryMessage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChannelHisMsg) > 0 {
		for k, v := range m.ChannelHisMsg {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovChatDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovChatDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovChatDef(uint64(mapEntrySize))
		}
	}
	if len(m.OfflinePrivateMsg) > 0 {
		for _, e := range m.OfflinePrivateMsg {
			l = e.Size()
			n += 1 + l + sovChatDef(uint64(l))
		}
	}
	return n
}

func sovChatDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChatDef(x uint64) (n int) {
	return sovChatDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChatMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromHead", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromHead = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TitleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TitleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgType", wireType)
			}
			m.MsgType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MsgType |= ChatMessage_ChatMsgType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChatHistoryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChatHistoryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChatHistoryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HistoryMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HistoryMsg = append(m.HistoryMsg, &ChatMessage{})
			if err := m.HistoryMsg[len(m.HistoryMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChannelChatHistoryMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChatDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChannelChatHistoryMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChannelChatHistoryMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChannelHisMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChannelHisMsg == nil {
				m.ChannelHisMsg = make(map[string]*ChatHistoryMessage)
			}
			var mapkey string
			var mapvalue *ChatHistoryMessage
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowChatDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthChatDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthChatDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowChatDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthChatDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthChatDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &ChatHistoryMessage{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipChatDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthChatDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ChannelHisMsg[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflinePrivateMsg", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChatDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChatDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OfflinePrivateMsg = append(m.OfflinePrivateMsg, &ChatMessage{})
			if err := m.OfflinePrivateMsg[len(m.OfflinePrivateMsg)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChatDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthChatDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChatDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChatDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChatDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChatDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChatDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChatDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChatDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChatDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChatDef = fmt.Errorf("proto: unexpected end of group")
)
