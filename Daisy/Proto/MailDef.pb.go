// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: MailDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Mail struct {
	MailID      string            `protobuf:"bytes,1,opt,name=MailID,proto3" json:"MailID,omitempty"`
	SenderID    string            `protobuf:"bytes,2,opt,name=SenderID,proto3" json:"SenderID,omitempty"`
	SenderName  string            `protobuf:"bytes,3,opt,name=SenderName,proto3" json:"SenderName,omitempty"`
	SendICON    uint32            `protobuf:"varint,4,opt,name=SendICON,proto3" json:"SendICON,omitempty"`
	ReceiveID   string            `protobuf:"bytes,5,opt,name=ReceiveID,proto3" json:"ReceiveID,omitempty"`
	IsBroadcast bool              `protobuf:"varint,6,opt,name=IsBroadcast,proto3" json:"IsBroadcast,omitempty"`
	IsRead      bool              `protobuf:"varint,7,opt,name=IsRead,proto3" json:"IsRead,omitempty"`
	IsReceived  bool              `protobuf:"varint,8,opt,name=IsReceived,proto3" json:"IsReceived,omitempty"`
	Title       string            `protobuf:"bytes,9,opt,name=Title,proto3" json:"Title,omitempty"`
	Content     string            `protobuf:"bytes,10,opt,name=Content,proto3" json:"Content,omitempty"`
	Attachments []*MailAttachment `protobuf:"bytes,11,rep,name=Attachments,proto3" json:"Attachments,omitempty"`
	SendTime    int64             `protobuf:"varint,12,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	ExpireTime  int64             `protobuf:"varint,13,opt,name=ExpireTime,proto3" json:"ExpireTime,omitempty"`
	ReadTime    int64             `protobuf:"varint,14,opt,name=ReadTime,proto3" json:"ReadTime,omitempty"`
}

func (m *Mail) Reset()         { *m = Mail{} }
func (m *Mail) String() string { return proto.CompactTextString(m) }
func (*Mail) ProtoMessage()    {}
func (*Mail) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a085f99b8a9b97d, []int{0}
}
func (m *Mail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Mail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Mail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Mail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mail.Merge(m, src)
}
func (m *Mail) XXX_Size() int {
	return m.Size()
}
func (m *Mail) XXX_DiscardUnknown() {
	xxx_messageInfo_Mail.DiscardUnknown(m)
}

var xxx_messageInfo_Mail proto.InternalMessageInfo

func (m *Mail) GetMailID() string {
	if m != nil {
		return m.MailID
	}
	return ""
}

func (m *Mail) GetSenderID() string {
	if m != nil {
		return m.SenderID
	}
	return ""
}

func (m *Mail) GetSenderName() string {
	if m != nil {
		return m.SenderName
	}
	return ""
}

func (m *Mail) GetSendICON() uint32 {
	if m != nil {
		return m.SendICON
	}
	return 0
}

func (m *Mail) GetReceiveID() string {
	if m != nil {
		return m.ReceiveID
	}
	return ""
}

func (m *Mail) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

func (m *Mail) GetIsRead() bool {
	if m != nil {
		return m.IsRead
	}
	return false
}

func (m *Mail) GetIsReceived() bool {
	if m != nil {
		return m.IsReceived
	}
	return false
}

func (m *Mail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Mail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Mail) GetAttachments() []*MailAttachment {
	if m != nil {
		return m.Attachments
	}
	return nil
}

func (m *Mail) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *Mail) GetExpireTime() int64 {
	if m != nil {
		return m.ExpireTime
	}
	return 0
}

func (m *Mail) GetReadTime() int64 {
	if m != nil {
		return m.ReadTime
	}
	return 0
}

type MailAttachment struct {
	ItemID   uint32 `protobuf:"varint,1,opt,name=ItemID,proto3" json:"ItemID,omitempty"`
	ItemType uint32 `protobuf:"varint,2,opt,name=ItemType,proto3" json:"ItemType,omitempty"`
	ItemNum  uint32 `protobuf:"varint,3,opt,name=ItemNum,proto3" json:"ItemNum,omitempty"`
	Data     *Item  `protobuf:"bytes,4,opt,name=Data,proto3" json:"Data,omitempty"`
}

func (m *MailAttachment) Reset()         { *m = MailAttachment{} }
func (m *MailAttachment) String() string { return proto.CompactTextString(m) }
func (*MailAttachment) ProtoMessage()    {}
func (*MailAttachment) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a085f99b8a9b97d, []int{1}
}
func (m *MailAttachment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailAttachment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailAttachment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailAttachment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailAttachment.Merge(m, src)
}
func (m *MailAttachment) XXX_Size() int {
	return m.Size()
}
func (m *MailAttachment) XXX_DiscardUnknown() {
	xxx_messageInfo_MailAttachment.DiscardUnknown(m)
}

var xxx_messageInfo_MailAttachment proto.InternalMessageInfo

func (m *MailAttachment) GetItemID() uint32 {
	if m != nil {
		return m.ItemID
	}
	return 0
}

func (m *MailAttachment) GetItemType() uint32 {
	if m != nil {
		return m.ItemType
	}
	return 0
}

func (m *MailAttachment) GetItemNum() uint32 {
	if m != nil {
		return m.ItemNum
	}
	return 0
}

func (m *MailAttachment) GetData() *Item {
	if m != nil {
		return m.Data
	}
	return nil
}

type MailBox struct {
	Mails []*Mail `protobuf:"bytes,1,rep,name=Mails,proto3" json:"Mails,omitempty"`
}

func (m *MailBox) Reset()         { *m = MailBox{} }
func (m *MailBox) String() string { return proto.CompactTextString(m) }
func (*MailBox) ProtoMessage()    {}
func (*MailBox) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a085f99b8a9b97d, []int{2}
}
func (m *MailBox) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailBox) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailBox.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailBox) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailBox.Merge(m, src)
}
func (m *MailBox) XXX_Size() int {
	return m.Size()
}
func (m *MailBox) XXX_DiscardUnknown() {
	xxx_messageInfo_MailBox.DiscardUnknown(m)
}

var xxx_messageInfo_MailBox proto.InternalMessageInfo

func (m *MailBox) GetMails() []*Mail {
	if m != nil {
		return m.Mails
	}
	return nil
}

type MailAwardItems struct {
	AwardItems []*OfflineAwardItem `protobuf:"bytes,1,rep,name=AwardItems,proto3" json:"AwardItems,omitempty"`
	BagErrors  []int32             `protobuf:"varint,2,rep,packed,name=BagErrors,proto3" json:"BagErrors,omitempty"`
}

func (m *MailAwardItems) Reset()         { *m = MailAwardItems{} }
func (m *MailAwardItems) String() string { return proto.CompactTextString(m) }
func (*MailAwardItems) ProtoMessage()    {}
func (*MailAwardItems) Descriptor() ([]byte, []int) {
	return fileDescriptor_3a085f99b8a9b97d, []int{3}
}
func (m *MailAwardItems) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MailAwardItems) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MailAwardItems.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MailAwardItems) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MailAwardItems.Merge(m, src)
}
func (m *MailAwardItems) XXX_Size() int {
	return m.Size()
}
func (m *MailAwardItems) XXX_DiscardUnknown() {
	xxx_messageInfo_MailAwardItems.DiscardUnknown(m)
}

var xxx_messageInfo_MailAwardItems proto.InternalMessageInfo

func (m *MailAwardItems) GetAwardItems() []*OfflineAwardItem {
	if m != nil {
		return m.AwardItems
	}
	return nil
}

func (m *MailAwardItems) GetBagErrors() []int32 {
	if m != nil {
		return m.BagErrors
	}
	return nil
}

func init() {
	proto.RegisterType((*Mail)(nil), "Mail")
	proto.RegisterType((*MailAttachment)(nil), "MailAttachment")
	proto.RegisterType((*MailBox)(nil), "MailBox")
	proto.RegisterType((*MailAwardItems)(nil), "MailAwardItems")
}

func init() { proto.RegisterFile("MailDef.proto", fileDescriptor_3a085f99b8a9b97d) }

var fileDescriptor_3a085f99b8a9b97d = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xbd, 0x8e, 0xd3, 0x40,
	0x10, 0xc7, 0xe3, 0x73, 0x9c, 0x8f, 0x31, 0x0e, 0x62, 0x85, 0xd0, 0x72, 0x20, 0x63, 0xa5, 0x40,
	0xae, 0x22, 0xdd, 0xf1, 0x04, 0x97, 0xf3, 0x15, 0x2e, 0xc8, 0xa1, 0x25, 0x15, 0xdd, 0x12, 0x4f,
	0xc0, 0x52, 0x6c, 0x47, 0xf6, 0x02, 0x77, 0x6f, 0xc1, 0x6b, 0xf0, 0x26, 0x94, 0x29, 0x29, 0x51,
	0xf2, 0x22, 0x68, 0x26, 0xfe, 0xa2, 0xf2, 0xfc, 0xfe, 0x7f, 0xcf, 0xee, 0xec, 0xcc, 0x80, 0xf7,
	0x5e, 0xa7, 0xbb, 0x08, 0xb7, 0x8b, 0x7d, 0x59, 0x98, 0xe2, 0xd2, 0x8b, 0x0d, 0x66, 0x1d, 0xce,
	0x6e, 0x7e, 0xe8, 0x32, 0x69, 0x79, 0xfe, 0xcb, 0x86, 0x21, 0x25, 0x88, 0x17, 0x30, 0xa2, 0x6f,
	0x1c, 0x49, 0x2b, 0xb0, 0xc2, 0xa9, 0xaa, 0x49, 0x5c, 0xc2, 0xe4, 0x23, 0xe6, 0x09, 0x96, 0x71,
	0x24, 0x2f, 0xd8, 0x69, 0x59, 0xf8, 0x00, 0xe7, 0x78, 0xa5, 0x33, 0x94, 0x36, 0xbb, 0x3d, 0xa5,
	0xc9, 0x8d, 0x6f, 0xef, 0x57, 0x72, 0x18, 0x58, 0xa1, 0xa7, 0x5a, 0x16, 0xaf, 0x61, 0xaa, 0x70,
	0x83, 0xe9, 0x77, 0x8c, 0x23, 0xe9, 0x70, 0x6a, 0x27, 0x88, 0x00, 0xdc, 0xb8, 0x5a, 0x96, 0x85,
	0x4e, 0x36, 0xba, 0x32, 0x72, 0x14, 0x58, 0xe1, 0x44, 0xf5, 0x25, 0xaa, 0x37, 0xae, 0x14, 0xea,
	0x44, 0x8e, 0xd9, 0xac, 0x89, 0x6a, 0xa2, 0x88, 0x0f, 0x4a, 0xe4, 0x84, 0xbd, 0x9e, 0x22, 0x9e,
	0x83, 0xb3, 0x4e, 0xcd, 0x0e, 0xe5, 0x94, 0xef, 0x3c, 0x83, 0x90, 0x30, 0xbe, 0x2d, 0x72, 0x83,
	0xb9, 0x91, 0xc0, 0x7a, 0x83, 0xe2, 0x0a, 0xdc, 0x1b, 0x63, 0xf4, 0xe6, 0x6b, 0x86, 0xb9, 0xa9,
	0xa4, 0x1b, 0xd8, 0xa1, 0x7b, 0xfd, 0x74, 0x41, 0xdd, 0xe9, 0x74, 0xd5, 0xff, 0xa7, 0x79, 0xf6,
	0x3a, 0xcd, 0x50, 0x3e, 0x09, 0xac, 0xd0, 0x56, 0x2d, 0x53, 0x79, 0x77, 0x0f, 0xfb, 0xb4, 0x44,
	0x76, 0x3d, 0x76, 0x7b, 0x0a, 0xe5, 0xd2, 0x33, 0xd8, 0x9d, 0x9d, 0x73, 0x1b, 0x9e, 0x3f, 0xc2,
	0xec, 0xff, 0x6b, 0xb9, 0x09, 0x06, 0xb3, 0x7a, 0x68, 0x9e, 0xaa, 0x89, 0x4e, 0xa1, 0x68, 0xfd,
	0xb8, 0x47, 0x1e, 0x9a, 0xa7, 0x5a, 0xa6, 0xa7, 0x52, 0xbc, 0xfa, 0x96, 0xf1, 0xc4, 0x3c, 0xd5,
	0xa0, 0x78, 0x09, 0xc3, 0x48, 0x1b, 0xcd, 0xa3, 0x72, 0xaf, 0x9d, 0x05, 0xe9, 0x8a, 0xa5, 0xf9,
	0x5b, 0x18, 0xd3, 0xd5, 0xcb, 0xe2, 0x41, 0xbc, 0x02, 0x87, 0xc2, 0x4a, 0x5a, 0xdc, 0x0a, 0x87,
	0x5b, 0xa1, 0xce, 0xda, 0x5c, 0xd7, 0x25, 0xd2, 0x92, 0x51, 0x7a, 0x25, 0xae, 0x00, 0x3a, 0xaa,
	0x73, 0x9e, 0x2d, 0xee, 0xb7, 0xdb, 0x5d, 0x9a, 0x63, 0xeb, 0xa8, 0xde, 0x4f, 0xb4, 0x1a, 0x4b,
	0xfd, 0xe5, 0xae, 0x2c, 0x8b, 0xb2, 0x92, 0x17, 0x81, 0x1d, 0x3a, 0xaa, 0x13, 0x96, 0x6f, 0x7e,
	0x1f, 0x7d, 0xeb, 0x70, 0xf4, 0xad, 0xbf, 0x47, 0xdf, 0xfa, 0x79, 0xf2, 0x07, 0x87, 0x93, 0x3f,
	0xf8, 0x73, 0xf2, 0x07, 0x9f, 0x9c, 0x0f, 0xb4, 0xd2, 0x9f, 0x47, 0xbc, 0xd9, 0xef, 0xfe, 0x05,
	0x00, 0x00, 0xff, 0xff, 0xcd, 0x70, 0xa1, 0x7f, 0x09, 0x03, 0x00, 0x00,
}

func (m *Mail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Mail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Mail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ReadTime != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.ReadTime))
		i--
		dAtA[i] = 0x70
	}
	if m.ExpireTime != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.ExpireTime))
		i--
		dAtA[i] = 0x68
	}
	if m.SendTime != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Attachments) > 0 {
		for iNdEx := len(m.Attachments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Attachments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMailDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if m.IsReceived {
		i--
		if m.IsReceived {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.IsRead {
		i--
		if m.IsRead {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.IsBroadcast {
		i--
		if m.IsBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if len(m.ReceiveID) > 0 {
		i -= len(m.ReceiveID)
		copy(dAtA[i:], m.ReceiveID)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.ReceiveID)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SendICON != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.SendICON))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SenderName) > 0 {
		i -= len(m.SenderName)
		copy(dAtA[i:], m.SenderName)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.SenderName)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderID) > 0 {
		i -= len(m.SenderID)
		copy(dAtA[i:], m.SenderID)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.SenderID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MailID) > 0 {
		i -= len(m.MailID)
		copy(dAtA[i:], m.MailID)
		i = encodeVarintMailDef(dAtA, i, uint64(len(m.MailID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MailAttachment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailAttachment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailAttachment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMailDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.ItemNum != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.ItemNum))
		i--
		dAtA[i] = 0x18
	}
	if m.ItemType != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.ItemType))
		i--
		dAtA[i] = 0x10
	}
	if m.ItemID != 0 {
		i = encodeVarintMailDef(dAtA, i, uint64(m.ItemID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MailBox) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailBox) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailBox) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for iNdEx := len(m.Mails) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Mails[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMailDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *MailAwardItems) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MailAwardItems) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MailAwardItems) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BagErrors) > 0 {
		dAtA3 := make([]byte, len(m.BagErrors)*10)
		var j2 int
		for _, num1 := range m.BagErrors {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintMailDef(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x12
	}
	if len(m.AwardItems) > 0 {
		for iNdEx := len(m.AwardItems) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.AwardItems[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintMailDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintMailDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovMailDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Mail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MailID)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	l = len(m.SenderID)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	l = len(m.SenderName)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	if m.SendICON != 0 {
		n += 1 + sovMailDef(uint64(m.SendICON))
	}
	l = len(m.ReceiveID)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	if m.IsBroadcast {
		n += 2
	}
	if m.IsRead {
		n += 2
	}
	if m.IsReceived {
		n += 2
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovMailDef(uint64(l))
	}
	if len(m.Attachments) > 0 {
		for _, e := range m.Attachments {
			l = e.Size()
			n += 1 + l + sovMailDef(uint64(l))
		}
	}
	if m.SendTime != 0 {
		n += 1 + sovMailDef(uint64(m.SendTime))
	}
	if m.ExpireTime != 0 {
		n += 1 + sovMailDef(uint64(m.ExpireTime))
	}
	if m.ReadTime != 0 {
		n += 1 + sovMailDef(uint64(m.ReadTime))
	}
	return n
}

func (m *MailAttachment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ItemID != 0 {
		n += 1 + sovMailDef(uint64(m.ItemID))
	}
	if m.ItemType != 0 {
		n += 1 + sovMailDef(uint64(m.ItemType))
	}
	if m.ItemNum != 0 {
		n += 1 + sovMailDef(uint64(m.ItemNum))
	}
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovMailDef(uint64(l))
	}
	return n
}

func (m *MailBox) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mails) > 0 {
		for _, e := range m.Mails {
			l = e.Size()
			n += 1 + l + sovMailDef(uint64(l))
		}
	}
	return n
}

func (m *MailAwardItems) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.AwardItems) > 0 {
		for _, e := range m.AwardItems {
			l = e.Size()
			n += 1 + l + sovMailDef(uint64(l))
		}
	}
	if len(m.BagErrors) > 0 {
		l = 0
		for _, e := range m.BagErrors {
			l += sovMailDef(uint64(e))
		}
		n += 1 + sovMailDef(uint64(l)) + l
	}
	return n
}

func sovMailDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMailDef(x uint64) (n int) {
	return sovMailDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Mail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Mail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Mail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MailID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MailID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendICON", wireType)
			}
			m.SendICON = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendICON |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiveID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiveID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroadcast = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsRead", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsRead = bool(v != 0)
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsReceived", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsReceived = bool(v != 0)
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attachments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attachments = append(m.Attachments, &MailAttachment{})
			if err := m.Attachments[len(m.Attachments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpireTime", wireType)
			}
			m.ExpireTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpireTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReadTime", wireType)
			}
			m.ReadTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReadTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMailDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailAttachment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailAttachment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailAttachment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemID", wireType)
			}
			m.ItemID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemType", wireType)
			}
			m.ItemType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemNum", wireType)
			}
			m.ItemNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ItemNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &Item{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailBox) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailBox: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailBox: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mails = append(m.Mails, &Mail{})
			if err := m.Mails[len(m.Mails)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMailDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MailAwardItems) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMailDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MailAwardItems: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MailAwardItems: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AwardItems", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMailDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMailDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AwardItems = append(m.AwardItems, &OfflineAwardItem{})
			if err := m.AwardItems[len(m.AwardItems)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMailDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BagErrors = append(m.BagErrors, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowMailDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthMailDef
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthMailDef
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BagErrors) == 0 {
					m.BagErrors = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowMailDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BagErrors = append(m.BagErrors, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BagErrors", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMailDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMailDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMailDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMailDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMailDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMailDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMailDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMailDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMailDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMailDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMailDef = fmt.Errorf("proto: unexpected end of group")
)
