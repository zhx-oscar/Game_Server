// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TeamCacheDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TeamCache struct {
	Base *TeamBase `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
}

func (m *TeamCache) Reset()         { *m = TeamCache{} }
func (m *TeamCache) String() string { return proto.CompactTextString(m) }
func (*TeamCache) ProtoMessage()    {}
func (*TeamCache) Descriptor() ([]byte, []int) {
	return fileDescriptor_a584d6b6f7fd52e6, []int{0}
}
func (m *TeamCache) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamCache) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamCache.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamCache) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamCache.Merge(m, src)
}
func (m *TeamCache) XXX_Size() int {
	return m.Size()
}
func (m *TeamCache) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamCache.DiscardUnknown(m)
}

var xxx_messageInfo_TeamCache proto.InternalMessageInfo

func (m *TeamCache) GetBase() *TeamBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*TeamCache)(nil), "TeamCache")
}

func init() { proto.RegisterFile("TeamCacheDef.proto", fileDescriptor_a584d6b6f7fd52e6) }

var fileDescriptor_a584d6b6f7fd52e6 = []byte{
	// 117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x0a, 0x49, 0x4d, 0xcc,
	0x75, 0x4e, 0x4c, 0xce, 0x48, 0x75, 0x49, 0x4d, 0xd3, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x97, 0xe2,
	0x05, 0x89, 0xc1, 0xb9, 0x4a, 0x5a, 0x5c, 0x9c, 0x70, 0x45, 0x42, 0xb2, 0x5c, 0x2c, 0x4e, 0x89,
	0xc5, 0xa9, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0xdc, 0x46, 0x9c, 0x7a, 0x20, 0x19, 0x90, 0x40, 0x10,
	0x58, 0xd8, 0x49, 0xfe, 0xc4, 0x23, 0x39, 0xc6, 0x0b, 0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63,
	0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86, 0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x58, 0x03,
	0x40, 0x86, 0x25, 0xb1, 0x81, 0xcd, 0x34, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb6, 0x44, 0xf3,
	0xb3, 0x78, 0x00, 0x00, 0x00,
}

func (m *TeamCache) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamCache) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamCache) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamCacheDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeamCacheDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeamCacheDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TeamCache) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovTeamCacheDef(uint64(l))
	}
	return n
}

func sovTeamCacheDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeamCacheDef(x uint64) (n int) {
	return sovTeamCacheDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TeamCache) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamCacheDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamCache: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamCache: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamCacheDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamCacheDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamCacheDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &TeamBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamCacheDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamCacheDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamCacheDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeamCacheDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeamCacheDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamCacheDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamCacheDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeamCacheDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeamCacheDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeamCacheDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeamCacheDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeamCacheDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeamCacheDef = fmt.Errorf("proto: unexpected end of group")
)
