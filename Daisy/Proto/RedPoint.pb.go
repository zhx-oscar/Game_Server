// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: RedPoint.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//红点类型
type RedPointType int32

const (
	RedPointType_RedPoint RedPointType = 0
	RedPointType_Image    RedPointType = 1
	RedPointType_Number   RedPointType = 2
)

var RedPointType_name = map[int32]string{
	0: "RedPoint",
	1: "Image",
	2: "Number",
}

var RedPointType_value = map[string]int32{
	"RedPoint": 0,
	"Image":    1,
	"Number":   2,
}

func (x RedPointType) String() string {
	return proto.EnumName(RedPointType_name, int32(x))
}

func (RedPointType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae689234e931ea62, []int{0}
}

//红点数据
type RedPointInfo struct {
	Type       RedPointType `protobuf:"varint,1,opt,name=Type,proto3,enum=RedPointType" json:"Type,omitempty"`
	Value      uint32       `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
	CreateTime int64        `protobuf:"varint,3,opt,name=CreateTime,proto3" json:"CreateTime,omitempty"`
}

func (m *RedPointInfo) Reset()         { *m = RedPointInfo{} }
func (m *RedPointInfo) String() string { return proto.CompactTextString(m) }
func (*RedPointInfo) ProtoMessage()    {}
func (*RedPointInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae689234e931ea62, []int{0}
}
func (m *RedPointInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RedPointInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RedPointInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RedPointInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RedPointInfo.Merge(m, src)
}
func (m *RedPointInfo) XXX_Size() int {
	return m.Size()
}
func (m *RedPointInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RedPointInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RedPointInfo proto.InternalMessageInfo

func (m *RedPointInfo) GetType() RedPointType {
	if m != nil {
		return m.Type
	}
	return RedPointType_RedPoint
}

func (m *RedPointInfo) GetValue() uint32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *RedPointInfo) GetCreateTime() int64 {
	if m != nil {
		return m.CreateTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("RedPointType", RedPointType_name, RedPointType_value)
	proto.RegisterType((*RedPointInfo)(nil), "RedPointInfo")
}

func init() { proto.RegisterFile("RedPoint.proto", fileDescriptor_ae689234e931ea62) }

var fileDescriptor_ae689234e931ea62 = []byte{
	// 188 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x0b, 0x4a, 0x4d, 0x09,
	0xc8, 0xcf, 0xcc, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x4a, 0xe7, 0xe2, 0x81, 0x89,
	0x78, 0xe6, 0xa5, 0xe5, 0x0b, 0x29, 0x72, 0xb1, 0x84, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x2a, 0x30,
	0x6a, 0xf0, 0x19, 0xf1, 0xea, 0xc1, 0x24, 0x41, 0x82, 0x41, 0x60, 0x29, 0x21, 0x11, 0x2e, 0xd6,
	0xb0, 0xc4, 0x9c, 0xd2, 0x54, 0x09, 0x26, 0x05, 0x46, 0x0d, 0xde, 0x20, 0x08, 0x47, 0x48, 0x8e,
	0x8b, 0xcb, 0xb9, 0x28, 0x35, 0xb1, 0x24, 0x35, 0x24, 0x33, 0x37, 0x55, 0x82, 0x59, 0x81, 0x51,
	0x83, 0x39, 0x08, 0x49, 0x44, 0xcb, 0x18, 0x61, 0x11, 0xd8, 0x14, 0x1e, 0x2e, 0x0e, 0x18, 0x5f,
	0x80, 0x41, 0x88, 0x93, 0x8b, 0xd5, 0x33, 0x37, 0x31, 0x3d, 0x55, 0x80, 0x51, 0x88, 0x8b, 0x8b,
	0xcd, 0xaf, 0x34, 0x37, 0x29, 0xb5, 0x48, 0x80, 0xc9, 0x49, 0xfe, 0xc4, 0x23, 0x39, 0xc6, 0x0b,
	0x8f, 0xe4, 0x18, 0x1f, 0x3c, 0x92, 0x63, 0x9c, 0xf0, 0x58, 0x8e, 0xe1, 0xc2, 0x63, 0x39, 0x86,
	0x1b, 0x8f, 0xe5, 0x18, 0xa2, 0x58, 0x03, 0x40, 0xce, 0x4f, 0x62, 0x03, 0xfb, 0xc2, 0x18, 0x10,
	0x00, 0x00, 0xff, 0xff, 0x94, 0x5d, 0xd8, 0x5b, 0xd7, 0x00, 0x00, 0x00,
}

func (m *RedPointInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RedPointInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RedPointInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CreateTime != 0 {
		i = encodeVarintRedPoint(dAtA, i, uint64(m.CreateTime))
		i--
		dAtA[i] = 0x18
	}
	if m.Value != 0 {
		i = encodeVarintRedPoint(dAtA, i, uint64(m.Value))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintRedPoint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintRedPoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovRedPoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RedPointInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovRedPoint(uint64(m.Type))
	}
	if m.Value != 0 {
		n += 1 + sovRedPoint(uint64(m.Value))
	}
	if m.CreateTime != 0 {
		n += 1 + sovRedPoint(uint64(m.CreateTime))
	}
	return n
}

func sovRedPoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRedPoint(x uint64) (n int) {
	return sovRedPoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RedPointInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRedPoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RedPointInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RedPointInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= RedPointType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			m.Value = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Value |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			m.CreateTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRedPoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreateTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRedPoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRedPoint
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRedPoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRedPoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRedPoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRedPoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRedPoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRedPoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRedPoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRedPoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRedPoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRedPoint = fmt.Errorf("proto: unexpected end of group")
)
