// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TeamHalllDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

//队伍布告栏的一条公告
type Recruitment struct {
	TeamID       string               `protobuf:"bytes,1,opt,name=TeamID,proto3" json:"TeamID,omitempty"`
	TeamUID      uint64               `protobuf:"varint,2,opt,name=teamUID,proto3" json:"teamUID,omitempty"`
	Members      []*RecruitmentMember `protobuf:"bytes,3,rep,name=members,proto3" json:"members,omitempty"`
	Topic        string               `protobuf:"bytes,4,opt,name=Topic,proto3" json:"Topic,omitempty"`
	RaidProgress uint32               `protobuf:"varint,5,opt,name=RaidProgress,proto3" json:"RaidProgress,omitempty"`
	TeamName     string               `protobuf:"bytes,6,opt,name=TeamName,proto3" json:"TeamName,omitempty"`
	Applied      bool                 `protobuf:"varint,7,opt,name=Applied,proto3" json:"Applied,omitempty"`
}

func (m *Recruitment) Reset()         { *m = Recruitment{} }
func (m *Recruitment) String() string { return proto.CompactTextString(m) }
func (*Recruitment) ProtoMessage()    {}
func (*Recruitment) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{0}
}
func (m *Recruitment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recruitment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recruitment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recruitment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recruitment.Merge(m, src)
}
func (m *Recruitment) XXX_Size() int {
	return m.Size()
}
func (m *Recruitment) XXX_DiscardUnknown() {
	xxx_messageInfo_Recruitment.DiscardUnknown(m)
}

var xxx_messageInfo_Recruitment proto.InternalMessageInfo

func (m *Recruitment) GetTeamID() string {
	if m != nil {
		return m.TeamID
	}
	return ""
}

func (m *Recruitment) GetTeamUID() uint64 {
	if m != nil {
		return m.TeamUID
	}
	return 0
}

func (m *Recruitment) GetMembers() []*RecruitmentMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *Recruitment) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *Recruitment) GetRaidProgress() uint32 {
	if m != nil {
		return m.RaidProgress
	}
	return 0
}

func (m *Recruitment) GetTeamName() string {
	if m != nil {
		return m.TeamName
	}
	return ""
}

func (m *Recruitment) GetApplied() bool {
	if m != nil {
		return m.Applied
	}
	return false
}

//招募队伍里的成员信息
type RecruitmentMember struct {
	RoleID            string `protobuf:"bytes,1,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	SpecialAgentID    uint32 `protobuf:"varint,2,opt,name=SpecialAgentID,proto3" json:"SpecialAgentID,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SpecialAgentLevel uint32 `protobuf:"varint,4,opt,name=SpecialAgentLevel,proto3" json:"SpecialAgentLevel,omitempty"`
	Online            bool   `protobuf:"varint,5,opt,name=Online,proto3" json:"Online,omitempty"`
	Status            uint32 `protobuf:"varint,6,opt,name=Status,proto3" json:"Status,omitempty"`
	JoinTime          int64  `protobuf:"varint,7,opt,name=JoinTime,proto3" json:"JoinTime,omitempty"`
	TotalScore        int32  `protobuf:"varint,8,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
}

func (m *RecruitmentMember) Reset()         { *m = RecruitmentMember{} }
func (m *RecruitmentMember) String() string { return proto.CompactTextString(m) }
func (*RecruitmentMember) ProtoMessage()    {}
func (*RecruitmentMember) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{1}
}
func (m *RecruitmentMember) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecruitmentMember) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecruitmentMember.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecruitmentMember) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecruitmentMember.Merge(m, src)
}
func (m *RecruitmentMember) XXX_Size() int {
	return m.Size()
}
func (m *RecruitmentMember) XXX_DiscardUnknown() {
	xxx_messageInfo_RecruitmentMember.DiscardUnknown(m)
}

var xxx_messageInfo_RecruitmentMember proto.InternalMessageInfo

func (m *RecruitmentMember) GetRoleID() string {
	if m != nil {
		return m.RoleID
	}
	return ""
}

func (m *RecruitmentMember) GetSpecialAgentID() uint32 {
	if m != nil {
		return m.SpecialAgentID
	}
	return 0
}

func (m *RecruitmentMember) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RecruitmentMember) GetSpecialAgentLevel() uint32 {
	if m != nil {
		return m.SpecialAgentLevel
	}
	return 0
}

func (m *RecruitmentMember) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *RecruitmentMember) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *RecruitmentMember) GetJoinTime() int64 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

func (m *RecruitmentMember) GetTotalScore() int32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

//队伍布告栏
type Recruitments struct {
	Data []*Recruitment `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Recruitments) Reset()         { *m = Recruitments{} }
func (m *Recruitments) String() string { return proto.CompactTextString(m) }
func (*Recruitments) ProtoMessage()    {}
func (*Recruitments) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{2}
}
func (m *Recruitments) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Recruitments) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Recruitments.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Recruitments) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Recruitments.Merge(m, src)
}
func (m *Recruitments) XXX_Size() int {
	return m.Size()
}
func (m *Recruitments) XXX_DiscardUnknown() {
	xxx_messageInfo_Recruitments.DiscardUnknown(m)
}

var xxx_messageInfo_Recruitments proto.InternalMessageInfo

func (m *Recruitments) GetData() []*Recruitment {
	if m != nil {
		return m.Data
	}
	return nil
}

//单人
type Loner struct {
	RoleID            string `protobuf:"bytes,1,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	SpecialAgentID    uint32 `protobuf:"varint,2,opt,name=SpecialAgentID,proto3" json:"SpecialAgentID,omitempty"`
	Name              string `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	SpecialAgentLevel uint32 `protobuf:"varint,4,opt,name=SpecialAgentLevel,proto3" json:"SpecialAgentLevel,omitempty"`
	Online            bool   `protobuf:"varint,5,opt,name=Online,proto3" json:"Online,omitempty"`
	RaidProgress      uint32 `protobuf:"varint,6,opt,name=RaidProgress,proto3" json:"RaidProgress,omitempty"`
	TotalScore        int32  `protobuf:"varint,7,opt,name=TotalScore,proto3" json:"TotalScore,omitempty"`
}

func (m *Loner) Reset()         { *m = Loner{} }
func (m *Loner) String() string { return proto.CompactTextString(m) }
func (*Loner) ProtoMessage()    {}
func (*Loner) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{3}
}
func (m *Loner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loner.Merge(m, src)
}
func (m *Loner) XXX_Size() int {
	return m.Size()
}
func (m *Loner) XXX_DiscardUnknown() {
	xxx_messageInfo_Loner.DiscardUnknown(m)
}

var xxx_messageInfo_Loner proto.InternalMessageInfo

func (m *Loner) GetRoleID() string {
	if m != nil {
		return m.RoleID
	}
	return ""
}

func (m *Loner) GetSpecialAgentID() uint32 {
	if m != nil {
		return m.SpecialAgentID
	}
	return 0
}

func (m *Loner) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Loner) GetSpecialAgentLevel() uint32 {
	if m != nil {
		return m.SpecialAgentLevel
	}
	return 0
}

func (m *Loner) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *Loner) GetRaidProgress() uint32 {
	if m != nil {
		return m.RaidProgress
	}
	return 0
}

func (m *Loner) GetTotalScore() int32 {
	if m != nil {
		return m.TotalScore
	}
	return 0
}

//单人列表
type Loners struct {
	Data []*Loner `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Loners) Reset()         { *m = Loners{} }
func (m *Loners) String() string { return proto.CompactTextString(m) }
func (*Loners) ProtoMessage()    {}
func (*Loners) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{4}
}
func (m *Loners) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Loners) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Loners.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Loners) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Loners.Merge(m, src)
}
func (m *Loners) XXX_Size() int {
	return m.Size()
}
func (m *Loners) XXX_DiscardUnknown() {
	xxx_messageInfo_Loners.DiscardUnknown(m)
}

var xxx_messageInfo_Loners proto.InternalMessageInfo

func (m *Loners) GetData() []*Loner {
	if m != nil {
		return m.Data
	}
	return nil
}

//申请者
type Applyer struct {
	Loner     *Loner `protobuf:"bytes,1,opt,name=loner,proto3" json:"loner,omitempty"`
	ApplyTime int64  `protobuf:"varint,2,opt,name=ApplyTime,proto3" json:"ApplyTime,omitempty"`
	Mes       string `protobuf:"bytes,3,opt,name=Mes,proto3" json:"Mes,omitempty"`
}

func (m *Applyer) Reset()         { *m = Applyer{} }
func (m *Applyer) String() string { return proto.CompactTextString(m) }
func (*Applyer) ProtoMessage()    {}
func (*Applyer) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{5}
}
func (m *Applyer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applyer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applyer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applyer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applyer.Merge(m, src)
}
func (m *Applyer) XXX_Size() int {
	return m.Size()
}
func (m *Applyer) XXX_DiscardUnknown() {
	xxx_messageInfo_Applyer.DiscardUnknown(m)
}

var xxx_messageInfo_Applyer proto.InternalMessageInfo

func (m *Applyer) GetLoner() *Loner {
	if m != nil {
		return m.Loner
	}
	return nil
}

func (m *Applyer) GetApplyTime() int64 {
	if m != nil {
		return m.ApplyTime
	}
	return 0
}

func (m *Applyer) GetMes() string {
	if m != nil {
		return m.Mes
	}
	return ""
}

//申请列表
type Applyers struct {
	Data []*Applyer `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Applyers) Reset()         { *m = Applyers{} }
func (m *Applyers) String() string { return proto.CompactTextString(m) }
func (*Applyers) ProtoMessage()    {}
func (*Applyers) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{6}
}
func (m *Applyers) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Applyers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Applyers.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Applyers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Applyers.Merge(m, src)
}
func (m *Applyers) XXX_Size() int {
	return m.Size()
}
func (m *Applyers) XXX_DiscardUnknown() {
	xxx_messageInfo_Applyers.DiscardUnknown(m)
}

var xxx_messageInfo_Applyers proto.InternalMessageInfo

func (m *Applyers) GetData() []*Applyer {
	if m != nil {
		return m.Data
	}
	return nil
}

//邀请队伍
type Inviter struct {
	Re         *Recruitment `protobuf:"bytes,1,opt,name=Re,proto3" json:"Re,omitempty"`
	InviteTime int64        `protobuf:"varint,2,opt,name=InviteTime,proto3" json:"InviteTime,omitempty"`
}

func (m *Inviter) Reset()         { *m = Inviter{} }
func (m *Inviter) String() string { return proto.CompactTextString(m) }
func (*Inviter) ProtoMessage()    {}
func (*Inviter) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{7}
}
func (m *Inviter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inviter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inviter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inviter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inviter.Merge(m, src)
}
func (m *Inviter) XXX_Size() int {
	return m.Size()
}
func (m *Inviter) XXX_DiscardUnknown() {
	xxx_messageInfo_Inviter.DiscardUnknown(m)
}

var xxx_messageInfo_Inviter proto.InternalMessageInfo

func (m *Inviter) GetRe() *Recruitment {
	if m != nil {
		return m.Re
	}
	return nil
}

func (m *Inviter) GetInviteTime() int64 {
	if m != nil {
		return m.InviteTime
	}
	return 0
}

//邀请列表
type Inviters struct {
	Data []*Inviter `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty"`
}

func (m *Inviters) Reset()         { *m = Inviters{} }
func (m *Inviters) String() string { return proto.CompactTextString(m) }
func (*Inviters) ProtoMessage()    {}
func (*Inviters) Descriptor() ([]byte, []int) {
	return fileDescriptor_40bf734a983212e7, []int{8}
}
func (m *Inviters) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Inviters) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Inviters.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Inviters) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Inviters.Merge(m, src)
}
func (m *Inviters) XXX_Size() int {
	return m.Size()
}
func (m *Inviters) XXX_DiscardUnknown() {
	xxx_messageInfo_Inviters.DiscardUnknown(m)
}

var xxx_messageInfo_Inviters proto.InternalMessageInfo

func (m *Inviters) GetData() []*Inviter {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterType((*Recruitment)(nil), "Recruitment")
	proto.RegisterType((*RecruitmentMember)(nil), "RecruitmentMember")
	proto.RegisterType((*Recruitments)(nil), "Recruitments")
	proto.RegisterType((*Loner)(nil), "Loner")
	proto.RegisterType((*Loners)(nil), "Loners")
	proto.RegisterType((*Applyer)(nil), "Applyer")
	proto.RegisterType((*Applyers)(nil), "Applyers")
	proto.RegisterType((*Inviter)(nil), "Inviter")
	proto.RegisterType((*Inviters)(nil), "Inviters")
}

func init() { proto.RegisterFile("TeamHalllDef.proto", fileDescriptor_40bf734a983212e7) }

var fileDescriptor_40bf734a983212e7 = []byte{
	// 503 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x54, 0xdd, 0x6a, 0x13, 0x41,
	0x14, 0xce, 0x24, 0xd9, 0xcd, 0xf6, 0x34, 0x11, 0x3b, 0x88, 0x0c, 0x12, 0xd6, 0x65, 0x11, 0xd9,
	0x8b, 0x12, 0x44, 0x9f, 0xa0, 0x12, 0xd0, 0x48, 0xab, 0x65, 0x12, 0x11, 0xbc, 0x9b, 0xa6, 0xc7,
	0xb2, 0x30, 0xfb, 0xc3, 0xee, 0xb4, 0xe0, 0xa5, 0x6f, 0xe0, 0x63, 0x79, 0xd9, 0x4b, 0x6f, 0x04,
	0x49, 0xf0, 0x3d, 0x64, 0xce, 0x4e, 0x9a, 0x4d, 0xe3, 0x03, 0x78, 0xb7, 0xdf, 0x77, 0xce, 0xce,
	0xf9, 0xbe, 0xef, 0x0c, 0x03, 0x7c, 0x81, 0x2a, 0x7b, 0xab, 0xb4, 0xd6, 0x53, 0xfc, 0x32, 0x29,
	0xab, 0xc2, 0x14, 0xf1, 0x2f, 0x06, 0x87, 0x12, 0x97, 0xd5, 0x75, 0x6a, 0x32, 0xcc, 0x0d, 0x7f,
	0x0c, 0xbe, 0xed, 0x9a, 0x4d, 0x05, 0x8b, 0x58, 0x72, 0x20, 0x1d, 0xe2, 0x02, 0x06, 0x06, 0x55,
	0xf6, 0x71, 0x36, 0x15, 0xdd, 0x88, 0x25, 0x7d, 0xb9, 0x81, 0xfc, 0x18, 0x06, 0x19, 0x66, 0x17,
	0x58, 0xd5, 0xa2, 0x17, 0xf5, 0x92, 0xc3, 0x97, 0x7c, 0xd2, 0x3a, 0xf0, 0x8c, 0x4a, 0x72, 0xd3,
	0xc2, 0x1f, 0x81, 0xb7, 0x28, 0xca, 0x74, 0x29, 0xfa, 0x74, 0x7c, 0x03, 0x78, 0x0c, 0x43, 0xa9,
	0xd2, 0xcb, 0xf3, 0xaa, 0xb8, 0xaa, 0xb0, 0xae, 0x85, 0x17, 0xb1, 0x64, 0x24, 0x77, 0x38, 0xfe,
	0x04, 0x02, 0xab, 0xe5, 0xbd, 0xca, 0x50, 0xf8, 0xf4, 0xf3, 0x1d, 0xb6, 0xea, 0x4e, 0xca, 0x52,
	0xa7, 0x78, 0x29, 0x06, 0x11, 0x4b, 0x02, 0xb9, 0x81, 0xf1, 0xb7, 0x2e, 0x1c, 0xed, 0xc9, 0xb1,
	0x2e, 0x65, 0xa1, 0x71, 0xeb, 0xb2, 0x41, 0xfc, 0x39, 0x3c, 0x98, 0x97, 0xb8, 0x4c, 0x95, 0x3e,
	0xb9, 0xc2, 0xdc, 0x38, 0xb3, 0x23, 0x79, 0x8f, 0xe5, 0x1c, 0xfa, 0xa4, 0xa3, 0x47, 0x7f, 0xd3,
	0x37, 0x3f, 0x86, 0xa3, 0x76, 0xd7, 0x29, 0xde, 0xa0, 0x26, 0x97, 0x23, 0xb9, 0x5f, 0xb0, 0x0a,
	0x3e, 0xe4, 0x3a, 0xcd, 0x91, 0xbc, 0x06, 0xd2, 0x21, 0xcb, 0xcf, 0x8d, 0x32, 0xd7, 0x35, 0x79,
	0x1c, 0x49, 0x87, 0xac, 0xfb, 0x77, 0x45, 0x9a, 0x2f, 0xd2, 0x0c, 0xc9, 0x62, 0x4f, 0xde, 0x61,
	0x1e, 0x02, 0x2c, 0x0a, 0xa3, 0xf4, 0x7c, 0x59, 0x54, 0x28, 0x82, 0x88, 0x25, 0x9e, 0x6c, 0x31,
	0xf1, 0x0b, 0x18, 0xb6, 0x22, 0xa8, 0x79, 0x04, 0xfd, 0xa9, 0x32, 0x4a, 0x30, 0x5a, 0xd7, 0xb0,
	0xbd, 0x2e, 0x49, 0x95, 0xf8, 0x0f, 0x03, 0xef, 0xb4, 0xc8, 0xff, 0xeb, 0xa4, 0xee, 0xdf, 0x19,
	0xff, 0x1f, 0x77, 0x66, 0x37, 0x99, 0xc1, 0x5e, 0x32, 0xcf, 0xc0, 0x27, 0x9b, 0x36, 0xdf, 0x76,
	0x26, 0xfe, 0x84, 0x68, 0x97, 0xc6, 0xa7, 0xe6, 0x76, 0x7d, 0xc5, 0x8a, 0x8f, 0xc1, 0xd3, 0xb6,
	0x42, 0x69, 0x6c, 0xfb, 0x1a, 0x92, 0x8f, 0xe1, 0x80, 0x1a, 0x69, 0x4b, 0x5d, 0xda, 0xd2, 0x96,
	0xe0, 0x0f, 0xa1, 0x77, 0x86, 0xb5, 0x4b, 0xc2, 0x7e, 0xc6, 0x09, 0x04, 0xee, 0xe0, 0x9a, 0x8f,
	0x77, 0x04, 0x04, 0x13, 0x57, 0x70, 0x12, 0xde, 0xc0, 0x60, 0x96, 0xdf, 0xa4, 0x86, 0x86, 0x74,
	0x25, 0xba, 0xf9, 0xbb, 0xbb, 0xeb, 0x4a, 0xba, 0x0b, 0x4d, 0x63, 0x4b, 0x43, 0x8b, 0xb1, 0x23,
	0xdd, 0x41, 0xfb, 0x23, 0x5d, 0xa1, 0x19, 0xf9, 0xfa, 0xe9, 0x8f, 0x55, 0xc8, 0x6e, 0x57, 0x21,
	0xfb, 0xbd, 0x0a, 0xd9, 0xf7, 0x75, 0xd8, 0xb9, 0x5d, 0x87, 0x9d, 0x9f, 0xeb, 0xb0, 0xf3, 0xd9,
	0x3b, 0xb7, 0x4f, 0xc7, 0x85, 0x4f, 0x2f, 0xc8, 0xab, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x2c,
	0x8c, 0x06, 0xa6, 0x57, 0x04, 0x00, 0x00,
}

func (m *Recruitment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recruitment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recruitment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Applied {
		i--
		if m.Applied {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.TeamName) > 0 {
		i -= len(m.TeamName)
		copy(dAtA[i:], m.TeamName)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.TeamName)))
		i--
		dAtA[i] = 0x32
	}
	if m.RaidProgress != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.RaidProgress))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.TeamUID != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.TeamUID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TeamID) > 0 {
		i -= len(m.TeamID)
		copy(dAtA[i:], m.TeamID)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.TeamID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecruitmentMember) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecruitmentMember) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecruitmentMember) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalScore != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.TotalScore))
		i--
		dAtA[i] = 0x40
	}
	if m.JoinTime != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.JoinTime))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SpecialAgentLevel != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.SpecialAgentLevel))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SpecialAgentID != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.SpecialAgentID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleID) > 0 {
		i -= len(m.RoleID)
		copy(dAtA[i:], m.RoleID)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.RoleID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Recruitments) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Recruitments) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Recruitments) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Loner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalScore != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.TotalScore))
		i--
		dAtA[i] = 0x38
	}
	if m.RaidProgress != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.RaidProgress))
		i--
		dAtA[i] = 0x30
	}
	if m.Online {
		i--
		if m.Online {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.SpecialAgentLevel != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.SpecialAgentLevel))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SpecialAgentID != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.SpecialAgentID))
		i--
		dAtA[i] = 0x10
	}
	if len(m.RoleID) > 0 {
		i -= len(m.RoleID)
		copy(dAtA[i:], m.RoleID)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.RoleID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Loners) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Loners) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Loners) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Applyer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applyer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Applyer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Mes) > 0 {
		i -= len(m.Mes)
		copy(dAtA[i:], m.Mes)
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(len(m.Mes)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ApplyTime != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.ApplyTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Loner != nil {
		{
			size, err := m.Loner.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Applyers) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Applyers) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Applyers) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Inviter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inviter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inviter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InviteTime != 0 {
		i = encodeVarintTeamHalllDef(dAtA, i, uint64(m.InviteTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Re != nil {
		{
			size, err := m.Re.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Inviters) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Inviters) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Inviters) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for iNdEx := len(m.Data) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Data[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamHalllDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeamHalllDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeamHalllDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Recruitment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TeamID)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.TeamUID != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.TeamUID))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovTeamHalllDef(uint64(l))
		}
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.RaidProgress != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.RaidProgress))
	}
	l = len(m.TeamName)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.Applied {
		n += 2
	}
	return n
}

func (m *RecruitmentMember) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleID)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.SpecialAgentID != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.SpecialAgentID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.SpecialAgentLevel != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.SpecialAgentLevel))
	}
	if m.Online {
		n += 2
	}
	if m.Status != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.Status))
	}
	if m.JoinTime != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.JoinTime))
	}
	if m.TotalScore != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.TotalScore))
	}
	return n
}

func (m *Recruitments) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTeamHalllDef(uint64(l))
		}
	}
	return n
}

func (m *Loner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.RoleID)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.SpecialAgentID != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.SpecialAgentID))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.SpecialAgentLevel != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.SpecialAgentLevel))
	}
	if m.Online {
		n += 2
	}
	if m.RaidProgress != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.RaidProgress))
	}
	if m.TotalScore != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.TotalScore))
	}
	return n
}

func (m *Loners) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTeamHalllDef(uint64(l))
		}
	}
	return n
}

func (m *Applyer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Loner != nil {
		l = m.Loner.Size()
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.ApplyTime != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.ApplyTime))
	}
	l = len(m.Mes)
	if l > 0 {
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	return n
}

func (m *Applyers) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTeamHalllDef(uint64(l))
		}
	}
	return n
}

func (m *Inviter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Re != nil {
		l = m.Re.Size()
		n += 1 + l + sovTeamHalllDef(uint64(l))
	}
	if m.InviteTime != 0 {
		n += 1 + sovTeamHalllDef(uint64(m.InviteTime))
	}
	return n
}

func (m *Inviters) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovTeamHalllDef(uint64(l))
		}
	}
	return n
}

func sovTeamHalllDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeamHalllDef(x uint64) (n int) {
	return sovTeamHalllDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Recruitment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recruitment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recruitment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamUID", wireType)
			}
			m.TeamUID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamUID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &RecruitmentMember{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaidProgress", wireType)
			}
			m.RaidProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaidProgress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TeamName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applied", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Applied = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecruitmentMember) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecruitmentMember: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecruitmentMember: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgentID", wireType)
			}
			m.SpecialAgentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAgentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgentLevel", wireType)
			}
			m.SpecialAgentLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAgentLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			m.TotalScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Recruitments) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Recruitments: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Recruitments: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Recruitment{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgentID", wireType)
			}
			m.SpecialAgentID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAgentID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecialAgentLevel", wireType)
			}
			m.SpecialAgentLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpecialAgentLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Online", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Online = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RaidProgress", wireType)
			}
			m.RaidProgress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RaidProgress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalScore", wireType)
			}
			m.TotalScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalScore |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Loners) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Loners: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Loners: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Loner{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applyer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applyer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applyer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Loner", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Loner == nil {
				m.Loner = &Loner{}
			}
			if err := m.Loner.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyTime", wireType)
			}
			m.ApplyTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ApplyTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Applyers) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Applyers: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Applyers: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Applyer{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inviter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inviter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inviter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Re", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Re == nil {
				m.Re = &Recruitment{}
			}
			if err := m.Re.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InviteTime", wireType)
			}
			m.InviteTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InviteTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Inviters) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Inviters: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Inviters: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Inviter{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamHalllDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamHalllDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeamHalllDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeamHalllDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamHalllDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeamHalllDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeamHalllDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeamHalllDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeamHalllDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeamHalllDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeamHalllDef = fmt.Errorf("proto: unexpected end of group")
)
