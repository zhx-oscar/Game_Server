// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ItemBase.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 道具类型
type ItemEnum_Type int32

const (
	ItemEnum_ZeroNoUse ItemEnum_Type = 0
	ItemEnum_Equipment ItemEnum_Type = 10
	ItemEnum_SkillItem ItemEnum_Type = 11
	ItemEnum_Affix     ItemEnum_Type = 12
)

var ItemEnum_Type_name = map[int32]string{
	0:  "ZeroNoUse",
	10: "Equipment",
	11: "SkillItem",
	12: "Affix",
}

var ItemEnum_Type_value = map[string]int32{
	"ZeroNoUse": 0,
	"Equipment": 10,
	"SkillItem": 11,
	"Affix":     12,
}

func (x ItemEnum_Type) String() string {
	return proto.EnumName(ItemEnum_Type_name, int32(x))
}

func (ItemEnum_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_97540e24b7d7911a, []int{1, 0}
}

type ItemBase struct {
	ID       string        `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Type     ItemEnum_Type `protobuf:"varint,2,opt,name=Type,proto3,enum=ItemEnum_Type" json:"Type,omitempty"`
	ConfigID uint32        `protobuf:"varint,3,opt,name=ConfigID,proto3" json:"ConfigID,omitempty"`
	Num      uint32        `protobuf:"varint,4,opt,name=Num,proto3" json:"Num,omitempty"`
	Pos      int32         `protobuf:"varint,5,opt,name=Pos,proto3" json:"Pos,omitempty"`
}

func (m *ItemBase) Reset()         { *m = ItemBase{} }
func (m *ItemBase) String() string { return proto.CompactTextString(m) }
func (*ItemBase) ProtoMessage()    {}
func (*ItemBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_97540e24b7d7911a, []int{0}
}
func (m *ItemBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemBase.Merge(m, src)
}
func (m *ItemBase) XXX_Size() int {
	return m.Size()
}
func (m *ItemBase) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemBase.DiscardUnknown(m)
}

var xxx_messageInfo_ItemBase proto.InternalMessageInfo

func (m *ItemBase) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *ItemBase) GetType() ItemEnum_Type {
	if m != nil {
		return m.Type
	}
	return ItemEnum_ZeroNoUse
}

func (m *ItemBase) GetConfigID() uint32 {
	if m != nil {
		return m.ConfigID
	}
	return 0
}

func (m *ItemBase) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *ItemBase) GetPos() int32 {
	if m != nil {
		return m.Pos
	}
	return 0
}

// 道具枚举定义
type ItemEnum struct {
}

func (m *ItemEnum) Reset()         { *m = ItemEnum{} }
func (m *ItemEnum) String() string { return proto.CompactTextString(m) }
func (*ItemEnum) ProtoMessage()    {}
func (*ItemEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_97540e24b7d7911a, []int{1}
}
func (m *ItemEnum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemEnum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemEnum.Merge(m, src)
}
func (m *ItemEnum) XXX_Size() int {
	return m.Size()
}
func (m *ItemEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemEnum.DiscardUnknown(m)
}

var xxx_messageInfo_ItemEnum proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("ItemEnum_Type", ItemEnum_Type_name, ItemEnum_Type_value)
	proto.RegisterType((*ItemBase)(nil), "ItemBase")
	proto.RegisterType((*ItemEnum)(nil), "ItemEnum")
}

func init() { proto.RegisterFile("ItemBase.proto", fileDescriptor_97540e24b7d7911a) }

var fileDescriptor_97540e24b7d7911a = []byte{
	// 236 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xf3, 0x2c, 0x49, 0xcd,
	0x75, 0x4a, 0x2c, 0x4e, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0xaa, 0xe3, 0xe2, 0x80, 0x89,
	0x08, 0xf1, 0x71, 0x31, 0x79, 0xba, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x31, 0x79, 0xba,
	0x08, 0x29, 0x71, 0xb1, 0x84, 0x54, 0x16, 0xa4, 0x4a, 0x30, 0x29, 0x30, 0x6a, 0xf0, 0x19, 0xf1,
	0xe9, 0x81, 0x14, 0xba, 0xe6, 0x95, 0xe6, 0xea, 0x81, 0x44, 0x83, 0xc0, 0x72, 0x42, 0x52, 0x5c,
	0x1c, 0xce, 0xf9, 0x79, 0x69, 0x99, 0xe9, 0x9e, 0x2e, 0x12, 0xcc, 0x0a, 0x8c, 0x1a, 0xbc, 0x41,
	0x70, 0xbe, 0x90, 0x00, 0x17, 0xb3, 0x5f, 0x69, 0xae, 0x04, 0x0b, 0x58, 0x18, 0xc4, 0x04, 0x89,
	0x04, 0xe4, 0x17, 0x4b, 0xb0, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x81, 0x98, 0x4a, 0x5e, 0x10, 0xfb,
	0x41, 0xc6, 0x2a, 0xd9, 0x41, 0xec, 0x13, 0xe2, 0xe5, 0xe2, 0x8c, 0x4a, 0x2d, 0xca, 0xf7, 0xcb,
	0x0f, 0x2d, 0x4e, 0x15, 0x60, 0x00, 0x71, 0x5d, 0x0b, 0x4b, 0x33, 0x0b, 0x72, 0x53, 0xf3, 0x4a,
	0x04, 0xb8, 0x40, 0xdc, 0xe0, 0xec, 0xcc, 0x9c, 0x1c, 0x90, 0x36, 0x01, 0x6e, 0x21, 0x4e, 0x2e,
	0x56, 0xc7, 0xb4, 0xb4, 0xcc, 0x0a, 0x01, 0x1e, 0x27, 0xf9, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c,
	0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71, 0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e,
	0x3c, 0x96, 0x63, 0x88, 0x62, 0x0d, 0x00, 0x79, 0x36, 0x89, 0x0d, 0xec, 0x67, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x52, 0xf7, 0x7e, 0xe4, 0x05, 0x01, 0x00, 0x00,
}

func (m *ItemBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pos != 0 {
		i = encodeVarintItemBase(dAtA, i, uint64(m.Pos))
		i--
		dAtA[i] = 0x28
	}
	if m.Num != 0 {
		i = encodeVarintItemBase(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x20
	}
	if m.ConfigID != 0 {
		i = encodeVarintItemBase(dAtA, i, uint64(m.ConfigID))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintItemBase(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintItemBase(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ItemEnum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemEnum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemEnum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintItemBase(dAtA []byte, offset int, v uint64) int {
	offset -= sovItemBase(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ItemBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovItemBase(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovItemBase(uint64(m.Type))
	}
	if m.ConfigID != 0 {
		n += 1 + sovItemBase(uint64(m.ConfigID))
	}
	if m.Num != 0 {
		n += 1 + sovItemBase(uint64(m.Num))
	}
	if m.Pos != 0 {
		n += 1 + sovItemBase(uint64(m.Pos))
	}
	return n
}

func (m *ItemEnum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovItemBase(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItemBase(x uint64) (n int) {
	return sovItemBase(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ItemBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItemBase
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItemBase
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ItemEnum_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigID", wireType)
			}
			m.ConfigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ConfigID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pos", wireType)
			}
			m.Pos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pos |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItemBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemEnum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemBase
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemEnum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemEnum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipItemBase(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemBase
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemBase
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItemBase(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItemBase
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItemBase
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItemBase
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItemBase
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItemBase
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItemBase        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItemBase          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItemBase = fmt.Errorf("proto: unexpected end of group")
)
