// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: TeamDef.proto

package Proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 队伍属性
type Team struct {
	Base       *TeamBase                 `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	Run        *TeamRun                  `protobuf:"bytes,2,opt,name=Run,proto3" json:"Run,omitempty"`
	Raid       *RaidInfo                 `protobuf:"bytes,3,opt,name=Raid,proto3" json:"Raid,omitempty"`
	Guide      *GuideInfo                `protobuf:"bytes,4,opt,name=Guide,proto3" json:"Guide,omitempty"`
	Applys     map[string]*TeamApplyInfo `protobuf:"bytes,6,rep,name=Applys,proto3" json:"Applys,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InitedOnce bool                      `protobuf:"varint,7,opt,name=InitedOnce,proto3" json:"InitedOnce,omitempty"`
	Supply     *Supply                   `protobuf:"bytes,8,opt,name=Supply,proto3" json:"Supply,omitempty"`
	SeasonInfo *TeamSeasonInfo           `protobuf:"bytes,9,opt,name=SeasonInfo,proto3" json:"SeasonInfo,omitempty"`
}

func (m *Team) Reset()         { *m = Team{} }
func (m *Team) String() string { return proto.CompactTextString(m) }
func (*Team) ProtoMessage()    {}
func (*Team) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{0}
}
func (m *Team) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Team) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Team.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Team) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Team.Merge(m, src)
}
func (m *Team) XXX_Size() int {
	return m.Size()
}
func (m *Team) XXX_DiscardUnknown() {
	xxx_messageInfo_Team.DiscardUnknown(m)
}

var xxx_messageInfo_Team proto.InternalMessageInfo

func (m *Team) GetBase() *TeamBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Team) GetRun() *TeamRun {
	if m != nil {
		return m.Run
	}
	return nil
}

func (m *Team) GetRaid() *RaidInfo {
	if m != nil {
		return m.Raid
	}
	return nil
}

func (m *Team) GetGuide() *GuideInfo {
	if m != nil {
		return m.Guide
	}
	return nil
}

func (m *Team) GetApplys() map[string]*TeamApplyInfo {
	if m != nil {
		return m.Applys
	}
	return nil
}

func (m *Team) GetInitedOnce() bool {
	if m != nil {
		return m.InitedOnce
	}
	return false
}

func (m *Team) GetSupply() *Supply {
	if m != nil {
		return m.Supply
	}
	return nil
}

func (m *Team) GetSeasonInfo() *TeamSeasonInfo {
	if m != nil {
		return m.SeasonInfo
	}
	return nil
}

// 队伍基础信息
type TeamBase struct {
	UID                 uint64                     `protobuf:"varint,1,opt,name=UID,proto3" json:"UID,omitempty"`
	Members             map[string]*TeamMemberInfo `protobuf:"bytes,2,rep,name=Members,proto3" json:"Members,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Name                string                     `protobuf:"bytes,3,opt,name=Name,proto3" json:"Name,omitempty"`
	Board               string                     `protobuf:"bytes,4,opt,name=Board,proto3" json:"Board,omitempty"`
	Num                 uint32                     `protobuf:"varint,5,opt,name=Num,proto3" json:"Num,omitempty"`
	LastDestoryTime     int64                      `protobuf:"varint,6,opt,name=LastDestoryTime,proto3" json:"LastDestoryTime,omitempty"`
	DailyResetTimestamp int64                      `protobuf:"varint,7,opt,name=DailyResetTimestamp,proto3" json:"DailyResetTimestamp,omitempty"`
	Published           bool                       `protobuf:"varint,8,opt,name=Published,proto3" json:"Published,omitempty"`
	NeedAuth            bool                       `protobuf:"varint,9,opt,name=NeedAuth,proto3" json:"NeedAuth,omitempty"`
	AutoJoinIdx         uint32                     `protobuf:"varint,10,opt,name=AutoJoinIdx,proto3" json:"AutoJoinIdx,omitempty"`
}

func (m *TeamBase) Reset()         { *m = TeamBase{} }
func (m *TeamBase) String() string { return proto.CompactTextString(m) }
func (*TeamBase) ProtoMessage()    {}
func (*TeamBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{1}
}
func (m *TeamBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamBase.Merge(m, src)
}
func (m *TeamBase) XXX_Size() int {
	return m.Size()
}
func (m *TeamBase) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamBase.DiscardUnknown(m)
}

var xxx_messageInfo_TeamBase proto.InternalMessageInfo

func (m *TeamBase) GetUID() uint64 {
	if m != nil {
		return m.UID
	}
	return 0
}

func (m *TeamBase) GetMembers() map[string]*TeamMemberInfo {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *TeamBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TeamBase) GetBoard() string {
	if m != nil {
		return m.Board
	}
	return ""
}

func (m *TeamBase) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

func (m *TeamBase) GetLastDestoryTime() int64 {
	if m != nil {
		return m.LastDestoryTime
	}
	return 0
}

func (m *TeamBase) GetDailyResetTimestamp() int64 {
	if m != nil {
		return m.DailyResetTimestamp
	}
	return 0
}

func (m *TeamBase) GetPublished() bool {
	if m != nil {
		return m.Published
	}
	return false
}

func (m *TeamBase) GetNeedAuth() bool {
	if m != nil {
		return m.NeedAuth
	}
	return false
}

func (m *TeamBase) GetAutoJoinIdx() uint32 {
	if m != nil {
		return m.AutoJoinIdx
	}
	return 0
}

//成员信息
type TeamMemberInfo struct {
	Status   uint32 `protobuf:"varint,1,opt,name=Status,proto3" json:"Status,omitempty"`
	JoinTime int64  `protobuf:"varint,2,opt,name=JoinTime,proto3" json:"JoinTime,omitempty"`
}

func (m *TeamMemberInfo) Reset()         { *m = TeamMemberInfo{} }
func (m *TeamMemberInfo) String() string { return proto.CompactTextString(m) }
func (*TeamMemberInfo) ProtoMessage()    {}
func (*TeamMemberInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{2}
}
func (m *TeamMemberInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamMemberInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamMemberInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamMemberInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamMemberInfo.Merge(m, src)
}
func (m *TeamMemberInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamMemberInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamMemberInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamMemberInfo proto.InternalMessageInfo

func (m *TeamMemberInfo) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *TeamMemberInfo) GetJoinTime() int64 {
	if m != nil {
		return m.JoinTime
	}
	return 0
}

type TeamRun struct {
	Velocity       float32   `protobuf:"fixed32,1,opt,name=Velocity,proto3" json:"Velocity,omitempty"`
	OriginLoaction *PVector3 `protobuf:"bytes,2,opt,name=OriginLoaction,proto3" json:"OriginLoaction,omitempty"`
	TargetLocation *PVector3 `protobuf:"bytes,3,opt,name=TargetLocation,proto3" json:"TargetLocation,omitempty"`
}

func (m *TeamRun) Reset()         { *m = TeamRun{} }
func (m *TeamRun) String() string { return proto.CompactTextString(m) }
func (*TeamRun) ProtoMessage()    {}
func (*TeamRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{3}
}
func (m *TeamRun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamRun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamRun.Merge(m, src)
}
func (m *TeamRun) XXX_Size() int {
	return m.Size()
}
func (m *TeamRun) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamRun.DiscardUnknown(m)
}

var xxx_messageInfo_TeamRun proto.InternalMessageInfo

func (m *TeamRun) GetVelocity() float32 {
	if m != nil {
		return m.Velocity
	}
	return 0
}

func (m *TeamRun) GetOriginLoaction() *PVector3 {
	if m != nil {
		return m.OriginLoaction
	}
	return nil
}

func (m *TeamRun) GetTargetLocation() *PVector3 {
	if m != nil {
		return m.TargetLocation
	}
	return nil
}

type RaidInfo struct {
	Progress                 uint32 `protobuf:"varint,1,opt,name=Progress,proto3" json:"Progress,omitempty"`
	OwnTickets               uint32 `protobuf:"varint,2,opt,name=OwnTickets,proto3" json:"OwnTickets,omitempty"`
	FastBattleResetTimestamp int64  `protobuf:"varint,3,opt,name=FastBattleResetTimestamp,proto3" json:"FastBattleResetTimestamp,omitempty"`
}

func (m *RaidInfo) Reset()         { *m = RaidInfo{} }
func (m *RaidInfo) String() string { return proto.CompactTextString(m) }
func (*RaidInfo) ProtoMessage()    {}
func (*RaidInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{4}
}
func (m *RaidInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RaidInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RaidInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RaidInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RaidInfo.Merge(m, src)
}
func (m *RaidInfo) XXX_Size() int {
	return m.Size()
}
func (m *RaidInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RaidInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RaidInfo proto.InternalMessageInfo

func (m *RaidInfo) GetProgress() uint32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *RaidInfo) GetOwnTickets() uint32 {
	if m != nil {
		return m.OwnTickets
	}
	return 0
}

func (m *RaidInfo) GetFastBattleResetTimestamp() int64 {
	if m != nil {
		return m.FastBattleResetTimestamp
	}
	return 0
}

type GuideInfo struct {
	Step     uint32 `protobuf:"varint,1,opt,name=Step,proto3" json:"Step,omitempty"`
	IsFinish bool   `protobuf:"varint,2,opt,name=IsFinish,proto3" json:"IsFinish,omitempty"`
}

func (m *GuideInfo) Reset()         { *m = GuideInfo{} }
func (m *GuideInfo) String() string { return proto.CompactTextString(m) }
func (*GuideInfo) ProtoMessage()    {}
func (*GuideInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{5}
}
func (m *GuideInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GuideInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GuideInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GuideInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GuideInfo.Merge(m, src)
}
func (m *GuideInfo) XXX_Size() int {
	return m.Size()
}
func (m *GuideInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_GuideInfo.DiscardUnknown(m)
}

var xxx_messageInfo_GuideInfo proto.InternalMessageInfo

func (m *GuideInfo) GetStep() uint32 {
	if m != nil {
		return m.Step
	}
	return 0
}

func (m *GuideInfo) GetIsFinish() bool {
	if m != nil {
		return m.IsFinish
	}
	return false
}

// 申请人信息
type TeamApplyInfo struct {
	Time    int64  `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (m *TeamApplyInfo) Reset()         { *m = TeamApplyInfo{} }
func (m *TeamApplyInfo) String() string { return proto.CompactTextString(m) }
func (*TeamApplyInfo) ProtoMessage()    {}
func (*TeamApplyInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{6}
}
func (m *TeamApplyInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamApplyInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamApplyInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamApplyInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamApplyInfo.Merge(m, src)
}
func (m *TeamApplyInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamApplyInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamApplyInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamApplyInfo proto.InternalMessageInfo

func (m *TeamApplyInfo) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *TeamApplyInfo) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

//队伍第三方显示属性
type TeamPart struct {
	RoleList []*Role `protobuf:"bytes,1,rep,name=RoleList,proto3" json:"RoleList,omitempty"`
	TeamInfo *Team   `protobuf:"bytes,2,opt,name=TeamInfo,proto3" json:"TeamInfo,omitempty"`
}

func (m *TeamPart) Reset()         { *m = TeamPart{} }
func (m *TeamPart) String() string { return proto.CompactTextString(m) }
func (*TeamPart) ProtoMessage()    {}
func (*TeamPart) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{7}
}
func (m *TeamPart) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamPart) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamPart.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamPart) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamPart.Merge(m, src)
}
func (m *TeamPart) XXX_Size() int {
	return m.Size()
}
func (m *TeamPart) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamPart.DiscardUnknown(m)
}

var xxx_messageInfo_TeamPart proto.InternalMessageInfo

func (m *TeamPart) GetRoleList() []*Role {
	if m != nil {
		return m.RoleList
	}
	return nil
}

func (m *TeamPart) GetTeamInfo() *Team {
	if m != nil {
		return m.TeamInfo
	}
	return nil
}

type RoleArry struct {
	RoleList []*Role `protobuf:"bytes,1,rep,name=RoleList,proto3" json:"RoleList,omitempty"`
}

func (m *RoleArry) Reset()         { *m = RoleArry{} }
func (m *RoleArry) String() string { return proto.CompactTextString(m) }
func (*RoleArry) ProtoMessage()    {}
func (*RoleArry) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{8}
}
func (m *RoleArry) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleArry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleArry.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleArry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleArry.Merge(m, src)
}
func (m *RoleArry) XXX_Size() int {
	return m.Size()
}
func (m *RoleArry) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleArry.DiscardUnknown(m)
}

var xxx_messageInfo_RoleArry proto.InternalMessageInfo

func (m *RoleArry) GetRoleList() []*Role {
	if m != nil {
		return m.RoleList
	}
	return nil
}

type Supply struct {
	SupplyResetTimestamp int64 `protobuf:"varint,1,opt,name=SupplyResetTimestamp,proto3" json:"SupplyResetTimestamp,omitempty"`
}

func (m *Supply) Reset()         { *m = Supply{} }
func (m *Supply) String() string { return proto.CompactTextString(m) }
func (*Supply) ProtoMessage()    {}
func (*Supply) Descriptor() ([]byte, []int) {
	return fileDescriptor_6af1b1d788bfee8f, []int{9}
}
func (m *Supply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Supply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Supply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Supply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Supply.Merge(m, src)
}
func (m *Supply) XXX_Size() int {
	return m.Size()
}
func (m *Supply) XXX_DiscardUnknown() {
	xxx_messageInfo_Supply.DiscardUnknown(m)
}

var xxx_messageInfo_Supply proto.InternalMessageInfo

func (m *Supply) GetSupplyResetTimestamp() int64 {
	if m != nil {
		return m.SupplyResetTimestamp
	}
	return 0
}

func init() {
	proto.RegisterType((*Team)(nil), "Team")
	proto.RegisterMapType((map[string]*TeamApplyInfo)(nil), "Team.ApplysEntry")
	proto.RegisterType((*TeamBase)(nil), "TeamBase")
	proto.RegisterMapType((map[string]*TeamMemberInfo)(nil), "TeamBase.MembersEntry")
	proto.RegisterType((*TeamMemberInfo)(nil), "TeamMemberInfo")
	proto.RegisterType((*TeamRun)(nil), "TeamRun")
	proto.RegisterType((*RaidInfo)(nil), "RaidInfo")
	proto.RegisterType((*GuideInfo)(nil), "GuideInfo")
	proto.RegisterType((*TeamApplyInfo)(nil), "TeamApplyInfo")
	proto.RegisterType((*TeamPart)(nil), "TeamPart")
	proto.RegisterType((*RoleArry)(nil), "RoleArry")
	proto.RegisterType((*Supply)(nil), "Supply")
}

func init() { proto.RegisterFile("TeamDef.proto", fileDescriptor_6af1b1d788bfee8f) }

var fileDescriptor_6af1b1d788bfee8f = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0x3d, 0x6f, 0xe3, 0x46,
	0x10, 0x35, 0x45, 0x7d, 0x90, 0xa3, 0xc8, 0x4e, 0x36, 0x86, 0x41, 0x08, 0x89, 0xac, 0x10, 0x09,
	0xa0, 0x14, 0x61, 0x1c, 0xbb, 0x09, 0x9c, 0xa4, 0x90, 0xa2, 0x38, 0x50, 0xa2, 0xd8, 0xc2, 0x4a,
	0x71, 0x91, 0x6e, 0x2d, 0xad, 0x65, 0xc2, 0x22, 0x57, 0xe0, 0x2e, 0x93, 0xa8, 0xbd, 0xf6, 0x8a,
	0xbb, 0x9f, 0x75, 0xa5, 0xcb, 0x2b, 0x0f, 0x76, 0x77, 0xbf, 0xe2, 0xb0, 0xb3, 0x14, 0x4d, 0xe9,
	0x7c, 0xc0, 0x75, 0x33, 0xef, 0xcd, 0xcc, 0x0e, 0xdf, 0x70, 0x06, 0x1a, 0x13, 0xce, 0xa2, 0x3e,
	0xbf, 0x0e, 0x96, 0x89, 0x50, 0xa2, 0xb9, 0xf7, 0xab, 0x88, 0x22, 0x11, 0x3f, 0x02, 0x0d, 0x2a,
	0x16, 0xbc, 0xc0, 0x8f, 0x39, 0x93, 0x05, 0xde, 0x7f, 0x5b, 0x82, 0xb2, 0x2e, 0x41, 0xbe, 0x84,
	0x72, 0x8f, 0x49, 0xee, 0x59, 0x6d, 0xab, 0x53, 0x3f, 0x76, 0x03, 0x0d, 0x6a, 0x80, 0x22, 0x4c,
	0x9a, 0x60, 0xd3, 0x34, 0xf6, 0x4a, 0xc8, 0x3a, 0xc8, 0xd2, 0x34, 0xa6, 0x1a, 0xd4, 0xa9, 0x94,
	0x85, 0x33, 0xcf, 0xce, 0x52, 0xb5, 0x33, 0x88, 0xaf, 0x05, 0x45, 0x98, 0xb4, 0xa1, 0xf2, 0x7b,
	0x1a, 0xce, 0xb8, 0x57, 0x46, 0x1e, 0x02, 0xf4, 0x30, 0xc0, 0x10, 0xe4, 0x5b, 0xa8, 0x76, 0x97,
	0xcb, 0xc5, 0x4a, 0x7a, 0xd5, 0xb6, 0xdd, 0xa9, 0x1f, 0x7f, 0x86, 0xf5, 0x03, 0x83, 0xfd, 0x16,
	0xab, 0x64, 0x45, 0xb3, 0x00, 0xd2, 0x02, 0x18, 0xc4, 0xa1, 0xe2, 0xb3, 0x8b, 0x78, 0xca, 0xbd,
	0x5a, 0xdb, 0xea, 0x38, 0xb4, 0x80, 0x90, 0x43, 0xa8, 0x8e, 0x53, 0x1d, 0xea, 0x39, 0xf8, 0x5a,
	0x2d, 0x30, 0x2e, 0xcd, 0x60, 0xf2, 0x3d, 0x80, 0xd1, 0x40, 0x37, 0xe0, 0xb9, 0x18, 0xb4, 0x87,
	0xef, 0x3d, 0xc2, 0xb4, 0x10, 0xd2, 0x1c, 0x40, 0xbd, 0xd0, 0x08, 0xf9, 0x14, 0xec, 0x5b, 0xbe,
	0x42, 0x99, 0x5c, 0xaa, 0x4d, 0xf2, 0x35, 0x54, 0xfe, 0x65, 0x8b, 0x94, 0x67, 0xe2, 0xec, 0x62,
	0x31, 0x4c, 0x31, 0xdf, 0x88, 0xe4, 0x69, 0xe9, 0x47, 0xcb, 0x7f, 0x61, 0x83, 0xb3, 0xd6, 0x55,
	0x17, 0xfa, 0x7b, 0xd0, 0xc7, 0x42, 0x65, 0xaa, 0x4d, 0x72, 0x04, 0xb5, 0xbf, 0x78, 0x74, 0xc5,
	0x13, 0xe9, 0x95, 0x50, 0x87, 0x83, 0x7c, 0x0a, 0x41, 0x46, 0x18, 0x31, 0xd6, 0x61, 0x84, 0x40,
	0xf9, 0x9c, 0x45, 0x1c, 0x95, 0x77, 0x29, 0xda, 0x64, 0x1f, 0x2a, 0x3d, 0xc1, 0x92, 0x19, 0xca,
	0xed, 0x52, 0xe3, 0xe8, 0xd7, 0xce, 0xd3, 0xc8, 0xab, 0xb4, 0xad, 0x4e, 0x83, 0x6a, 0x93, 0x74,
	0x60, 0x6f, 0xc8, 0xa4, 0xea, 0x73, 0xa9, 0x44, 0xb2, 0x9a, 0x84, 0x11, 0xf7, 0xaa, 0x6d, 0xab,
	0x63, 0xd3, 0x6d, 0x98, 0x1c, 0xc1, 0xe7, 0x7d, 0x16, 0x2e, 0x56, 0x94, 0x4b, 0xae, 0x34, 0x22,
	0x15, 0x8b, 0x96, 0x28, 0xbe, 0x4d, 0x9f, 0xa2, 0xc8, 0x17, 0xe0, 0x8e, 0xd2, 0xab, 0x45, 0x28,
	0x6f, 0xf8, 0x0c, 0x07, 0xe1, 0xd0, 0x47, 0x80, 0x34, 0xc1, 0x39, 0xe7, 0x7c, 0xd6, 0x4d, 0xd5,
	0x0d, 0x0e, 0xc0, 0xa1, 0xb9, 0x4f, 0xda, 0x50, 0xef, 0xa6, 0x4a, 0xfc, 0x21, 0xc2, 0x78, 0x30,
	0xfb, 0xdf, 0x03, 0xec, 0xb7, 0x08, 0x35, 0xff, 0x84, 0x4f, 0x8a, 0x62, 0x3c, 0x31, 0x90, 0x6f,
	0x36, 0x07, 0x62, 0xa6, 0x6b, 0x72, 0xb6, 0x27, 0xd2, 0x87, 0xdd, 0x4d, 0x92, 0x1c, 0x40, 0x75,
	0xac, 0x98, 0x4a, 0x25, 0x56, 0x6c, 0xd0, 0xcc, 0xd3, 0x4d, 0xeb, 0x0e, 0x50, 0xa7, 0x12, 0x7e,
	0x79, 0xee, 0xfb, 0xcf, 0x2d, 0xa8, 0x65, 0x1b, 0xa1, 0xe3, 0x2e, 0xf9, 0x42, 0x4c, 0x43, 0x65,
	0x7a, 0x2a, 0xd1, 0xdc, 0x27, 0x3f, 0xc0, 0xee, 0x45, 0x12, 0xce, 0xc3, 0x78, 0x28, 0xd8, 0x54,
	0x85, 0x62, 0xbd, 0x4f, 0x6e, 0x30, 0xba, 0xe4, 0x53, 0x25, 0x92, 0x13, 0xba, 0x15, 0xa0, 0x53,
	0x26, 0x2c, 0x99, 0x73, 0x35, 0x14, 0x53, 0x86, 0x29, 0xf6, 0x7b, 0x29, 0x9b, 0x01, 0xfe, 0x33,
	0x0b, 0x9c, 0xf5, 0x0a, 0xea, 0x76, 0x46, 0x89, 0x98, 0x27, 0x5c, 0xae, 0x3f, 0x28, 0xf7, 0xf5,
	0x2e, 0x5d, 0xfc, 0x17, 0x4f, 0xc2, 0xe9, 0x2d, 0x57, 0x12, 0x5b, 0x69, 0xd0, 0x02, 0x42, 0x4e,
	0xc1, 0x3b, 0x63, 0x52, 0xf5, 0x98, 0x52, 0x0b, 0xbe, 0x35, 0x7c, 0x1b, 0x25, 0xf8, 0x20, 0xef,
	0xff, 0x04, 0x6e, 0xbe, 0xe6, 0xfa, 0x37, 0x1d, 0x2b, 0xbe, 0xcc, 0x1a, 0x40, 0x5b, 0x37, 0x36,
	0x90, 0x67, 0x61, 0x1c, 0xca, 0x1b, 0x7c, 0xda, 0xa1, 0xb9, 0xef, 0xff, 0x62, 0xce, 0x5a, 0xbe,
	0x43, 0xba, 0x00, 0x0a, 0x6f, 0xe1, 0xab, 0x68, 0x13, 0x4f, 0x6f, 0x8b, 0x94, 0x6c, 0x6e, 0xe6,
	0xe1, 0xd2, 0xb5, 0xeb, 0x8f, 0xcc, 0x96, 0x8d, 0x58, 0xa2, 0xc8, 0x57, 0xe0, 0xe8, 0x0b, 0x38,
	0x0c, 0xa5, 0xf2, 0x2c, 0x5c, 0xaa, 0x4a, 0xa0, 0x01, 0x9a, 0xc3, 0x3a, 0x44, 0x87, 0xe3, 0x3d,
	0x30, 0xf3, 0xa8, 0x98, 0xfb, 0x96, 0xc3, 0xfe, 0x77, 0xa6, 0x4a, 0x37, 0x49, 0x56, 0x1f, 0x51,
	0xd1, 0xff, 0x79, 0x7d, 0x84, 0xc8, 0x31, 0xec, 0x67, 0xf7, 0x67, 0x53, 0x3e, 0xf3, 0x21, 0x4f,
	0x72, 0xbd, 0xc3, 0x57, 0xf7, 0x2d, 0xeb, 0xee, 0xbe, 0x65, 0xbd, 0xb9, 0x6f, 0x59, 0x2f, 0x1f,
	0x5a, 0x3b, 0x77, 0x0f, 0xad, 0x9d, 0xd7, 0x0f, 0xad, 0x9d, 0x7f, 0x2a, 0x23, 0x7d, 0xb3, 0xaf,
	0xaa, 0x78, 0xba, 0x4f, 0xde, 0x05, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xb1, 0x98, 0x3d, 0xfc, 0x05,
	0x00, 0x00,
}

func (m *Team) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Team) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Team) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonInfo != nil {
		{
			size, err := m.SeasonInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.Supply != nil {
		{
			size, err := m.Supply.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.InitedOnce {
		i--
		if m.InitedOnce {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if len(m.Applys) > 0 {
		for k := range m.Applys {
			v := m.Applys[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTeamDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTeamDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTeamDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Guide != nil {
		{
			size, err := m.Guide.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Raid != nil {
		{
			size, err := m.Raid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Run != nil {
		{
			size, err := m.Run.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TeamBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AutoJoinIdx != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.AutoJoinIdx))
		i--
		dAtA[i] = 0x50
	}
	if m.NeedAuth {
		i--
		if m.NeedAuth {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Published {
		i--
		if m.Published {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.DailyResetTimestamp != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.DailyResetTimestamp))
		i--
		dAtA[i] = 0x38
	}
	if m.LastDestoryTime != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.LastDestoryTime))
		i--
		dAtA[i] = 0x30
	}
	if m.Num != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.Num))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Board) > 0 {
		i -= len(m.Board)
		copy(dAtA[i:], m.Board)
		i = encodeVarintTeamDef(dAtA, i, uint64(len(m.Board)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintTeamDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Members) > 0 {
		for k := range m.Members {
			v := m.Members[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintTeamDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTeamDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTeamDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.UID != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.UID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamMemberInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamMemberInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamMemberInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.JoinTime != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.JoinTime))
		i--
		dAtA[i] = 0x10
	}
	if m.Status != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamRun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamRun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamRun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TargetLocation != nil {
		{
			size, err := m.TargetLocation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OriginLoaction != nil {
		{
			size, err := m.OriginLoaction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Velocity != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Velocity))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *RaidInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RaidInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RaidInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FastBattleResetTimestamp != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.FastBattleResetTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.OwnTickets != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.OwnTickets))
		i--
		dAtA[i] = 0x10
	}
	if m.Progress != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GuideInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GuideInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GuideInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsFinish {
		i--
		if m.IsFinish {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Step != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.Step))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamApplyInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamApplyInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamApplyInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTeamDef(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Time != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TeamPart) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamPart) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamPart) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TeamInfo != nil {
		{
			size, err := m.TeamInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTeamDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.RoleList) > 0 {
		for iNdEx := len(m.RoleList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RoleArry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleArry) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleArry) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoleList) > 0 {
		for iNdEx := len(m.RoleList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RoleList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTeamDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Supply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Supply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Supply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SupplyResetTimestamp != 0 {
		i = encodeVarintTeamDef(dAtA, i, uint64(m.SupplyResetTimestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTeamDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovTeamDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Team) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.Run != nil {
		l = m.Run.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.Raid != nil {
		l = m.Raid.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.Guide != nil {
		l = m.Guide.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if len(m.Applys) > 0 {
		for k, v := range m.Applys {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTeamDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTeamDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTeamDef(uint64(mapEntrySize))
		}
	}
	if m.InitedOnce {
		n += 2
	}
	if m.Supply != nil {
		l = m.Supply.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.SeasonInfo != nil {
		l = m.SeasonInfo.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	return n
}

func (m *TeamBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UID != 0 {
		n += 1 + sovTeamDef(uint64(m.UID))
	}
	if len(m.Members) > 0 {
		for k, v := range m.Members {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovTeamDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovTeamDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovTeamDef(uint64(mapEntrySize))
		}
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovTeamDef(uint64(l))
	}
	l = len(m.Board)
	if l > 0 {
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.Num != 0 {
		n += 1 + sovTeamDef(uint64(m.Num))
	}
	if m.LastDestoryTime != 0 {
		n += 1 + sovTeamDef(uint64(m.LastDestoryTime))
	}
	if m.DailyResetTimestamp != 0 {
		n += 1 + sovTeamDef(uint64(m.DailyResetTimestamp))
	}
	if m.Published {
		n += 2
	}
	if m.NeedAuth {
		n += 2
	}
	if m.AutoJoinIdx != 0 {
		n += 1 + sovTeamDef(uint64(m.AutoJoinIdx))
	}
	return n
}

func (m *TeamMemberInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovTeamDef(uint64(m.Status))
	}
	if m.JoinTime != 0 {
		n += 1 + sovTeamDef(uint64(m.JoinTime))
	}
	return n
}

func (m *TeamRun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Velocity != 0 {
		n += 5
	}
	if m.OriginLoaction != nil {
		l = m.OriginLoaction.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	if m.TargetLocation != nil {
		l = m.TargetLocation.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	return n
}

func (m *RaidInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Progress != 0 {
		n += 1 + sovTeamDef(uint64(m.Progress))
	}
	if m.OwnTickets != 0 {
		n += 1 + sovTeamDef(uint64(m.OwnTickets))
	}
	if m.FastBattleResetTimestamp != 0 {
		n += 1 + sovTeamDef(uint64(m.FastBattleResetTimestamp))
	}
	return n
}

func (m *GuideInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Step != 0 {
		n += 1 + sovTeamDef(uint64(m.Step))
	}
	if m.IsFinish {
		n += 2
	}
	return n
}

func (m *TeamApplyInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovTeamDef(uint64(m.Time))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTeamDef(uint64(l))
	}
	return n
}

func (m *TeamPart) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleList) > 0 {
		for _, e := range m.RoleList {
			l = e.Size()
			n += 1 + l + sovTeamDef(uint64(l))
		}
	}
	if m.TeamInfo != nil {
		l = m.TeamInfo.Size()
		n += 1 + l + sovTeamDef(uint64(l))
	}
	return n
}

func (m *RoleArry) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.RoleList) > 0 {
		for _, e := range m.RoleList {
			l = e.Size()
			n += 1 + l + sovTeamDef(uint64(l))
		}
	}
	return n
}

func (m *Supply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SupplyResetTimestamp != 0 {
		n += 1 + sovTeamDef(uint64(m.SupplyResetTimestamp))
	}
	return n
}

func sovTeamDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTeamDef(x uint64) (n int) {
	return sovTeamDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Team) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Team: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Team: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &TeamBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Run", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Run == nil {
				m.Run = &TeamRun{}
			}
			if err := m.Run.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Raid == nil {
				m.Raid = &RaidInfo{}
			}
			if err := m.Raid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Guide", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Guide == nil {
				m.Guide = &GuideInfo{}
			}
			if err := m.Guide.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Applys", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Applys == nil {
				m.Applys = make(map[string]*TeamApplyInfo)
			}
			var mapkey string
			var mapvalue *TeamApplyInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeamDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeamDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTeamDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTeamDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeamDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTeamDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTeamDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TeamApplyInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTeamDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTeamDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Applys[mapkey] = mapvalue
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitedOnce", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.InitedOnce = bool(v != 0)
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Supply == nil {
				m.Supply = &Supply{}
			}
			if err := m.Supply.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SeasonInfo == nil {
				m.SeasonInfo = &TeamSeasonInfo{}
			}
			if err := m.SeasonInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UID", wireType)
			}
			m.UID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Members == nil {
				m.Members = make(map[string]*TeamMemberInfo)
			}
			var mapkey string
			var mapvalue *TeamMemberInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTeamDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeamDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTeamDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTeamDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTeamDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthTeamDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthTeamDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &TeamMemberInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTeamDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTeamDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Members[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Board", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Board = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastDestoryTime", wireType)
			}
			m.LastDestoryTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastDestoryTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DailyResetTimestamp", wireType)
			}
			m.DailyResetTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DailyResetTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Published", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Published = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NeedAuth", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.NeedAuth = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AutoJoinIdx", wireType)
			}
			m.AutoJoinIdx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AutoJoinIdx |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamMemberInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamMemberInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamMemberInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field JoinTime", wireType)
			}
			m.JoinTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.JoinTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamRun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamRun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamRun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Velocity", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Velocity = float32(math.Float32frombits(v))
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginLoaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OriginLoaction == nil {
				m.OriginLoaction = &PVector3{}
			}
			if err := m.OriginLoaction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TargetLocation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TargetLocation == nil {
				m.TargetLocation = &PVector3{}
			}
			if err := m.TargetLocation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RaidInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RaidInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RaidInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnTickets", wireType)
			}
			m.OwnTickets = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OwnTickets |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FastBattleResetTimestamp", wireType)
			}
			m.FastBattleResetTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FastBattleResetTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GuideInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GuideInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GuideInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Step", wireType)
			}
			m.Step = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Step |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinish", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinish = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamApplyInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamApplyInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamApplyInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TeamPart) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamPart: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamPart: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleList = append(m.RoleList, &Role{})
			if err := m.RoleList[len(m.RoleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TeamInfo == nil {
				m.TeamInfo = &Team{}
			}
			if err := m.TeamInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleArry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleArry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleArry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoleList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTeamDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTeamDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoleList = append(m.RoleList, &Role{})
			if err := m.RoleList[len(m.RoleList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Supply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Supply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Supply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupplyResetTimestamp", wireType)
			}
			m.SupplyResetTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SupplyResetTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTeamDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTeamDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTeamDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTeamDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTeamDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTeamDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTeamDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTeamDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTeamDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTeamDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTeamDef = fmt.Errorf("proto: unexpected end of group")
)
