// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: SeasonDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TeamSeasonInfo struct {
	SeasonID       uint32 `protobuf:"varint,1,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	SeasonState    bool   `protobuf:"varint,2,opt,name=SeasonState,proto3" json:"SeasonState,omitempty"`
	SeasonTopLevel uint32 `protobuf:"varint,3,opt,name=SeasonTopLevel,proto3" json:"SeasonTopLevel,omitempty"`
	TeamScore      uint32 `protobuf:"varint,4,opt,name=TeamScore,proto3" json:"TeamScore,omitempty"`
	SeasonLevel    uint32 `protobuf:"varint,5,opt,name=SeasonLevel,proto3" json:"SeasonLevel,omitempty"`
}

func (m *TeamSeasonInfo) Reset()         { *m = TeamSeasonInfo{} }
func (m *TeamSeasonInfo) String() string { return proto.CompactTextString(m) }
func (*TeamSeasonInfo) ProtoMessage()    {}
func (*TeamSeasonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_132cff0ca62a3658, []int{0}
}
func (m *TeamSeasonInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TeamSeasonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TeamSeasonInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TeamSeasonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TeamSeasonInfo.Merge(m, src)
}
func (m *TeamSeasonInfo) XXX_Size() int {
	return m.Size()
}
func (m *TeamSeasonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_TeamSeasonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_TeamSeasonInfo proto.InternalMessageInfo

func (m *TeamSeasonInfo) GetSeasonID() uint32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *TeamSeasonInfo) GetSeasonState() bool {
	if m != nil {
		return m.SeasonState
	}
	return false
}

func (m *TeamSeasonInfo) GetSeasonTopLevel() uint32 {
	if m != nil {
		return m.SeasonTopLevel
	}
	return 0
}

func (m *TeamSeasonInfo) GetTeamScore() uint32 {
	if m != nil {
		return m.TeamScore
	}
	return 0
}

func (m *TeamSeasonInfo) GetSeasonLevel() uint32 {
	if m != nil {
		return m.SeasonLevel
	}
	return 0
}

type RoleSeasonInfo struct {
	MyScore                uint32          `protobuf:"varint,1,opt,name=MyScore,proto3" json:"MyScore,omitempty"`
	LevelAwards            map[uint32]bool `protobuf:"bytes,2,rep,name=LevelAwards,proto3" json:"LevelAwards,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	GetAwards              bool            `protobuf:"varint,3,opt,name=GetAwards,proto3" json:"GetAwards,omitempty"`
	SaveTeamID             string          `protobuf:"bytes,4,opt,name=SaveTeamID,proto3" json:"SaveTeamID,omitempty"`
	SaveSeasonID           uint32          `protobuf:"varint,5,opt,name=SaveSeasonID,proto3" json:"SaveSeasonID,omitempty"`
	SaveSeasonScore        uint32          `protobuf:"varint,6,opt,name=SaveSeasonScore,proto3" json:"SaveSeasonScore,omitempty"`
	SaveSeasonPlace        uint32          `protobuf:"varint,7,opt,name=SaveSeasonPlace,proto3" json:"SaveSeasonPlace,omitempty"`
	Notify                 bool            `protobuf:"varint,8,opt,name=Notify,proto3" json:"Notify,omitempty"`
	SaveSeasonPlacePercent uint32          `protobuf:"varint,9,opt,name=SaveSeasonPlacePercent,proto3" json:"SaveSeasonPlacePercent,omitempty"`
}

func (m *RoleSeasonInfo) Reset()         { *m = RoleSeasonInfo{} }
func (m *RoleSeasonInfo) String() string { return proto.CompactTextString(m) }
func (*RoleSeasonInfo) ProtoMessage()    {}
func (*RoleSeasonInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_132cff0ca62a3658, []int{1}
}
func (m *RoleSeasonInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RoleSeasonInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RoleSeasonInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RoleSeasonInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RoleSeasonInfo.Merge(m, src)
}
func (m *RoleSeasonInfo) XXX_Size() int {
	return m.Size()
}
func (m *RoleSeasonInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_RoleSeasonInfo.DiscardUnknown(m)
}

var xxx_messageInfo_RoleSeasonInfo proto.InternalMessageInfo

func (m *RoleSeasonInfo) GetMyScore() uint32 {
	if m != nil {
		return m.MyScore
	}
	return 0
}

func (m *RoleSeasonInfo) GetLevelAwards() map[uint32]bool {
	if m != nil {
		return m.LevelAwards
	}
	return nil
}

func (m *RoleSeasonInfo) GetGetAwards() bool {
	if m != nil {
		return m.GetAwards
	}
	return false
}

func (m *RoleSeasonInfo) GetSaveTeamID() string {
	if m != nil {
		return m.SaveTeamID
	}
	return ""
}

func (m *RoleSeasonInfo) GetSaveSeasonID() uint32 {
	if m != nil {
		return m.SaveSeasonID
	}
	return 0
}

func (m *RoleSeasonInfo) GetSaveSeasonScore() uint32 {
	if m != nil {
		return m.SaveSeasonScore
	}
	return 0
}

func (m *RoleSeasonInfo) GetSaveSeasonPlace() uint32 {
	if m != nil {
		return m.SaveSeasonPlace
	}
	return 0
}

func (m *RoleSeasonInfo) GetNotify() bool {
	if m != nil {
		return m.Notify
	}
	return false
}

func (m *RoleSeasonInfo) GetSaveSeasonPlacePercent() uint32 {
	if m != nil {
		return m.SaveSeasonPlacePercent
	}
	return 0
}

type RankData struct {
	MyPlace    uint32          `protobuf:"varint,1,opt,name=MyPlace,proto3" json:"MyPlace,omitempty"`
	LeftTime   uint32          `protobuf:"varint,2,opt,name=LeftTime,proto3" json:"LeftTime,omitempty"`
	SeasonID   uint32          `protobuf:"varint,3,opt,name=SeasonID,proto3" json:"SeasonID,omitempty"`
	LastSeason []*RankTeamData `protobuf:"bytes,4,rep,name=LastSeason,proto3" json:"LastSeason,omitempty"`
	ThisSeason []*RankTeamData `protobuf:"bytes,5,rep,name=ThisSeason,proto3" json:"ThisSeason,omitempty"`
}

func (m *RankData) Reset()         { *m = RankData{} }
func (m *RankData) String() string { return proto.CompactTextString(m) }
func (*RankData) ProtoMessage()    {}
func (*RankData) Descriptor() ([]byte, []int) {
	return fileDescriptor_132cff0ca62a3658, []int{2}
}
func (m *RankData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankData.Merge(m, src)
}
func (m *RankData) XXX_Size() int {
	return m.Size()
}
func (m *RankData) XXX_DiscardUnknown() {
	xxx_messageInfo_RankData.DiscardUnknown(m)
}

var xxx_messageInfo_RankData proto.InternalMessageInfo

func (m *RankData) GetMyPlace() uint32 {
	if m != nil {
		return m.MyPlace
	}
	return 0
}

func (m *RankData) GetLeftTime() uint32 {
	if m != nil {
		return m.LeftTime
	}
	return 0
}

func (m *RankData) GetSeasonID() uint32 {
	if m != nil {
		return m.SeasonID
	}
	return 0
}

func (m *RankData) GetLastSeason() []*RankTeamData {
	if m != nil {
		return m.LastSeason
	}
	return nil
}

func (m *RankData) GetThisSeason() []*RankTeamData {
	if m != nil {
		return m.ThisSeason
	}
	return nil
}

type RankTeamData struct {
	ID      string            `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name    string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Score   uint32            `protobuf:"varint,3,opt,name=Score,proto3" json:"Score,omitempty"`
	Members []*RankMemberData `protobuf:"bytes,4,rep,name=Members,proto3" json:"Members,omitempty"`
}

func (m *RankTeamData) Reset()         { *m = RankTeamData{} }
func (m *RankTeamData) String() string { return proto.CompactTextString(m) }
func (*RankTeamData) ProtoMessage()    {}
func (*RankTeamData) Descriptor() ([]byte, []int) {
	return fileDescriptor_132cff0ca62a3658, []int{3}
}
func (m *RankTeamData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankTeamData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankTeamData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankTeamData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankTeamData.Merge(m, src)
}
func (m *RankTeamData) XXX_Size() int {
	return m.Size()
}
func (m *RankTeamData) XXX_DiscardUnknown() {
	xxx_messageInfo_RankTeamData.DiscardUnknown(m)
}

var xxx_messageInfo_RankTeamData proto.InternalMessageInfo

func (m *RankTeamData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RankTeamData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RankTeamData) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *RankTeamData) GetMembers() []*RankMemberData {
	if m != nil {
		return m.Members
	}
	return nil
}

type RankMemberData struct {
	ID     string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Head   uint32 `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`
	Level  uint32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	Status uint32 `protobuf:"varint,5,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (m *RankMemberData) Reset()         { *m = RankMemberData{} }
func (m *RankMemberData) String() string { return proto.CompactTextString(m) }
func (*RankMemberData) ProtoMessage()    {}
func (*RankMemberData) Descriptor() ([]byte, []int) {
	return fileDescriptor_132cff0ca62a3658, []int{4}
}
func (m *RankMemberData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RankMemberData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RankMemberData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RankMemberData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RankMemberData.Merge(m, src)
}
func (m *RankMemberData) XXX_Size() int {
	return m.Size()
}
func (m *RankMemberData) XXX_DiscardUnknown() {
	xxx_messageInfo_RankMemberData.DiscardUnknown(m)
}

var xxx_messageInfo_RankMemberData proto.InternalMessageInfo

func (m *RankMemberData) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RankMemberData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RankMemberData) GetHead() uint32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *RankMemberData) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *RankMemberData) GetStatus() uint32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func init() {
	proto.RegisterType((*TeamSeasonInfo)(nil), "TeamSeasonInfo")
	proto.RegisterType((*RoleSeasonInfo)(nil), "RoleSeasonInfo")
	proto.RegisterMapType((map[uint32]bool)(nil), "RoleSeasonInfo.LevelAwardsEntry")
	proto.RegisterType((*RankData)(nil), "RankData")
	proto.RegisterType((*RankTeamData)(nil), "RankTeamData")
	proto.RegisterType((*RankMemberData)(nil), "RankMemberData")
}

func init() { proto.RegisterFile("SeasonDef.proto", fileDescriptor_132cff0ca62a3658) }

var fileDescriptor_132cff0ca62a3658 = []byte{
	// 522 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x54, 0xcd, 0x8a, 0x13, 0x41,
	0x10, 0xde, 0x99, 0xc9, 0xcf, 0x4c, 0x65, 0x33, 0x59, 0x1a, 0x59, 0x9a, 0x20, 0xe3, 0x30, 0x07,
	0x89, 0x07, 0x73, 0x50, 0x10, 0xf1, 0x20, 0xb8, 0x8c, 0x68, 0x20, 0xbb, 0x84, 0x4e, 0x4e, 0xde,
	0x7a, 0xb3, 0x1d, 0x0c, 0x9b, 0xcc, 0x2c, 0x33, 0xbd, 0x91, 0xbc, 0x85, 0x0f, 0x23, 0x1e, 0x7c,
	0x02, 0x8f, 0x7b, 0xf4, 0x28, 0xc9, 0x8b, 0x48, 0x77, 0x75, 0x32, 0x3f, 0x28, 0x78, 0xeb, 0xef,
	0xab, 0x6f, 0xaa, 0xbe, 0xea, 0xaa, 0x1e, 0xe8, 0x4d, 0x05, 0xcf, 0xd3, 0x24, 0x16, 0x8b, 0xe1,
	0x5d, 0x96, 0xca, 0x34, 0xfa, 0x6e, 0x81, 0x3f, 0x13, 0x7c, 0x8d, 0xfc, 0x28, 0x59, 0xa4, 0xa4,
	0x0f, 0xae, 0x41, 0x31, 0xb5, 0x42, 0x6b, 0xd0, 0x65, 0x47, 0x4c, 0x42, 0xe8, 0xe0, 0x79, 0x2a,
	0xb9, 0x14, 0xd4, 0x0e, 0xad, 0x81, 0xcb, 0xca, 0x14, 0x79, 0x0a, 0x3e, 0xc2, 0x59, 0x7a, 0x37,
	0x16, 0x1b, 0xb1, 0xa2, 0x8e, 0xce, 0x51, 0x63, 0xc9, 0x63, 0xf0, 0x74, 0xdd, 0x79, 0x9a, 0x09,
	0xda, 0xd0, 0x92, 0x82, 0x28, 0xea, 0x60, 0x8a, 0xa6, 0x8e, 0x97, 0xa9, 0xe8, 0x9b, 0x03, 0x3e,
	0x4b, 0x57, 0xa2, 0x64, 0x9c, 0x42, 0xfb, 0x72, 0x8b, 0x09, 0xd1, 0xf7, 0x01, 0x92, 0x0b, 0xe8,
	0xe8, 0xaf, 0xde, 0x7d, 0xe1, 0xd9, 0x4d, 0x4e, 0xed, 0xd0, 0x19, 0x74, 0x5e, 0x84, 0xc3, 0xea,
	0xf7, 0xc3, 0x92, 0xe4, 0x7d, 0x22, 0xb3, 0x2d, 0x2b, 0x7f, 0xa4, 0x0c, 0x7f, 0x10, 0xd2, 0x64,
	0x70, 0x74, 0xe3, 0x05, 0x41, 0x02, 0x80, 0x29, 0xdf, 0x08, 0xd5, 0xc1, 0x28, 0xd6, 0xfd, 0x78,
	0xac, 0xc4, 0x90, 0x08, 0x4e, 0x15, 0x3a, 0x5e, 0x2c, 0x76, 0x54, 0xe1, 0xc8, 0x00, 0x7a, 0x05,
	0xc6, 0x3e, 0x5a, 0x5a, 0x56, 0xa7, 0xab, 0xca, 0xc9, 0x8a, 0xcf, 0x05, 0x6d, 0xd7, 0x95, 0x9a,
	0x26, 0xe7, 0xd0, 0xba, 0x4a, 0xe5, 0x72, 0xb1, 0xa5, 0xae, 0xb6, 0x6c, 0x10, 0x79, 0x05, 0xe7,
	0x35, 0xe9, 0x44, 0x64, 0x73, 0x91, 0x48, 0xea, 0xe9, 0x44, 0xff, 0x88, 0xf6, 0xdf, 0xc2, 0x59,
	0xfd, 0x9a, 0xc8, 0x19, 0x38, 0xb7, 0x62, 0x6b, 0xee, 0x5c, 0x1d, 0xc9, 0x23, 0x68, 0x6e, 0xf8,
	0xea, 0xfe, 0xb0, 0x20, 0x08, 0xde, 0xd8, 0xaf, 0xad, 0xe8, 0x87, 0x05, 0x2e, 0xe3, 0xc9, 0x6d,
	0xcc, 0x25, 0xc7, 0x81, 0xa1, 0xfd, 0xe3, 0xc0, 0xd0, 0x76, 0x1f, 0xdc, 0xb1, 0x58, 0xc8, 0xd9,
	0x72, 0x8d, 0x39, 0xba, 0xec, 0x88, 0x2b, 0xfb, 0xe9, 0xd4, 0xf6, 0xf3, 0x39, 0xc0, 0x98, 0xe7,
	0x12, 0x31, 0x6d, 0xe8, 0x39, 0x77, 0x87, 0xaa, 0xa0, 0x9a, 0x83, 0x2a, 0xca, 0x4a, 0x02, 0x25,
	0x9f, 0x7d, 0x5e, 0xe6, 0x46, 0xde, 0xfc, 0xab, 0xbc, 0x10, 0x44, 0x39, 0x9c, 0x96, 0x63, 0xc4,
	0x07, 0xdb, 0xbc, 0x11, 0x8f, 0xd9, 0xa3, 0x98, 0x10, 0x68, 0x5c, 0x71, 0xe3, 0xd8, 0x63, 0xfa,
	0xac, 0xae, 0x02, 0x47, 0x89, 0x56, 0x11, 0x90, 0x67, 0xd0, 0xbe, 0x14, 0xeb, 0x6b, 0x91, 0xe5,
	0xc6, 0x64, 0x4f, 0x57, 0x45, 0x4e, 0xd7, 0x3d, 0xc4, 0xa3, 0x0d, 0xf8, 0xd5, 0xd0, 0x7f, 0x95,
	0x25, 0xd0, 0xf8, 0x28, 0xf8, 0x8d, 0xa9, 0xaa, 0xcf, 0xca, 0x0a, 0x3e, 0x27, 0x7c, 0x6e, 0x08,
	0xd4, 0x86, 0xa8, 0x97, 0x7b, 0x9f, 0x9b, 0x9d, 0x34, 0xe8, 0xe2, 0xc9, 0xcf, 0x5d, 0x60, 0x3d,
	0xec, 0x02, 0xeb, 0xf7, 0x2e, 0xb0, 0xbe, 0xee, 0x83, 0x93, 0x87, 0x7d, 0x70, 0xf2, 0x6b, 0x1f,
	0x9c, 0x7c, 0x6a, 0x4e, 0xd4, 0xaf, 0xe3, 0xba, 0xa5, 0xff, 0x20, 0x2f, 0xff, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x19, 0x31, 0x65, 0x2d, 0x54, 0x04, 0x00, 0x00,
}

func (m *TeamSeasonInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TeamSeasonInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TeamSeasonInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonLevel != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SeasonLevel))
		i--
		dAtA[i] = 0x28
	}
	if m.TeamScore != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.TeamScore))
		i--
		dAtA[i] = 0x20
	}
	if m.SeasonTopLevel != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SeasonTopLevel))
		i--
		dAtA[i] = 0x18
	}
	if m.SeasonState {
		i--
		if m.SeasonState {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.SeasonID != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RoleSeasonInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RoleSeasonInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RoleSeasonInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaveSeasonPlacePercent != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SaveSeasonPlacePercent))
		i--
		dAtA[i] = 0x48
	}
	if m.Notify {
		i--
		if m.Notify {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if m.SaveSeasonPlace != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SaveSeasonPlace))
		i--
		dAtA[i] = 0x38
	}
	if m.SaveSeasonScore != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SaveSeasonScore))
		i--
		dAtA[i] = 0x30
	}
	if m.SaveSeasonID != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SaveSeasonID))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SaveTeamID) > 0 {
		i -= len(m.SaveTeamID)
		copy(dAtA[i:], m.SaveTeamID)
		i = encodeVarintSeasonDef(dAtA, i, uint64(len(m.SaveTeamID)))
		i--
		dAtA[i] = 0x22
	}
	if m.GetAwards {
		i--
		if m.GetAwards {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.LevelAwards) > 0 {
		for k := range m.LevelAwards {
			v := m.LevelAwards[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i = encodeVarintSeasonDef(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintSeasonDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.MyScore != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.MyScore))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ThisSeason) > 0 {
		for iNdEx := len(m.ThisSeason) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ThisSeason[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSeasonDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LastSeason) > 0 {
		for iNdEx := len(m.LastSeason) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastSeason[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSeasonDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.SeasonID != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.SeasonID))
		i--
		dAtA[i] = 0x18
	}
	if m.LeftTime != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.LeftTime))
		i--
		dAtA[i] = 0x10
	}
	if m.MyPlace != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.MyPlace))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RankTeamData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankTeamData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankTeamData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Members) > 0 {
		for iNdEx := len(m.Members) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Members[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSeasonDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Score != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSeasonDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSeasonDef(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RankMemberData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RankMemberData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RankMemberData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Head != 0 {
		i = encodeVarintSeasonDef(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSeasonDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintSeasonDef(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSeasonDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovSeasonDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TeamSeasonInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SeasonID != 0 {
		n += 1 + sovSeasonDef(uint64(m.SeasonID))
	}
	if m.SeasonState {
		n += 2
	}
	if m.SeasonTopLevel != 0 {
		n += 1 + sovSeasonDef(uint64(m.SeasonTopLevel))
	}
	if m.TeamScore != 0 {
		n += 1 + sovSeasonDef(uint64(m.TeamScore))
	}
	if m.SeasonLevel != 0 {
		n += 1 + sovSeasonDef(uint64(m.SeasonLevel))
	}
	return n
}

func (m *RoleSeasonInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MyScore != 0 {
		n += 1 + sovSeasonDef(uint64(m.MyScore))
	}
	if len(m.LevelAwards) > 0 {
		for k, v := range m.LevelAwards {
			_ = k
			_ = v
			mapEntrySize := 1 + sovSeasonDef(uint64(k)) + 1 + 1
			n += mapEntrySize + 1 + sovSeasonDef(uint64(mapEntrySize))
		}
	}
	if m.GetAwards {
		n += 2
	}
	l = len(m.SaveTeamID)
	if l > 0 {
		n += 1 + l + sovSeasonDef(uint64(l))
	}
	if m.SaveSeasonID != 0 {
		n += 1 + sovSeasonDef(uint64(m.SaveSeasonID))
	}
	if m.SaveSeasonScore != 0 {
		n += 1 + sovSeasonDef(uint64(m.SaveSeasonScore))
	}
	if m.SaveSeasonPlace != 0 {
		n += 1 + sovSeasonDef(uint64(m.SaveSeasonPlace))
	}
	if m.Notify {
		n += 2
	}
	if m.SaveSeasonPlacePercent != 0 {
		n += 1 + sovSeasonDef(uint64(m.SaveSeasonPlacePercent))
	}
	return n
}

func (m *RankData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MyPlace != 0 {
		n += 1 + sovSeasonDef(uint64(m.MyPlace))
	}
	if m.LeftTime != 0 {
		n += 1 + sovSeasonDef(uint64(m.LeftTime))
	}
	if m.SeasonID != 0 {
		n += 1 + sovSeasonDef(uint64(m.SeasonID))
	}
	if len(m.LastSeason) > 0 {
		for _, e := range m.LastSeason {
			l = e.Size()
			n += 1 + l + sovSeasonDef(uint64(l))
		}
	}
	if len(m.ThisSeason) > 0 {
		for _, e := range m.ThisSeason {
			l = e.Size()
			n += 1 + l + sovSeasonDef(uint64(l))
		}
	}
	return n
}

func (m *RankTeamData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSeasonDef(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSeasonDef(uint64(l))
	}
	if m.Score != 0 {
		n += 1 + sovSeasonDef(uint64(m.Score))
	}
	if len(m.Members) > 0 {
		for _, e := range m.Members {
			l = e.Size()
			n += 1 + l + sovSeasonDef(uint64(l))
		}
	}
	return n
}

func (m *RankMemberData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSeasonDef(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSeasonDef(uint64(l))
	}
	if m.Head != 0 {
		n += 1 + sovSeasonDef(uint64(m.Head))
	}
	if m.Level != 0 {
		n += 1 + sovSeasonDef(uint64(m.Level))
	}
	if m.Status != 0 {
		n += 1 + sovSeasonDef(uint64(m.Status))
	}
	return n
}

func sovSeasonDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSeasonDef(x uint64) (n int) {
	return sovSeasonDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TeamSeasonInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TeamSeasonInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TeamSeasonInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonState", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SeasonState = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTopLevel", wireType)
			}
			m.SeasonTopLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonTopLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TeamScore", wireType)
			}
			m.TeamScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TeamScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonLevel", wireType)
			}
			m.SeasonLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonLevel |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeasonDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RoleSeasonInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RoleSeasonInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RoleSeasonInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyScore", wireType)
			}
			m.MyScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LevelAwards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LevelAwards == nil {
				m.LevelAwards = make(map[uint32]bool)
			}
			var mapkey uint32
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSeasonDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeasonDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSeasonDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSeasonDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthSeasonDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.LevelAwards[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetAwards", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.GetAwards = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveTeamID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SaveTeamID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSeasonID", wireType)
			}
			m.SaveSeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveSeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSeasonScore", wireType)
			}
			m.SaveSeasonScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveSeasonScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSeasonPlace", wireType)
			}
			m.SaveSeasonPlace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveSeasonPlace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notify", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Notify = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaveSeasonPlacePercent", wireType)
			}
			m.SaveSeasonPlacePercent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaveSeasonPlacePercent |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeasonDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MyPlace", wireType)
			}
			m.MyPlace = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MyPlace |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftTime", wireType)
			}
			m.LeftTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LeftTime |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonID", wireType)
			}
			m.SeasonID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastSeason = append(m.LastSeason, &RankTeamData{})
			if err := m.LastSeason[len(m.LastSeason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ThisSeason", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ThisSeason = append(m.ThisSeason, &RankTeamData{})
			if err := m.ThisSeason[len(m.ThisSeason)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeasonDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankTeamData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankTeamData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankTeamData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Members", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Members = append(m.Members, &RankMemberData{})
			if err := m.Members[len(m.Members)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSeasonDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RankMemberData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RankMemberData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RankMemberData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSeasonDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSeasonDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSeasonDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSeasonDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSeasonDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSeasonDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSeasonDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSeasonDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSeasonDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSeasonDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSeasonDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSeasonDef = fmt.Errorf("proto: unexpected end of group")
)
