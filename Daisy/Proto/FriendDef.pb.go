// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: FriendDef.proto

package Proto

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Friend struct {
	FriendID        string `protobuf:"bytes,1,opt,name=FriendID,proto3" json:"FriendID,omitempty"`
	Name            string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Head            uint32 `protobuf:"varint,3,opt,name=Head,proto3" json:"Head,omitempty"`
	Level           uint32 `protobuf:"varint,4,opt,name=Level,proto3" json:"Level,omitempty"`
	IsOnline        bool   `protobuf:"varint,5,opt,name=IsOnline,proto3" json:"IsOnline,omitempty"`
	OfflineTime     int64  `protobuf:"varint,6,opt,name=OfflineTime,proto3" json:"OfflineTime,omitempty"`
	Remark          string `protobuf:"bytes,7,opt,name=Remark,proto3" json:"Remark,omitempty"`
	Power           int32  `protobuf:"varint,8,opt,name=Power,proto3" json:"Power,omitempty"`
	Progress        uint32 `protobuf:"varint,9,opt,name=Progress,proto3" json:"Progress,omitempty"`
	IsFriend        bool   `protobuf:"varint,10,opt,name=IsFriend,proto3" json:"IsFriend,omitempty"`
	SendTime        int64  `protobuf:"varint,11,opt,name=SendTime,proto3" json:"SendTime,omitempty"`
	SeasonTeamScore uint32 `protobuf:"varint,12,opt,name=SeasonTeamScore,proto3" json:"SeasonTeamScore,omitempty"`
}

func (m *Friend) Reset()         { *m = Friend{} }
func (m *Friend) String() string { return proto.CompactTextString(m) }
func (*Friend) ProtoMessage()    {}
func (*Friend) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7ed866c9eddcb9, []int{0}
}
func (m *Friend) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Friend) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Friend.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Friend) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Friend.Merge(m, src)
}
func (m *Friend) XXX_Size() int {
	return m.Size()
}
func (m *Friend) XXX_DiscardUnknown() {
	xxx_messageInfo_Friend.DiscardUnknown(m)
}

var xxx_messageInfo_Friend proto.InternalMessageInfo

func (m *Friend) GetFriendID() string {
	if m != nil {
		return m.FriendID
	}
	return ""
}

func (m *Friend) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Friend) GetHead() uint32 {
	if m != nil {
		return m.Head
	}
	return 0
}

func (m *Friend) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *Friend) GetIsOnline() bool {
	if m != nil {
		return m.IsOnline
	}
	return false
}

func (m *Friend) GetOfflineTime() int64 {
	if m != nil {
		return m.OfflineTime
	}
	return 0
}

func (m *Friend) GetRemark() string {
	if m != nil {
		return m.Remark
	}
	return ""
}

func (m *Friend) GetPower() int32 {
	if m != nil {
		return m.Power
	}
	return 0
}

func (m *Friend) GetProgress() uint32 {
	if m != nil {
		return m.Progress
	}
	return 0
}

func (m *Friend) GetIsFriend() bool {
	if m != nil {
		return m.IsFriend
	}
	return false
}

func (m *Friend) GetSendTime() int64 {
	if m != nil {
		return m.SendTime
	}
	return 0
}

func (m *Friend) GetSeasonTeamScore() uint32 {
	if m != nil {
		return m.SeasonTeamScore
	}
	return 0
}

type FriendListArray struct {
	FriendListArray map[string]*Friend `protobuf:"bytes,1,rep,name=FriendListArray,proto3" json:"FriendListArray,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *FriendListArray) Reset()         { *m = FriendListArray{} }
func (m *FriendListArray) String() string { return proto.CompactTextString(m) }
func (*FriendListArray) ProtoMessage()    {}
func (*FriendListArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7ed866c9eddcb9, []int{1}
}
func (m *FriendListArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendListArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendListArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendListArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendListArray.Merge(m, src)
}
func (m *FriendListArray) XXX_Size() int {
	return m.Size()
}
func (m *FriendListArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendListArray.DiscardUnknown(m)
}

var xxx_messageInfo_FriendListArray proto.InternalMessageInfo

func (m *FriendListArray) GetFriendListArray() map[string]*Friend {
	if m != nil {
		return m.FriendListArray
	}
	return nil
}

type FriendArray struct {
	FriendArray []*Friend `protobuf:"bytes,1,rep,name=FriendArray,proto3" json:"FriendArray,omitempty"`
}

func (m *FriendArray) Reset()         { *m = FriendArray{} }
func (m *FriendArray) String() string { return proto.CompactTextString(m) }
func (*FriendArray) ProtoMessage()    {}
func (*FriendArray) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7ed866c9eddcb9, []int{2}
}
func (m *FriendArray) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendArray) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendArray.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendArray) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendArray.Merge(m, src)
}
func (m *FriendArray) XXX_Size() int {
	return m.Size()
}
func (m *FriendArray) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendArray.DiscardUnknown(m)
}

var xxx_messageInfo_FriendArray proto.InternalMessageInfo

func (m *FriendArray) GetFriendArray() []*Friend {
	if m != nil {
		return m.FriendArray
	}
	return nil
}

// 考虑申请列表和推荐列表有什么数据上的不同
type FriendListData struct {
	FriendList      map[string]*Friend `protobuf:"bytes,1,rep,name=FriendList,proto3" json:"FriendList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ApplyList       []*Friend          `protobuf:"bytes,2,rep,name=ApplyList,proto3" json:"ApplyList,omitempty"`
	RecommendedList []*Friend          `protobuf:"bytes,3,rep,name=RecommendedList,proto3" json:"RecommendedList,omitempty"`
}

func (m *FriendListData) Reset()         { *m = FriendListData{} }
func (m *FriendListData) String() string { return proto.CompactTextString(m) }
func (*FriendListData) ProtoMessage()    {}
func (*FriendListData) Descriptor() ([]byte, []int) {
	return fileDescriptor_2d7ed866c9eddcb9, []int{3}
}
func (m *FriendListData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendListData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendListData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendListData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendListData.Merge(m, src)
}
func (m *FriendListData) XXX_Size() int {
	return m.Size()
}
func (m *FriendListData) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendListData.DiscardUnknown(m)
}

var xxx_messageInfo_FriendListData proto.InternalMessageInfo

func (m *FriendListData) GetFriendList() map[string]*Friend {
	if m != nil {
		return m.FriendList
	}
	return nil
}

func (m *FriendListData) GetApplyList() []*Friend {
	if m != nil {
		return m.ApplyList
	}
	return nil
}

func (m *FriendListData) GetRecommendedList() []*Friend {
	if m != nil {
		return m.RecommendedList
	}
	return nil
}

func init() {
	proto.RegisterType((*Friend)(nil), "Friend")
	proto.RegisterType((*FriendListArray)(nil), "FriendListArray")
	proto.RegisterMapType((map[string]*Friend)(nil), "FriendListArray.FriendListArrayEntry")
	proto.RegisterType((*FriendArray)(nil), "FriendArray")
	proto.RegisterType((*FriendListData)(nil), "FriendListData")
	proto.RegisterMapType((map[string]*Friend)(nil), "FriendListData.FriendListEntry")
}

func init() { proto.RegisterFile("FriendDef.proto", fileDescriptor_2d7ed866c9eddcb9) }

var fileDescriptor_2d7ed866c9eddcb9 = []byte{
	// 439 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x14, 0x85, 0x33, 0x71, 0xed, 0x26, 0xd7, 0x40, 0xd0, 0xa8, 0x42, 0xa3, 0x48, 0xb8, 0x96, 0xa5,
	0x4a, 0x66, 0x13, 0x89, 0xb2, 0xa9, 0xd8, 0xa0, 0xa2, 0x50, 0x51, 0x51, 0x91, 0x68, 0xd2, 0x15,
	0xbb, 0xa1, 0xbe, 0x41, 0x56, 0xfd, 0x13, 0x8d, 0x4d, 0x91, 0xdf, 0x82, 0x37, 0xe1, 0x35, 0x58,
	0xb0, 0xe8, 0x92, 0x25, 0x4a, 0x1e, 0x81, 0x17, 0x40, 0x9e, 0x71, 0xfc, 0x07, 0x2b, 0x76, 0xf7,
	0x7c, 0x33, 0x77, 0xce, 0x99, 0xb9, 0x1a, 0x98, 0x5c, 0xc8, 0x10, 0x93, 0x60, 0x8e, 0xeb, 0xd9,
	0x46, 0xa6, 0x79, 0xea, 0xfd, 0x18, 0x82, 0xa5, 0x19, 0x9d, 0xc2, 0x48, 0x57, 0x97, 0x73, 0x46,
	0x5c, 0xe2, 0x8f, 0x79, 0xad, 0x29, 0x85, 0x83, 0xf7, 0x22, 0x46, 0x36, 0x54, 0x5c, 0xd5, 0x25,
	0x7b, 0x8b, 0x22, 0x60, 0x86, 0x4b, 0xfc, 0x87, 0x5c, 0xd5, 0xf4, 0x08, 0xcc, 0x2b, 0xbc, 0xc3,
	0x88, 0x1d, 0x28, 0xa8, 0x45, 0x79, 0xf2, 0x65, 0xb6, 0x48, 0xa2, 0x30, 0x41, 0x66, 0xba, 0xc4,
	0x1f, 0xf1, 0x5a, 0x53, 0x17, 0xec, 0xc5, 0x7a, 0x5d, 0x96, 0xd7, 0x61, 0x8c, 0xcc, 0x72, 0x89,
	0x6f, 0xf0, 0x36, 0xa2, 0x4f, 0xc0, 0xe2, 0x18, 0x0b, 0x79, 0xcb, 0x0e, 0x95, 0x7b, 0xa5, 0x4a,
	0xaf, 0x65, 0xfa, 0x05, 0x25, 0x1b, 0xb9, 0xc4, 0x37, 0xb9, 0x16, 0xa5, 0xd7, 0x52, 0xa6, 0x9f,
	0x24, 0x66, 0x19, 0x1b, 0xab, 0x10, 0xb5, 0xd6, 0x39, 0xf4, 0x9d, 0x18, 0xec, 0x73, 0x34, 0xb7,
	0x5f, 0x61, 0x12, 0xa8, 0x10, 0xb6, 0x0a, 0x51, 0x6b, 0xea, 0xc3, 0x64, 0x85, 0x22, 0x4b, 0x93,
	0x6b, 0x14, 0xf1, 0xea, 0x26, 0x95, 0xc8, 0x1e, 0xa8, 0xa3, 0xfb, 0xd8, 0xfb, 0x46, 0xf6, 0x4f,
	0x7c, 0x15, 0x66, 0xf9, 0xb9, 0x94, 0xa2, 0xa0, 0x8b, 0xbf, 0x10, 0x23, 0xae, 0xe1, 0xdb, 0xa7,
	0x27, 0xb3, 0x1e, 0xef, 0xeb, 0x37, 0x49, 0x2e, 0x0b, 0xde, 0xef, 0x9e, 0xbe, 0x83, 0xa3, 0x7f,
	0x6d, 0xa4, 0x8f, 0xc1, 0xb8, 0xc5, 0xa2, 0x9a, 0x5d, 0x59, 0xd2, 0xa7, 0x60, 0xde, 0x89, 0xe8,
	0xb3, 0x9e, 0x9b, 0x7d, 0x7a, 0x58, 0x19, 0x70, 0x4d, 0x5f, 0x0e, 0xcf, 0x88, 0x77, 0x06, 0xb6,
	0x86, 0x3a, 0xec, 0xb3, 0x8e, 0xac, 0x82, 0xd6, 0x7d, 0xed, 0x35, 0xef, 0x37, 0x81, 0x47, 0x4d,
	0x8e, 0xb9, 0xc8, 0x05, 0x7d, 0x05, 0xd0, 0x90, 0xaa, 0xf9, 0x78, 0xd6, 0xdd, 0xd4, 0x92, 0xfa,
	0x7e, 0xad, 0x16, 0x7a, 0x02, 0xe3, 0xf3, 0xcd, 0x26, 0x2a, 0x54, 0xff, 0xb0, 0x6b, 0xde, 0xac,
	0xd0, 0xe7, 0x30, 0xe1, 0x78, 0x93, 0xc6, 0x31, 0x26, 0x01, 0x6a, 0x33, 0xa3, 0xbb, 0xb9, 0xbf,
	0x3e, 0xbd, 0x68, 0x4f, 0xe1, 0xff, 0xdf, 0xeb, 0xf5, 0xf1, 0xf7, 0xad, 0x43, 0xee, 0xb7, 0x0e,
	0xf9, 0xb5, 0x75, 0xc8, 0xd7, 0x9d, 0x33, 0xb8, 0xdf, 0x39, 0x83, 0x9f, 0x3b, 0x67, 0xf0, 0xc1,
	0x5c, 0x96, 0x3f, 0xea, 0xa3, 0xa5, 0x3e, 0xd6, 0x8b, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x33,
	0x79, 0x39, 0x8b, 0x6b, 0x03, 0x00, 0x00,
}

func (m *Friend) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Friend) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Friend) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SeasonTeamScore != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.SeasonTeamScore))
		i--
		dAtA[i] = 0x60
	}
	if m.SendTime != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.SendTime))
		i--
		dAtA[i] = 0x58
	}
	if m.IsFriend {
		i--
		if m.IsFriend {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Progress != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.Progress))
		i--
		dAtA[i] = 0x48
	}
	if m.Power != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.Power))
		i--
		dAtA[i] = 0x40
	}
	if len(m.Remark) > 0 {
		i -= len(m.Remark)
		copy(dAtA[i:], m.Remark)
		i = encodeVarintFriendDef(dAtA, i, uint64(len(m.Remark)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OfflineTime != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.OfflineTime))
		i--
		dAtA[i] = 0x30
	}
	if m.IsOnline {
		i--
		if m.IsOnline {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.Level != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x20
	}
	if m.Head != 0 {
		i = encodeVarintFriendDef(dAtA, i, uint64(m.Head))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintFriendDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.FriendID) > 0 {
		i -= len(m.FriendID)
		copy(dAtA[i:], m.FriendID)
		i = encodeVarintFriendDef(dAtA, i, uint64(len(m.FriendID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FriendListArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendListArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendListArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FriendListArray) > 0 {
		for k := range m.FriendListArray {
			v := m.FriendListArray[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFriendDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFriendDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFriendDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FriendArray) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendArray) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendArray) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FriendArray) > 0 {
		for iNdEx := len(m.FriendArray) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FriendArray[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriendDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *FriendListData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendListData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendListData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecommendedList) > 0 {
		for iNdEx := len(m.RecommendedList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RecommendedList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriendDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.ApplyList) > 0 {
		for iNdEx := len(m.ApplyList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ApplyList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintFriendDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.FriendList) > 0 {
		for k := range m.FriendList {
			v := m.FriendList[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintFriendDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintFriendDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintFriendDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintFriendDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovFriendDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Friend) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FriendID)
	if l > 0 {
		n += 1 + l + sovFriendDef(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovFriendDef(uint64(l))
	}
	if m.Head != 0 {
		n += 1 + sovFriendDef(uint64(m.Head))
	}
	if m.Level != 0 {
		n += 1 + sovFriendDef(uint64(m.Level))
	}
	if m.IsOnline {
		n += 2
	}
	if m.OfflineTime != 0 {
		n += 1 + sovFriendDef(uint64(m.OfflineTime))
	}
	l = len(m.Remark)
	if l > 0 {
		n += 1 + l + sovFriendDef(uint64(l))
	}
	if m.Power != 0 {
		n += 1 + sovFriendDef(uint64(m.Power))
	}
	if m.Progress != 0 {
		n += 1 + sovFriendDef(uint64(m.Progress))
	}
	if m.IsFriend {
		n += 2
	}
	if m.SendTime != 0 {
		n += 1 + sovFriendDef(uint64(m.SendTime))
	}
	if m.SeasonTeamScore != 0 {
		n += 1 + sovFriendDef(uint64(m.SeasonTeamScore))
	}
	return n
}

func (m *FriendListArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FriendListArray) > 0 {
		for k, v := range m.FriendListArray {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFriendDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFriendDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFriendDef(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *FriendArray) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FriendArray) > 0 {
		for _, e := range m.FriendArray {
			l = e.Size()
			n += 1 + l + sovFriendDef(uint64(l))
		}
	}
	return n
}

func (m *FriendListData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.FriendList) > 0 {
		for k, v := range m.FriendList {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFriendDef(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFriendDef(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFriendDef(uint64(mapEntrySize))
		}
	}
	if len(m.ApplyList) > 0 {
		for _, e := range m.ApplyList {
			l = e.Size()
			n += 1 + l + sovFriendDef(uint64(l))
		}
	}
	if len(m.RecommendedList) > 0 {
		for _, e := range m.RecommendedList {
			l = e.Size()
			n += 1 + l + sovFriendDef(uint64(l))
		}
	}
	return n
}

func sovFriendDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozFriendDef(x uint64) (n int) {
	return sovFriendDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Friend) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Friend: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Friend: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			m.Head = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Head |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnline", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnline = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OfflineTime", wireType)
			}
			m.OfflineTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OfflineTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remark", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remark = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Power", wireType)
			}
			m.Power = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Power |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Progress", wireType)
			}
			m.Progress = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Progress |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFriend", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFriend = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendTime", wireType)
			}
			m.SendTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SendTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeasonTeamScore", wireType)
			}
			m.SeasonTeamScore = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeasonTeamScore |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFriendDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendListArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendListArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendListArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendListArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendListArray == nil {
				m.FriendListArray = make(map[string]*Friend)
			}
			var mapkey string
			var mapvalue *Friend
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFriendDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFriendDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFriendDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFriendDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Friend{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFriendDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFriendDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FriendListArray[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriendDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendArray) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendArray: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendArray: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendArray", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FriendArray = append(m.FriendArray, &Friend{})
			if err := m.FriendArray[len(m.FriendArray)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriendDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendListData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFriendDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendListData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendListData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FriendList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FriendList == nil {
				m.FriendList = make(map[string]*Friend)
			}
			var mapkey string
			var mapvalue *Friend
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFriendDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthFriendDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthFriendDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowFriendDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthFriendDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthFriendDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Friend{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipFriendDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthFriendDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.FriendList[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ApplyList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ApplyList = append(m.ApplyList, &Friend{})
			if err := m.ApplyList[len(m.ApplyList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecommendedList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFriendDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthFriendDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecommendedList = append(m.RecommendedList, &Friend{})
			if err := m.RecommendedList[len(m.RecommendedList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFriendDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthFriendDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFriendDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFriendDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFriendDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthFriendDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupFriendDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthFriendDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthFriendDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFriendDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupFriendDef = fmt.Errorf("proto: unexpected end of group")
)
