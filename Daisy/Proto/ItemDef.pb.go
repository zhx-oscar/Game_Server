// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ItemDef.proto

package Proto

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ContainerEnum_Type int32

const (
	ContainerEnum_Common        ContainerEnum_Type = 0
	ContainerEnum_EquipBag      ContainerEnum_Type = 1
	ContainerEnum_SkillBag      ContainerEnum_Type = 2
	ContainerEnum_BuildEquipBag ContainerEnum_Type = 3
)

var ContainerEnum_Type_name = map[int32]string{
	0: "Common",
	1: "EquipBag",
	2: "SkillBag",
	3: "BuildEquipBag",
}

var ContainerEnum_Type_value = map[string]int32{
	"Common":        0,
	"EquipBag":      1,
	"SkillBag":      2,
	"BuildEquipBag": 3,
}

func (x ContainerEnum_Type) String() string {
	return proto.EnumName(ContainerEnum_Type_name, int32(x))
}

func (ContainerEnum_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{7, 0}
}

type ContainerEnum_EquipPos int32

const (
	ContainerEnum_Head     ContainerEnum_EquipPos = 0
	ContainerEnum_Chest    ContainerEnum_EquipPos = 1
	ContainerEnum_Waist    ContainerEnum_EquipPos = 2
	ContainerEnum_Foot     ContainerEnum_EquipPos = 3
	ContainerEnum_Hand     ContainerEnum_EquipPos = 4
	ContainerEnum_Weapon   ContainerEnum_EquipPos = 5
	ContainerEnum_Necklace ContainerEnum_EquipPos = 6
	ContainerEnum_Ring1    ContainerEnum_EquipPos = 7
	ContainerEnum_Ring2    ContainerEnum_EquipPos = 8
	ContainerEnum_Max      ContainerEnum_EquipPos = 9
)

var ContainerEnum_EquipPos_name = map[int32]string{
	0: "Head",
	1: "Chest",
	2: "Waist",
	3: "Foot",
	4: "Hand",
	5: "Weapon",
	6: "Necklace",
	7: "Ring1",
	8: "Ring2",
	9: "Max",
}

var ContainerEnum_EquipPos_value = map[string]int32{
	"Head":     0,
	"Chest":    1,
	"Waist":    2,
	"Foot":     3,
	"Hand":     4,
	"Weapon":   5,
	"Necklace": 6,
	"Ring1":    7,
	"Ring2":    8,
	"Max":      9,
}

func (x ContainerEnum_EquipPos) String() string {
	return proto.EnumName(ContainerEnum_EquipPos_name, int32(x))
}

func (ContainerEnum_EquipPos) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{7, 1}
}

type Item struct {
	Base          *ItemBase   `protobuf:"bytes,1,opt,name=Base,proto3" json:"Base,omitempty"`
	ExpandData    *ItemExpand `protobuf:"bytes,2,opt,name=ExpandData,proto3" json:"ExpandData,omitempty"`
	EquipmentData *Equipment  `protobuf:"bytes,3,opt,name=EquipmentData,proto3" json:"EquipmentData,omitempty"`
	SkillItemData *SkillItem  `protobuf:"bytes,4,opt,name=SkillItemData,proto3" json:"SkillItemData,omitempty"`
}

func (m *Item) Reset()         { *m = Item{} }
func (m *Item) String() string { return proto.CompactTextString(m) }
func (*Item) ProtoMessage()    {}
func (*Item) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{0}
}
func (m *Item) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Item) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Item.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Item) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Item.Merge(m, src)
}
func (m *Item) XXX_Size() int {
	return m.Size()
}
func (m *Item) XXX_DiscardUnknown() {
	xxx_messageInfo_Item.DiscardUnknown(m)
}

var xxx_messageInfo_Item proto.InternalMessageInfo

func (m *Item) GetBase() *ItemBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func (m *Item) GetExpandData() *ItemExpand {
	if m != nil {
		return m.ExpandData
	}
	return nil
}

func (m *Item) GetEquipmentData() *Equipment {
	if m != nil {
		return m.EquipmentData
	}
	return nil
}

func (m *Item) GetSkillItemData() *SkillItem {
	if m != nil {
		return m.SkillItemData
	}
	return nil
}

type OwnerInfo struct {
	ID   string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (m *OwnerInfo) Reset()         { *m = OwnerInfo{} }
func (m *OwnerInfo) String() string { return proto.CompactTextString(m) }
func (*OwnerInfo) ProtoMessage()    {}
func (*OwnerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{1}
}
func (m *OwnerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OwnerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OwnerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OwnerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OwnerInfo.Merge(m, src)
}
func (m *OwnerInfo) XXX_Size() int {
	return m.Size()
}
func (m *OwnerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_OwnerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_OwnerInfo proto.InternalMessageInfo

func (m *OwnerInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *OwnerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Equipment struct {
	Quality             uint32       `protobuf:"varint,1,opt,name=Quality,proto3" json:"Quality,omitempty"`
	Affixes             []*AffixData `protobuf:"bytes,2,rep,name=Affixes,proto3" json:"Affixes,omitempty"`
	Socket              []*Item      `protobuf:"bytes,3,rep,name=Socket,proto3" json:"Socket,omitempty"`
	IsPrecious          bool         `protobuf:"varint,4,opt,name=IsPrecious,proto3" json:"IsPrecious,omitempty"`
	Score               uint32       `protobuf:"varint,5,opt,name=Score,proto3" json:"Score,omitempty"`
	OwnerTeamMemberList []*OwnerInfo `protobuf:"bytes,6,rep,name=OwnerTeamMemberList,proto3" json:"OwnerTeamMemberList,omitempty"`
}

func (m *Equipment) Reset()         { *m = Equipment{} }
func (m *Equipment) String() string { return proto.CompactTextString(m) }
func (*Equipment) ProtoMessage()    {}
func (*Equipment) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{2}
}
func (m *Equipment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Equipment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Equipment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Equipment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Equipment.Merge(m, src)
}
func (m *Equipment) XXX_Size() int {
	return m.Size()
}
func (m *Equipment) XXX_DiscardUnknown() {
	xxx_messageInfo_Equipment.DiscardUnknown(m)
}

var xxx_messageInfo_Equipment proto.InternalMessageInfo

func (m *Equipment) GetQuality() uint32 {
	if m != nil {
		return m.Quality
	}
	return 0
}

func (m *Equipment) GetAffixes() []*AffixData {
	if m != nil {
		return m.Affixes
	}
	return nil
}

func (m *Equipment) GetSocket() []*Item {
	if m != nil {
		return m.Socket
	}
	return nil
}

func (m *Equipment) GetIsPrecious() bool {
	if m != nil {
		return m.IsPrecious
	}
	return false
}

func (m *Equipment) GetScore() uint32 {
	if m != nil {
		return m.Score
	}
	return 0
}

func (m *Equipment) GetOwnerTeamMemberList() []*OwnerInfo {
	if m != nil {
		return m.OwnerTeamMemberList
	}
	return nil
}

type AffixData struct {
	AffixID         uint32  `protobuf:"varint,1,opt,name=AffixID,proto3" json:"AffixID,omitempty"`
	PropertyID      uint32  `protobuf:"varint,2,opt,name=PropertyID,proto3" json:"PropertyID,omitempty"`
	Value           float32 `protobuf:"fixed32,3,opt,name=Value,proto3" json:"Value,omitempty"`
	AffixParam      uint32  `protobuf:"varint,4,opt,name=AffixParam,proto3" json:"AffixParam,omitempty"`
	Type            uint32  `protobuf:"varint,5,opt,name=Type,proto3" json:"Type,omitempty"`
	AffixEffectType uint32  `protobuf:"varint,6,opt,name=AffixEffectType,proto3" json:"AffixEffectType,omitempty"`
	Const           bool    `protobuf:"varint,7,opt,name=Const,proto3" json:"Const,omitempty"`
}

func (m *AffixData) Reset()         { *m = AffixData{} }
func (m *AffixData) String() string { return proto.CompactTextString(m) }
func (*AffixData) ProtoMessage()    {}
func (*AffixData) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{3}
}
func (m *AffixData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AffixData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AffixData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AffixData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AffixData.Merge(m, src)
}
func (m *AffixData) XXX_Size() int {
	return m.Size()
}
func (m *AffixData) XXX_DiscardUnknown() {
	xxx_messageInfo_AffixData.DiscardUnknown(m)
}

var xxx_messageInfo_AffixData proto.InternalMessageInfo

func (m *AffixData) GetAffixID() uint32 {
	if m != nil {
		return m.AffixID
	}
	return 0
}

func (m *AffixData) GetPropertyID() uint32 {
	if m != nil {
		return m.PropertyID
	}
	return 0
}

func (m *AffixData) GetValue() float32 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *AffixData) GetAffixParam() uint32 {
	if m != nil {
		return m.AffixParam
	}
	return 0
}

func (m *AffixData) GetType() uint32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *AffixData) GetAffixEffectType() uint32 {
	if m != nil {
		return m.AffixEffectType
	}
	return 0
}

func (m *AffixData) GetConst() bool {
	if m != nil {
		return m.Const
	}
	return false
}

type SkillItem struct {
}

func (m *SkillItem) Reset()         { *m = SkillItem{} }
func (m *SkillItem) String() string { return proto.CompactTextString(m) }
func (*SkillItem) ProtoMessage()    {}
func (*SkillItem) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{4}
}
func (m *SkillItem) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SkillItem) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SkillItem.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SkillItem) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SkillItem.Merge(m, src)
}
func (m *SkillItem) XXX_Size() int {
	return m.Size()
}
func (m *SkillItem) XXX_DiscardUnknown() {
	xxx_messageInfo_SkillItem.DiscardUnknown(m)
}

var xxx_messageInfo_SkillItem proto.InternalMessageInfo

type ItemExpand struct {
	InUse             uint32             `protobuf:"varint,1,opt,name=InUse,proto3" json:"InUse,omitempty"`
	RelationBuildList map[string]bool    `protobuf:"bytes,2,rep,name=RelationBuildList,proto3" json:"RelationBuildList,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	ContainerType     ContainerEnum_Type `protobuf:"varint,3,opt,name=ContainerType,proto3,enum=ContainerEnum_Type" json:"ContainerType,omitempty"`
}

func (m *ItemExpand) Reset()         { *m = ItemExpand{} }
func (m *ItemExpand) String() string { return proto.CompactTextString(m) }
func (*ItemExpand) ProtoMessage()    {}
func (*ItemExpand) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{5}
}
func (m *ItemExpand) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemExpand) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemExpand.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemExpand) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemExpand.Merge(m, src)
}
func (m *ItemExpand) XXX_Size() int {
	return m.Size()
}
func (m *ItemExpand) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemExpand.DiscardUnknown(m)
}

var xxx_messageInfo_ItemExpand proto.InternalMessageInfo

func (m *ItemExpand) GetInUse() uint32 {
	if m != nil {
		return m.InUse
	}
	return 0
}

func (m *ItemExpand) GetRelationBuildList() map[string]bool {
	if m != nil {
		return m.RelationBuildList
	}
	return nil
}

func (m *ItemExpand) GetContainerType() ContainerEnum_Type {
	if m != nil {
		return m.ContainerType
	}
	return ContainerEnum_Common
}

type ItemContainer struct {
	ItemMap map[int32]*Item    `protobuf:"bytes,1,rep,name=ItemMap,proto3" json:"ItemMap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Type    ContainerEnum_Type `protobuf:"varint,2,opt,name=Type,proto3,enum=ContainerEnum_Type" json:"Type,omitempty"`
	MaxNum  uint32             `protobuf:"varint,3,opt,name=MaxNum,proto3" json:"MaxNum,omitempty"`
	Id2Pos  map[string]int32   `protobuf:"bytes,4,rep,name=Id2Pos,proto3" json:"Id2Pos,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ItemContainer) Reset()         { *m = ItemContainer{} }
func (m *ItemContainer) String() string { return proto.CompactTextString(m) }
func (*ItemContainer) ProtoMessage()    {}
func (*ItemContainer) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{6}
}
func (m *ItemContainer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemContainer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemContainer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemContainer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemContainer.Merge(m, src)
}
func (m *ItemContainer) XXX_Size() int {
	return m.Size()
}
func (m *ItemContainer) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemContainer.DiscardUnknown(m)
}

var xxx_messageInfo_ItemContainer proto.InternalMessageInfo

func (m *ItemContainer) GetItemMap() map[int32]*Item {
	if m != nil {
		return m.ItemMap
	}
	return nil
}

func (m *ItemContainer) GetType() ContainerEnum_Type {
	if m != nil {
		return m.Type
	}
	return ContainerEnum_Common
}

func (m *ItemContainer) GetMaxNum() uint32 {
	if m != nil {
		return m.MaxNum
	}
	return 0
}

func (m *ItemContainer) GetId2Pos() map[string]int32 {
	if m != nil {
		return m.Id2Pos
	}
	return nil
}

type ContainerEnum struct {
}

func (m *ContainerEnum) Reset()         { *m = ContainerEnum{} }
func (m *ContainerEnum) String() string { return proto.CompactTextString(m) }
func (*ContainerEnum) ProtoMessage()    {}
func (*ContainerEnum) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{7}
}
func (m *ContainerEnum) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ContainerEnum) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ContainerEnum.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ContainerEnum) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ContainerEnum.Merge(m, src)
}
func (m *ContainerEnum) XXX_Size() int {
	return m.Size()
}
func (m *ContainerEnum) XXX_DiscardUnknown() {
	xxx_messageInfo_ContainerEnum.DiscardUnknown(m)
}

var xxx_messageInfo_ContainerEnum proto.InternalMessageInfo

//用来给客户端返回列表
type Items struct {
	Items []*Item `protobuf:"bytes,1,rep,name=Items,proto3" json:"Items,omitempty"`
}

func (m *Items) Reset()         { *m = Items{} }
func (m *Items) String() string { return proto.CompactTextString(m) }
func (*Items) ProtoMessage()    {}
func (*Items) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{8}
}
func (m *Items) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Items) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Items.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Items) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Items.Merge(m, src)
}
func (m *Items) XXX_Size() int {
	return m.Size()
}
func (m *Items) XXX_DiscardUnknown() {
	xxx_messageInfo_Items.DiscardUnknown(m)
}

var xxx_messageInfo_Items proto.InternalMessageInfo

func (m *Items) GetItems() []*Item {
	if m != nil {
		return m.Items
	}
	return nil
}

type ItemsMap struct {
	Data map[int32]*Item `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *ItemsMap) Reset()         { *m = ItemsMap{} }
func (m *ItemsMap) String() string { return proto.CompactTextString(m) }
func (*ItemsMap) ProtoMessage()    {}
func (*ItemsMap) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{9}
}
func (m *ItemsMap) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ItemsMap) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ItemsMap.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ItemsMap) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ItemsMap.Merge(m, src)
}
func (m *ItemsMap) XXX_Size() int {
	return m.Size()
}
func (m *ItemsMap) XXX_DiscardUnknown() {
	xxx_messageInfo_ItemsMap.DiscardUnknown(m)
}

var xxx_messageInfo_ItemsMap proto.InternalMessageInfo

func (m *ItemsMap) GetData() map[int32]*Item {
	if m != nil {
		return m.Data
	}
	return nil
}

//掉落数据结构
type DropMaterial struct {
	MaterialId   uint32 `protobuf:"varint,1,opt,name=MaterialId,proto3" json:"MaterialId,omitempty"`
	MaterialType uint32 `protobuf:"varint,2,opt,name=MaterialType,proto3" json:"MaterialType,omitempty"`
	MaterialNum  uint32 `protobuf:"varint,3,opt,name=MaterialNum,proto3" json:"MaterialNum,omitempty"`
}

func (m *DropMaterial) Reset()         { *m = DropMaterial{} }
func (m *DropMaterial) String() string { return proto.CompactTextString(m) }
func (*DropMaterial) ProtoMessage()    {}
func (*DropMaterial) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{10}
}
func (m *DropMaterial) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DropMaterial) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DropMaterial.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DropMaterial) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DropMaterial.Merge(m, src)
}
func (m *DropMaterial) XXX_Size() int {
	return m.Size()
}
func (m *DropMaterial) XXX_DiscardUnknown() {
	xxx_messageInfo_DropMaterial.DiscardUnknown(m)
}

var xxx_messageInfo_DropMaterial proto.InternalMessageInfo

func (m *DropMaterial) GetMaterialId() uint32 {
	if m != nil {
		return m.MaterialId
	}
	return 0
}

func (m *DropMaterial) GetMaterialType() uint32 {
	if m != nil {
		return m.MaterialType
	}
	return 0
}

func (m *DropMaterial) GetMaterialNum() uint32 {
	if m != nil {
		return m.MaterialNum
	}
	return 0
}

//添加道具的返回结构
type GetItemData struct {
	GetNum      uint32 `protobuf:"varint,1,opt,name=GetNum,proto3" json:"GetNum,omitempty"`
	OldConfigID uint32 `protobuf:"varint,2,opt,name=OldConfigID,proto3" json:"OldConfigID,omitempty"`
	ItemData    *Item  `protobuf:"bytes,3,opt,name=ItemData,proto3" json:"ItemData,omitempty"`
}

func (m *GetItemData) Reset()         { *m = GetItemData{} }
func (m *GetItemData) String() string { return proto.CompactTextString(m) }
func (*GetItemData) ProtoMessage()    {}
func (*GetItemData) Descriptor() ([]byte, []int) {
	return fileDescriptor_06b33a33f7de0781, []int{11}
}
func (m *GetItemData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetItemData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetItemData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetItemData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetItemData.Merge(m, src)
}
func (m *GetItemData) XXX_Size() int {
	return m.Size()
}
func (m *GetItemData) XXX_DiscardUnknown() {
	xxx_messageInfo_GetItemData.DiscardUnknown(m)
}

var xxx_messageInfo_GetItemData proto.InternalMessageInfo

func (m *GetItemData) GetGetNum() uint32 {
	if m != nil {
		return m.GetNum
	}
	return 0
}

func (m *GetItemData) GetOldConfigID() uint32 {
	if m != nil {
		return m.OldConfigID
	}
	return 0
}

func (m *GetItemData) GetItemData() *Item {
	if m != nil {
		return m.ItemData
	}
	return nil
}

func init() {
	proto.RegisterEnum("ContainerEnum_Type", ContainerEnum_Type_name, ContainerEnum_Type_value)
	proto.RegisterEnum("ContainerEnum_EquipPos", ContainerEnum_EquipPos_name, ContainerEnum_EquipPos_value)
	proto.RegisterType((*Item)(nil), "Item")
	proto.RegisterType((*OwnerInfo)(nil), "OwnerInfo")
	proto.RegisterType((*Equipment)(nil), "Equipment")
	proto.RegisterType((*AffixData)(nil), "AffixData")
	proto.RegisterType((*SkillItem)(nil), "SkillItem")
	proto.RegisterType((*ItemExpand)(nil), "ItemExpand")
	proto.RegisterMapType((map[string]bool)(nil), "ItemExpand.RelationBuildListEntry")
	proto.RegisterType((*ItemContainer)(nil), "ItemContainer")
	proto.RegisterMapType((map[string]int32)(nil), "ItemContainer.Id2PosEntry")
	proto.RegisterMapType((map[int32]*Item)(nil), "ItemContainer.ItemMapEntry")
	proto.RegisterType((*ContainerEnum)(nil), "ContainerEnum")
	proto.RegisterType((*Items)(nil), "Items")
	proto.RegisterType((*ItemsMap)(nil), "ItemsMap")
	proto.RegisterMapType((map[int32]*Item)(nil), "ItemsMap.DataEntry")
	proto.RegisterType((*DropMaterial)(nil), "DropMaterial")
	proto.RegisterType((*GetItemData)(nil), "GetItemData")
}

func init() { proto.RegisterFile("ItemDef.proto", fileDescriptor_06b33a33f7de0781) }

var fileDescriptor_06b33a33f7de0781 = []byte{
	// 896 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0x5f, 0x8f, 0xdb, 0x44,
	0x10, 0x8f, 0x9d, 0xbf, 0x9e, 0x9c, 0x8b, 0xbb, 0x87, 0xaa, 0x28, 0x55, 0xc3, 0x61, 0x55, 0xa2,
	0x12, 0x92, 0x81, 0x20, 0x24, 0x8a, 0x10, 0xd2, 0x5d, 0x12, 0x8a, 0x25, 0x72, 0x0d, 0x7b, 0x85,
	0x4a, 0xbc, 0x6d, 0x93, 0xcd, 0x61, 0xce, 0xf6, 0x06, 0x7b, 0x43, 0x2f, 0xdf, 0x82, 0x4f, 0x83,
	0xc4, 0x37, 0x40, 0xe2, 0x81, 0x3e, 0xf2, 0x84, 0xd0, 0xdd, 0x67, 0xe0, 0x1d, 0xcd, 0xac, 0xed,
	0x73, 0xda, 0x22, 0x24, 0xde, 0x76, 0x7e, 0xf3, 0x5b, 0xcf, 0xfc, 0x7e, 0x33, 0xb6, 0xc1, 0x0d,
	0xb5, 0x4c, 0xa6, 0x72, 0x1d, 0x6c, 0x32, 0xa5, 0xd5, 0xf0, 0x16, 0x86, 0x27, 0x22, 0x97, 0x26,
	0xf6, 0x7f, 0xb6, 0xa0, 0x85, 0x10, 0xbb, 0x07, 0x2d, 0x84, 0x07, 0xd6, 0x91, 0xf5, 0xa0, 0x3f,
	0x76, 0x82, 0x92, 0xc7, 0x09, 0x66, 0xef, 0x02, 0xcc, 0x2e, 0x37, 0x22, 0x5d, 0x4d, 0x85, 0x16,
	0x03, 0x9b, 0x48, 0x7d, 0x22, 0x19, 0x98, 0xd7, 0xd2, 0xec, 0x7d, 0x70, 0x67, 0x3f, 0x6c, 0xa3,
	0x4d, 0x22, 0x53, 0x4d, 0xfc, 0x26, 0xf1, 0x21, 0xa8, 0x50, 0xbe, 0x4f, 0xc0, 0x1b, 0x67, 0x17,
	0x51, 0x1c, 0x53, 0xb3, 0x78, 0xa3, 0x55, 0xdc, 0xa8, 0x50, 0xbe, 0x4f, 0xf0, 0xdf, 0x03, 0xe7,
	0xf1, 0xf3, 0x54, 0x66, 0x61, 0xba, 0x56, 0xec, 0x16, 0xd8, 0xe1, 0x94, 0x5a, 0x77, 0xb8, 0x1d,
	0x4e, 0x19, 0x83, 0xd6, 0xa9, 0x48, 0x24, 0xf5, 0xe9, 0x70, 0x3a, 0xfb, 0x7f, 0x5a, 0xe0, 0x54,
	0x45, 0xd9, 0x00, 0xba, 0x5f, 0x6d, 0x45, 0x1c, 0xe9, 0x1d, 0x5d, 0x73, 0x79, 0x19, 0xb2, 0xfb,
	0xd0, 0x3d, 0x5e, 0xaf, 0xa3, 0x4b, 0x99, 0x0f, 0xec, 0xa3, 0x26, 0x35, 0x41, 0x31, 0x56, 0xe5,
	0x65, 0x8a, 0xdd, 0x83, 0xce, 0x99, 0x5a, 0x5e, 0x48, 0x3d, 0x68, 0x12, 0xa9, 0x4d, 0x5e, 0xf0,
	0x02, 0x64, 0x23, 0x80, 0x30, 0x5f, 0x64, 0x72, 0x19, 0xa9, 0x6d, 0x4e, 0x62, 0x7a, 0xbc, 0x86,
	0xb0, 0x37, 0xa1, 0x7d, 0xb6, 0x54, 0x99, 0x1c, 0xb4, 0xa9, 0xb8, 0x09, 0xd8, 0xa7, 0x70, 0x48,
	0x9a, 0x9e, 0x48, 0x91, 0xcc, 0x65, 0xf2, 0x4c, 0x66, 0x5f, 0x46, 0xb9, 0x1e, 0x74, 0x8a, 0x36,
	0x2a, 0xbd, 0xfc, 0x75, 0x34, 0xff, 0x77, 0x0b, 0x9c, 0xaa, 0x53, 0x14, 0x48, 0x41, 0xe1, 0x8b,
	0xcb, 0xcb, 0x10, 0x7b, 0x5b, 0x64, 0x6a, 0x23, 0x33, 0xbd, 0x0b, 0xa7, 0x64, 0x91, 0xcb, 0x6b,
	0x08, 0xf6, 0xf6, 0x8d, 0x88, 0xb7, 0x92, 0xa6, 0x66, 0x73, 0x13, 0xe0, 0x2d, 0x7a, 0xc0, 0x42,
	0x64, 0x22, 0x21, 0x45, 0x2e, 0xaf, 0x21, 0x68, 0xf9, 0x93, 0xdd, 0xa6, 0x14, 0x44, 0x67, 0xf6,
	0x00, 0xde, 0x20, 0xc6, 0x6c, 0xbd, 0x96, 0x4b, 0x4d, 0xe9, 0x0e, 0xa5, 0x5f, 0x86, 0xb1, 0xe6,
	0x44, 0xa5, 0xb9, 0x1e, 0x74, 0xc9, 0x2a, 0x13, 0xf8, 0x7d, 0x70, 0xaa, 0xa1, 0xfb, 0x7f, 0x5b,
	0x00, 0x37, 0xfb, 0x86, 0x37, 0xc2, 0xf4, 0xeb, 0x62, 0x61, 0x5d, 0x6e, 0x02, 0xb6, 0x80, 0xdb,
	0x5c, 0xc6, 0x42, 0x47, 0x2a, 0x3d, 0xd9, 0x46, 0xf1, 0x8a, 0xfc, 0x33, 0x63, 0xf4, 0x6b, 0xdb,
	0x1a, 0xbc, 0x42, 0x9a, 0xa5, 0x3a, 0xdb, 0xf1, 0x57, 0x2f, 0xb3, 0x87, 0xe0, 0x4e, 0x54, 0xaa,
	0x45, 0x84, 0x86, 0xa3, 0x02, 0x74, 0xe5, 0xd6, 0xf8, 0x30, 0xa8, 0xd0, 0x59, 0xba, 0x4d, 0x02,
	0x4c, 0xf1, 0x7d, 0xe6, 0x70, 0x0a, 0x77, 0x5e, 0x5f, 0x87, 0x79, 0xd0, 0xbc, 0x90, 0xbb, 0x62,
	0x61, 0xf1, 0x88, 0x72, 0x7e, 0x24, 0xd3, 0x6d, 0x63, 0x00, 0x05, 0x9f, 0xd8, 0x1f, 0x5b, 0xfe,
	0x2f, 0xb6, 0x79, 0x87, 0xab, 0x67, 0xb3, 0x8f, 0xa0, 0x8b, 0xc0, 0x5c, 0x6c, 0x06, 0x16, 0x49,
	0xbb, 0x1b, 0xec, 0x11, 0x82, 0x22, 0x6b, 0x34, 0x95, 0x5c, 0xf6, 0x4e, 0x31, 0x21, 0xfb, 0xdf,
	0x05, 0x98, 0xb1, 0xdd, 0x81, 0xce, 0x5c, 0x5c, 0x9e, 0x6e, 0x13, 0xd2, 0xea, 0xf2, 0x22, 0x62,
	0x63, 0xe8, 0x84, 0xab, 0xf1, 0x42, 0xe1, 0x42, 0x63, 0xd9, 0xe1, 0xcb, 0x65, 0x29, 0x69, 0xaa,
	0x16, 0xcc, 0xe1, 0x31, 0x1c, 0xd4, 0xbb, 0xa9, 0x2b, 0x6f, 0x1b, 0xe5, 0x77, 0xeb, 0xca, 0xab,
	0x17, 0xe9, 0xc6, 0x80, 0xe1, 0x43, 0xe8, 0xd7, 0x9e, 0xfc, 0x5f, 0xde, 0xb5, 0xeb, 0xde, 0xfd,
	0x66, 0xd5, 0xa6, 0x87, 0x32, 0xfd, 0x63, 0x63, 0x02, 0x03, 0xe8, 0x4c, 0x54, 0x92, 0xa8, 0xd4,
	0x6b, 0xb0, 0x03, 0xe8, 0xd1, 0x87, 0xe1, 0x44, 0x9c, 0x7b, 0x16, 0x46, 0xb4, 0x74, 0x18, 0xd9,
	0xec, 0x36, 0xb8, 0x34, 0xbb, 0x8a, 0xd0, 0xf4, 0x9f, 0x17, 0xf4, 0x85, 0xca, 0x59, 0x0f, 0x5a,
	0x5f, 0x48, 0xb1, 0xf2, 0x1a, 0xcc, 0x81, 0xf6, 0xe4, 0x3b, 0x99, 0x6b, 0xcf, 0xc2, 0xe3, 0x53,
	0x11, 0xe5, 0xda, 0xb3, 0x31, 0xff, 0xb9, 0x52, 0xda, 0x6b, 0x12, 0x53, 0xa4, 0x2b, 0xaf, 0x85,
	0xa5, 0x9f, 0x4a, 0xb1, 0x51, 0xa9, 0xd7, 0xc6, 0x62, 0xa7, 0x72, 0x79, 0x11, 0x8b, 0xa5, 0xf4,
	0x3a, 0x78, 0x91, 0x47, 0xe9, 0xf9, 0x07, 0x5e, 0xb7, 0x3c, 0x8e, 0xbd, 0x1e, 0xeb, 0x42, 0x73,
	0x2e, 0x2e, 0x3d, 0xc7, 0xbf, 0x0f, 0x6d, 0xf4, 0x26, 0x47, 0xcb, 0xe8, 0x50, 0x8c, 0xbf, 0xb4,
	0x8c, 0x30, 0x3f, 0x87, 0x1e, 0x1d, 0x8a, 0x91, 0xd3, 0xd7, 0xd4, 0xf0, 0x0e, 0x83, 0x32, 0x11,
	0x20, 0x6a, 0x06, 0x45, 0x84, 0xe1, 0x67, 0xe0, 0x54, 0xd0, 0xff, 0x98, 0x91, 0xaf, 0xe1, 0x60,
	0x9a, 0xa9, 0xcd, 0x5c, 0x68, 0x99, 0x45, 0x22, 0xc6, 0xaf, 0x45, 0x79, 0x0e, 0x57, 0xc5, 0x2b,
	0x5a, 0x43, 0x98, 0x0f, 0x07, 0x65, 0x54, 0xed, 0xa4, 0xcb, 0xf7, 0x30, 0x76, 0x04, 0xfd, 0x32,
	0xbe, 0xd9, 0xc5, 0x3a, 0xe4, 0x7f, 0x0f, 0xfd, 0x47, 0x52, 0x97, 0xbf, 0x04, 0xdc, 0xdb, 0x47,
	0x52, 0x23, 0xd7, 0x14, 0x2c, 0x22, 0x7c, 0xd0, 0xe3, 0x78, 0x35, 0x51, 0xe9, 0x3a, 0x3a, 0xaf,
	0xbe, 0x78, 0x75, 0x88, 0xbd, 0x6d, 0x3c, 0xab, 0xfd, 0xab, 0x0a, 0x89, 0x15, 0x7c, 0xf2, 0xd6,
	0xaf, 0x57, 0x23, 0xeb, 0xc5, 0xd5, 0xc8, 0xfa, 0xeb, 0x6a, 0x64, 0xfd, 0x74, 0x3d, 0x6a, 0xbc,
	0xb8, 0x1e, 0x35, 0xfe, 0xb8, 0x1e, 0x35, 0xbe, 0x6d, 0x2f, 0xf0, 0x4f, 0xfa, 0xac, 0x43, 0x3f,
	0xd4, 0x0f, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xc9, 0xb8, 0xac, 0xf9, 0x71, 0x07, 0x00, 0x00,
}

func (m *Item) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Item) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Item) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SkillItemData != nil {
		{
			size, err := m.SkillItemData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItemDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.EquipmentData != nil {
		{
			size, err := m.EquipmentData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItemDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ExpandData != nil {
		{
			size, err := m.ExpandData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItemDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItemDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OwnerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OwnerInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OwnerInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintItemDef(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintItemDef(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Equipment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Equipment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Equipment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OwnerTeamMemberList) > 0 {
		for iNdEx := len(m.OwnerTeamMemberList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OwnerTeamMemberList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItemDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x32
		}
	}
	if m.Score != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.Score))
		i--
		dAtA[i] = 0x28
	}
	if m.IsPrecious {
		i--
		if m.IsPrecious {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.Socket) > 0 {
		for iNdEx := len(m.Socket) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Socket[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItemDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Affixes) > 0 {
		for iNdEx := len(m.Affixes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Affixes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItemDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Quality != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.Quality))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AffixData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AffixData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AffixData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Const {
		i--
		if m.Const {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AffixEffectType != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.AffixEffectType))
		i--
		dAtA[i] = 0x30
	}
	if m.Type != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x28
	}
	if m.AffixParam != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.AffixParam))
		i--
		dAtA[i] = 0x20
	}
	if m.Value != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Value))))
		i--
		dAtA[i] = 0x1d
	}
	if m.PropertyID != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.PropertyID))
		i--
		dAtA[i] = 0x10
	}
	if m.AffixID != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.AffixID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SkillItem) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SkillItem) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SkillItem) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ItemExpand) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemExpand) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemExpand) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ContainerType != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.ContainerType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.RelationBuildList) > 0 {
		for k := range m.RelationBuildList {
			v := m.RelationBuildList[k]
			baseI := i
			i--
			if v {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintItemDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintItemDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.InUse != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.InUse))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ItemContainer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemContainer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemContainer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id2Pos) > 0 {
		for k := range m.Id2Pos {
			v := m.Id2Pos[k]
			baseI := i
			i = encodeVarintItemDef(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintItemDef(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintItemDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.MaxNum != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.MaxNum))
		i--
		dAtA[i] = 0x18
	}
	if m.Type != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ItemMap) > 0 {
		for k := range m.ItemMap {
			v := m.ItemMap[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintItemDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintItemDef(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintItemDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ContainerEnum) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ContainerEnum) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ContainerEnum) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *Items) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Items) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Items) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Items) > 0 {
		for iNdEx := len(m.Items) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Items[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintItemDef(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ItemsMap) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ItemsMap) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ItemsMap) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k := range m.Data {
			v := m.Data[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintItemDef(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintItemDef(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintItemDef(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *DropMaterial) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DropMaterial) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DropMaterial) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaterialNum != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.MaterialNum))
		i--
		dAtA[i] = 0x18
	}
	if m.MaterialType != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.MaterialType))
		i--
		dAtA[i] = 0x10
	}
	if m.MaterialId != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.MaterialId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetItemData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetItemData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetItemData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ItemData != nil {
		{
			size, err := m.ItemData.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintItemDef(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.OldConfigID != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.OldConfigID))
		i--
		dAtA[i] = 0x10
	}
	if m.GetNum != 0 {
		i = encodeVarintItemDef(dAtA, i, uint64(m.GetNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintItemDef(dAtA []byte, offset int, v uint64) int {
	offset -= sovItemDef(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Item) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovItemDef(uint64(l))
	}
	if m.ExpandData != nil {
		l = m.ExpandData.Size()
		n += 1 + l + sovItemDef(uint64(l))
	}
	if m.EquipmentData != nil {
		l = m.EquipmentData.Size()
		n += 1 + l + sovItemDef(uint64(l))
	}
	if m.SkillItemData != nil {
		l = m.SkillItemData.Size()
		n += 1 + l + sovItemDef(uint64(l))
	}
	return n
}

func (m *OwnerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovItemDef(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovItemDef(uint64(l))
	}
	return n
}

func (m *Equipment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Quality != 0 {
		n += 1 + sovItemDef(uint64(m.Quality))
	}
	if len(m.Affixes) > 0 {
		for _, e := range m.Affixes {
			l = e.Size()
			n += 1 + l + sovItemDef(uint64(l))
		}
	}
	if len(m.Socket) > 0 {
		for _, e := range m.Socket {
			l = e.Size()
			n += 1 + l + sovItemDef(uint64(l))
		}
	}
	if m.IsPrecious {
		n += 2
	}
	if m.Score != 0 {
		n += 1 + sovItemDef(uint64(m.Score))
	}
	if len(m.OwnerTeamMemberList) > 0 {
		for _, e := range m.OwnerTeamMemberList {
			l = e.Size()
			n += 1 + l + sovItemDef(uint64(l))
		}
	}
	return n
}

func (m *AffixData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AffixID != 0 {
		n += 1 + sovItemDef(uint64(m.AffixID))
	}
	if m.PropertyID != 0 {
		n += 1 + sovItemDef(uint64(m.PropertyID))
	}
	if m.Value != 0 {
		n += 5
	}
	if m.AffixParam != 0 {
		n += 1 + sovItemDef(uint64(m.AffixParam))
	}
	if m.Type != 0 {
		n += 1 + sovItemDef(uint64(m.Type))
	}
	if m.AffixEffectType != 0 {
		n += 1 + sovItemDef(uint64(m.AffixEffectType))
	}
	if m.Const {
		n += 2
	}
	return n
}

func (m *SkillItem) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ItemExpand) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InUse != 0 {
		n += 1 + sovItemDef(uint64(m.InUse))
	}
	if len(m.RelationBuildList) > 0 {
		for k, v := range m.RelationBuildList {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovItemDef(uint64(len(k))) + 1 + 1
			n += mapEntrySize + 1 + sovItemDef(uint64(mapEntrySize))
		}
	}
	if m.ContainerType != 0 {
		n += 1 + sovItemDef(uint64(m.ContainerType))
	}
	return n
}

func (m *ItemContainer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ItemMap) > 0 {
		for k, v := range m.ItemMap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovItemDef(uint64(l))
			}
			mapEntrySize := 1 + sovItemDef(uint64(k)) + l
			n += mapEntrySize + 1 + sovItemDef(uint64(mapEntrySize))
		}
	}
	if m.Type != 0 {
		n += 1 + sovItemDef(uint64(m.Type))
	}
	if m.MaxNum != 0 {
		n += 1 + sovItemDef(uint64(m.MaxNum))
	}
	if len(m.Id2Pos) > 0 {
		for k, v := range m.Id2Pos {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovItemDef(uint64(len(k))) + 1 + sovItemDef(uint64(v))
			n += mapEntrySize + 1 + sovItemDef(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *ContainerEnum) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *Items) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Items) > 0 {
		for _, e := range m.Items {
			l = e.Size()
			n += 1 + l + sovItemDef(uint64(l))
		}
	}
	return n
}

func (m *ItemsMap) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Data) > 0 {
		for k, v := range m.Data {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovItemDef(uint64(l))
			}
			mapEntrySize := 1 + sovItemDef(uint64(k)) + l
			n += mapEntrySize + 1 + sovItemDef(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *DropMaterial) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaterialId != 0 {
		n += 1 + sovItemDef(uint64(m.MaterialId))
	}
	if m.MaterialType != 0 {
		n += 1 + sovItemDef(uint64(m.MaterialType))
	}
	if m.MaterialNum != 0 {
		n += 1 + sovItemDef(uint64(m.MaterialNum))
	}
	return n
}

func (m *GetItemData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GetNum != 0 {
		n += 1 + sovItemDef(uint64(m.GetNum))
	}
	if m.OldConfigID != 0 {
		n += 1 + sovItemDef(uint64(m.OldConfigID))
	}
	if m.ItemData != nil {
		l = m.ItemData.Size()
		n += 1 + l + sovItemDef(uint64(l))
	}
	return n
}

func sovItemDef(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozItemDef(x uint64) (n int) {
	return sovItemDef(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Item) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Item: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Item: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &ItemBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpandData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExpandData == nil {
				m.ExpandData = &ItemExpand{}
			}
			if err := m.ExpandData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquipmentData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquipmentData == nil {
				m.EquipmentData = &Equipment{}
			}
			if err := m.EquipmentData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkillItemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SkillItemData == nil {
				m.SkillItemData = &SkillItem{}
			}
			if err := m.SkillItemData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OwnerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OwnerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OwnerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Equipment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Equipment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Equipment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Quality", wireType)
			}
			m.Quality = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Quality |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Affixes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Affixes = append(m.Affixes, &AffixData{})
			if err := m.Affixes[len(m.Affixes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Socket", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Socket = append(m.Socket, &Item{})
			if err := m.Socket[len(m.Socket)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsPrecious", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsPrecious = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Score", wireType)
			}
			m.Score = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Score |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerTeamMemberList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerTeamMemberList = append(m.OwnerTeamMemberList, &OwnerInfo{})
			if err := m.OwnerTeamMemberList[len(m.OwnerTeamMemberList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AffixData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AffixData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AffixData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixID", wireType)
			}
			m.AffixID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PropertyID", wireType)
			}
			m.PropertyID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PropertyID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Value = float32(math.Float32frombits(v))
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixParam", wireType)
			}
			m.AffixParam = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixParam |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AffixEffectType", wireType)
			}
			m.AffixEffectType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AffixEffectType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Const", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Const = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SkillItem) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SkillItem: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SkillItem: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemExpand) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemExpand: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemExpand: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InUse", wireType)
			}
			m.InUse = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InUse |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelationBuildList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RelationBuildList == nil {
				m.RelationBuildList = make(map[string]bool)
			}
			var mapkey string
			var mapvalue bool
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItemDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthItemDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthItemDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapvaluetemp int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvaluetemp |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					mapvalue = bool(mapvaluetemp != 0)
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipItemDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthItemDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.RelationBuildList[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContainerType", wireType)
			}
			m.ContainerType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContainerType |= ContainerEnum_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemContainer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemContainer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemContainer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemMap == nil {
				m.ItemMap = make(map[int32]*Item)
			}
			var mapkey int32
			var mapvalue *Item
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItemDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthItemDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthItemDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Item{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipItemDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthItemDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.ItemMap[mapkey] = mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= ContainerEnum_Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxNum", wireType)
			}
			m.MaxNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id2Pos", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Id2Pos == nil {
				m.Id2Pos = make(map[string]int32)
			}
			var mapkey string
			var mapvalue int32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItemDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthItemDef
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthItemDef
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipItemDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthItemDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Id2Pos[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContainerEnum) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContainerEnum: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContainerEnum: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Items) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Items: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Items: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, &Item{})
			if err := m.Items[len(m.Items)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ItemsMap) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ItemsMap: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ItemsMap: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = make(map[int32]*Item)
			}
			var mapkey int32
			var mapvalue *Item
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowItemDef
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowItemDef
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthItemDef
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthItemDef
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Item{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipItemDef(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthItemDef
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Data[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DropMaterial) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DropMaterial: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DropMaterial: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialId", wireType)
			}
			m.MaterialId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialType", wireType)
			}
			m.MaterialType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialType |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaterialNum", wireType)
			}
			m.MaterialNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaterialNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetItemData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetItemData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetItemData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetNum", wireType)
			}
			m.GetNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GetNum |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldConfigID", wireType)
			}
			m.OldConfigID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OldConfigID |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ItemData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthItemDef
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthItemDef
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ItemData == nil {
				m.ItemData = &Item{}
			}
			if err := m.ItemData.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipItemDef(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthItemDef
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipItemDef(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowItemDef
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowItemDef
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthItemDef
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupItemDef
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthItemDef
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthItemDef        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowItemDef          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupItemDef = fmt.Errorf("proto: unexpected end of group")
)
